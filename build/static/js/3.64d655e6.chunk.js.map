{"version":3,"sources":["../node_modules/lodash/_baseIteratee.js","../node_modules/lodash/isEqual.js","../node_modules/lodash/_baseIsEqual.js","../node_modules/lodash/_hasPath.js","../node_modules/lodash/_setToArray.js","../node_modules/lodash/_equalArrays.js","../node_modules/lodash/_baseEach.js","../node_modules/lodash/_baseForOwn.js","../node_modules/lodash/_isStrictComparable.js","../node_modules/lodash/_matchesStrictComparable.js","../node_modules/lodash/_arraySome.js","../node_modules/lodash/_mapToArray.js","../node_modules/lodash/_baseFor.js","../node_modules/lodash/_createBaseFor.js","../node_modules/lodash/_baseIsEqualDeep.js","../node_modules/lodash/_equalByTag.js","../node_modules/lodash/_equalObjects.js","../node_modules/react-chartjs-2/es/index.js","../node_modules/lodash/hasIn.js","../node_modules/lodash/_baseMatches.js","../node_modules/lodash/_baseIsMatch.js","../node_modules/lodash/_getMatchData.js","../node_modules/lodash/_baseMatchesProperty.js","../node_modules/lodash/_baseHasIn.js","../node_modules/lodash/property.js","../node_modules/lodash/_baseProperty.js","../node_modules/lodash/_basePropertyDeep.js","../node_modules/lodash/_createBaseEach.js","../node_modules/chart.js/dist/Chart.js","../node_modules/lodash/keyBy.js","../node_modules/lodash/_createAggregator.js","../node_modules/lodash/_arrayAggregator.js","../node_modules/lodash/_baseAggregator.js"],"names":["baseMatches","__webpack_require__","baseMatchesProperty","identity","isArray","property","module","exports","value","baseIsEqual","other","baseIsEqualDeep","isObjectLike","bitmask","customizer","stack","castPath","isArguments","isIndex","isLength","toKey","object","path","hasFunc","index","length","result","key","set","Array","size","forEach","SetCache","arraySome","cacheHas","COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","array","equalFunc","isPartial","arrLength","othLength","stacked","get","seen","undefined","arrValue","othValue","compared","othIndex","push","baseForOwn","baseEach","createBaseEach","baseFor","keys","iteratee","isObject","srcValue","Object","predicate","map","createBaseFor","fromRight","keysFunc","iterable","props","Stack","equalArrays","equalByTag","equalObjects","getTag","isBuffer","isTypedArray","argsTag","arrayTag","objectTag","hasOwnProperty","prototype","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","objIsWrapped","call","othIsWrapped","objUnwrapped","othUnwrapped","Symbol","Uint8Array","eq","mapToArray","setToArray","boolTag","dateTag","errorTag","mapTag","numberTag","regexpTag","setTag","stringTag","symbolTag","arrayBufferTag","dataViewTag","symbolProto","symbolValueOf","valueOf","tag","byteLength","byteOffset","buffer","name","message","convert","getAllKeys","objProps","objLength","skipCtor","objValue","objCtor","constructor","othCtor","process","d","__webpack_exports__","Doughnut","Pie","Line","Bar","HorizontalBar","Radar","Polar","Bubble","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","chart_js__WEBPACK_IMPORTED_MODULE_2__","chart_js__WEBPACK_IMPORTED_MODULE_2___default","lodash_isEqual__WEBPACK_IMPORTED_MODULE_3__","lodash_isEqual__WEBPACK_IMPORTED_MODULE_3___default","lodash_keyBy__WEBPACK_IMPORTED_MODULE_4__","lodash_keyBy__WEBPACK_IMPORTED_MODULE_4___default","_extends","assign","target","i","arguments","source","_objectWithoutProperties","obj","indexOf","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","enumerable","writable","configurable","setPrototypeOf","__proto__","NODE_ENV","PUBLIC_URL","ChartComponent","_React$Component","_temp","_this","this","_len","args","_key","apply","concat","handleOnClick","event","chartInstance","_this$props","getDatasetAtEvent","getElementAtEvent","getElementsAtEvent","onElementsClick","ref","element","componentWillMount","componentDidMount","renderChart","componentDidUpdate","redraw","destroyChart","updateChart","shouldComponentUpdate","nextProps","_props","type","options","plugins","legend","height","width","nextData","transformDataProp","shadowDataProp","componentWillUnmount","data","memoizeDataProps","datasets","saveCurrentDatasets","checkDatasets","isDev","usingCustomKeyProvider","datasetKeyProvider","getLabelAsKey","multipleDatasets","shouldWarn","dataset","label","console","error","getCurrentDatasets","config","_this2","_this3","a","helpers","configMerge","currentDatasets","nextDatasets","currentDatasetsIndexed","next","current","splice","point","pid","otherProps","rest","update","_props2","node","defaultProps","values","destroy","render","_props3","id","createElement","onClick","Component","propTypes","oneOfType","func","isRequired","number","arrayOf","bool","propName","componentName","controllers","Error","display","position","_React$Component2","_this5","_ref","_React$Component3","_this7","_ref2","_React$Component4","_this9","_ref3","_React$Component5","_this11","_ref4","_React$Component6","_this13","_ref5","_React$Component7","_this15","_ref6","_React$Component8","_this17","_ref7","_React$Component9","_this19","_ref8","_React$Component10","Scatter","_this21","_ref9","defaults","baseHasIn","hasPath","baseIsMatch","getMatchData","matchesStrictComparable","matchData","noCustomizer","isStrictComparable","hasIn","isKey","baseProperty","basePropertyDeep","baseGet","isArrayLike","eachFunc","collection","moment","conversions","rgb2hsl","rgb2hsv","rgb2hwb","rgb2cmyk","rgb2keyword","rgb2xyz","rgb2lab","rgb2lch","lab2lch","hsl2rgb","hsl2hsv","hsl","h","s","l","hsl2hwb","hsl2cmyk","hsl2keyword","hsv2rgb","hsv2hsl","hsv","sl","v","hsv2hwb","hsv2cmyk","hsv2keyword","hwb2rgb","hwb2hsl","hwb2hsv","hwb2cmyk","hwb2keyword","cmyk2rgb","cmyk2hsl","cmyk2hsv","cmyk2hwb","cmyk2keyword","keyword2rgb","keyword2hsl","keyword2hsv","keyword2hwb","keyword2cmyk","keyword2lab","keyword2xyz","xyz2rgb","xyz2lab","xyz2lch","lab2xyz","lab2rgb","lch2lab","lch2xyz","lch2rgb","rgb","r","g","b","min","Math","max","delta","w","k","reverseKeywords","JSON","stringify","pow","x","y","z","xyz","t1","t2","t3","val","hi","floor","f","p","q","t","hwb","wh","bl","ratio","cmyk","c","m","lab","y2","hr","atan2","PI","sqrt","lch","cos","sin","keyword","cssKeywords","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","Converter","arg","slice","pair","exec","from","to","round","convs","routeSpace","space","getValues","setValues","vals","fspace","colorConvert","colorName","colorString","getRgba","getHsla","getRgb","string","rgba","getHsl","hsla","getHwb","getAlpha","hexString","hexDouble","rgbString","alpha","rgbaString","percentString","percentaString","hslString","hslaString","hwbString","reverseNames","match","hexAlpha","parseInt","parseFloat","scale","isNaN","num","str","toString","toUpperCase","Color","valid","lightness","whiteness","isValid","setSpace","rgbArray","hslArray","hsvArray","hwbArray","cmykArray","rgbaArray","hslaArray","setChannel","hue","saturation","saturationv","blackness","rgbNumber","luminosity","lum","chan","contrast","color2","lum1","lum2","level","contrastRatio","dark","light","negate","lighten","darken","saturate","desaturate","whiten","blacken","greyscale","clearer","opaquer","rotate","degrees","mix","mixinColor","weight","w1","w2","toJSON","clone","prop","spaces","maxes","charAt","capped","chans","sname","svalues","window","chartjsColor","noop","uid","isNullOrUndef","substr","isFinite","_isFinite","_x","Number","valueOrDefault","defaultValue","valueAtIndexOrDefault","callback","fn","thisArg","each","loopable","reverse","len","arrayEquals","a0","a1","ilen","v0","v1","klen","_merger","tval","sval","merge","_mergerIf","mergeIf","sources","merger","extend","setFn","inherits","extensions","me","ChartElement","Surrogate","__super__","helpers_core","callCallback","item","fromIndex","getValueOrDefault","getValueAtIndexOrDefault","effects","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","easeOutSine","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","asin","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeInBounce","easeOutBounce","easeInOutBounce","helpers_easing","easingEffects","RAD_PER_DEG","DOUBLE_PI","HALF_PI","QUARTER_PI","TWO_THIRDS_PI","exports$1","clear","chart","ctx","clearRect","roundedRect","radius","left","top","right","bottom","moveTo","arc","closePath","rect","drawPoint","style","rotation","xOffset","yOffset","cornerRadius","rad","beginPath","lineTo","SQRT1_2","fill","stroke","drawImage","_isPointInArea","area","clipArea","save","clip","unclipArea","restore","previous","flip","stepped","steppedLine","midpoint","tension","bezierCurveTo","controlPointPreviousX","controlPointNextX","controlPointPreviousY","controlPointNextY","helpers_canvas","drawRoundedRectangle","_set","scope","defaultColor","defaultFontColor","defaultFontFamily","defaultFontSize","defaultFontStyle","defaultLineHeight","showLines","core_defaults","helpers_options","toLineHeight","matches","toPadding","_parseFont","globalDefaults","global","fontSize","font","family","fontFamily","lineHeight","fontStyle","toFontString","resolve","inputs","context","helpers$1","easing","canvas","Element","configuration","initialize","hidden","pivot","_view","_model","_start","transition","ease","model","start","view","actual","origin","c0","c1","interpolate","tooltipPosition","hasValue","isNumber","core_element","exports$2","currentStep","numSteps","onAnimationProgress","onAnimationComplete","core_animation","defineProperty","animation","duration","onProgress","onComplete","core_animations","animations","request","addAnimation","lazy","startTime","Date","now","animating","requestAnimationFrame","cancelAnimation","findIndex","requestAnimFrame","startDigest","advance","nextStep","arrayEvents","unlistenArrayEvents","listener","stub","_chartjs","listeners","DatasetController","datasetIndex","datasetElementType","dataElementType","linkScales","addElements","updateIndex","meta","getMeta","getDataset","xAxisID","scales","xAxes","yAxisID","yAxes","getDatasetMeta","getScaleForId","scaleID","_getValueScaleId","_getIndexScaleId","_getValueScale","_getIndexScale","reset","_data","createMetaDataset","_chart","_datasetIndex","createMetaData","_index","metaData","addElementAndReset","updateElement","buildOrUpdateElements","isExtensible","method","base","res","resyncElements","easingValue","elements","draw","removeHoverStyle","$previousStyle","setHoverStyle","custom","getHoverColor","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth","numMeta","numData","insertElements","count","onDataPush","onDataPop","pop","onDataShift","shift","onDataSplice","onDataUnshift","core_datasetController","borderAlign","element_arc","inLabelRange","mouseX","vm","hoverRadius","inRange","chartX","chartY","pointRelativePosition","getAngleFromPoint","angle","distance","startAngle","endAngle","betweenAngles","withinRadius","innerRadius","outerRadius","getCenterPoint","halfAngle","halfRadius","getArea","centreAngle","rangeFromCentre","angleMargin","sA","eA","pixelMargin","fillStyle","lineWidth","lineJoin","strokeStyle","valueOrDefault$1","line","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","capBezierPoints","element_line","currentVM","spanGaps","points","_children","globalOptionLineElements","lastDrawnIndex","_loop","lineCap","setLineDash","lineDashOffset","previousItem","skip","valueOrDefault$2","defaultColor$1","xRange","abs","hitRadius","pointStyle","element_point","mouseY","inXRange","inYRange","padding","chartArea","defaultColor$2","isVertical","getBarBounds","x1","x2","y1","half","swap","orig","v2","parseBorderWidth","maxW","maxH","edge","borderSkipped","horizontal","parseBorderSkipped","_inRange","skipX","skipY","bounds","rectangle","element_rectangle","rects","border","outer","inner","boundingRects","fillRect","Arc","Point","Rectangle","resolve$1","hover","mode","categoryPercentage","barPercentage","offset","gridLines","offsetGridLines","controller_bar","bar","_ruler","getRuler","_resolveElementOptions","_xScale","_yScale","datasetLabel","labels","_updateElementGeometry","vscale","getBasePixel","isHorizontal","ruler","vpixels","calculateBarValuePixels","ipixels","calculateBarIndexPixels","head","center","_getStacks","last","stacks","isDatasetVisible","getStackCount","getStackIndex","stackCount","end","pixels","getPixelForValue","barThickness","prev","curr","ticks","getTicks","getPixelForTick","computeMinSampleSize","imeta","ivalue","getRightValue","minBarLength","controller","range","percent","chunk","computeFlexCategoryTraits","thickness","computeFitCategoryTraits","stackIndex","maxBarThickness","Infinity","dataIndex","valueOrDefault$3","resolve$2","tooltips","callbacks","title","dataPoint","xLabel","yLabel","controller_bubble","xScale","yScale","dsIndex","getPixelForDecimal","NaN","_options","resolve$3","valueOrDefault$4","animateRotate","animateScale","legendCallback","text","join","generateLabels","ds","arcOpts","bw","e","legendItem","cutoutPercentage","circumference","tooltipItem","dataLabel","controller_doughnut","getRingIndex","ringIndex","j","opts","availableWidth","availableHeight","minSize","arcs","chartWeight","_getRingWeight","contains0","contains90","contains180","contains270","cutout","getMaxBorderWidth","radiusLength","_getVisibleDatasetWeightTotal","offsetX","offsetY","total","calculateTotal","_getRingWeightOffset","animationOpts","centerX","centerY","calculateCircumference","hoverWidth","ringWeightOffset","dataSetIndex","axis","controller_horizontalBar","valueOrDefault$5","resolve$4","isPointInArea","lineEnabled","showLine","controller_line","lineTension","_scale","_resolveLineOptions","updateBezierControlPoints","lineModel","_resolvePointOptions","calculatePointY","ELEMENT_OPTIONS","elementOptions","dsMeta","sumPos","sumNeg","stackedRightValue","rightValue","controlPoints","capControlPoint","pt","filter","cubicInterpolationMode","splineCurveMonotone","splineCurve","nextItem","halfBorderWidth","resolve$5","angleLines","circular","pointLabels","beginAtZero","controller_polarArea","starts","_starts","angles","_angles","_updateRadius","countVisibleElements","_computeAngle","getVisibleDatasetCount","xCenter","yCenter","datasetStartAngle","getDistanceFromCenterForValue","resetRadius","doughnut","controller_pie","valueOrDefault$6","resolve$6","controller_radar","pointPosition","getPointPositionForValue","bubble","horizontalBar","polarArea","pie","radar","scatter","getRelativePosition","native","parseVisibleItems","handler","jlen","getIntersectItems","getNearestItems","intersect","distanceMetric","minDistance","POSITIVE_INFINITY","nearestItems","getDistanceMetricForAxis","useX","useY","pt1","pt2","deltaX","deltaY","indexMode","items","core_interaction","modes","single","x-axis","nearest","intersectsItem","filterByPosition","where","sortByWeight","_tmpIndex_","sort","addSizeByPosition","boxes","box","layout","core_layouts","addBox","fullWidth","removeBox","layoutItem","configure","layoutOptions","leftPadding","rightPadding","topPadding","bottomPadding","leftBoxes","rightBoxes","topBoxes","bottomBoxes","chartAreaBoxes","maxPadding","verticalBoxes","horizontalBoxes","outerBoxes","chartWidth","chartHeight","chartAreaWidth","verticalBoxWidth","maxChartAreaWidth","maxChartAreaHeight","outerBoxSizes","minBoxSizes","getPadding","boxPadding","findMaxPadding","fitBox","minBoxSize","findNextWhere","scaleMargin","leftPaddingAddition","topPaddingAddition","newMaxChartAreaHeight","newMaxChartAreaWidth","placeBox","minBox","stylesheet","freeze","default","EXPANDO_KEY","CSS_SIZE_MONITOR","CSS_PREFIX","CSS_RENDER_MONITOR","CSS_RENDER_ANIMATION","ANIMATION_START_EVENTS","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","readUsedSize","getStyle","eventListenerOptions","supports","addEventListener","passive","addListener","removeListener","removeEventListener","createEvent","nativeEvent","createDiv","cls","el","document","className","addResizeListener","expando","resizer","expand","shrink","appendChild","_reset","scrollLeft","scrollTop","onScroll","bind","createResizer","ticking","throttled","container","maintainAspectRatio","parentNode","clientWidth","proxy","renderProxy","animationName","reflow","offsetParent","classList","add","watchForRender","insertBefore","firstChild","removeResizeListener","remove","unwatchForRender","removeChild","platform_dom$2","disableCSSInjection","_enabled","_ensureLoaded","_loaded","platform","css","_style","setAttribute","getElementsByTagName","createTextNode","injectCSS","acquireContext","getElementById","getContext","renderHeight","getAttribute","renderWidth","initial","displayWidth","aspectRatio","displayHeight","initCanvas","releaseContext","removeAttribute","proxies","pos","fromNativeEvent","addEvent","removeEvent","implementation","core_plugins","_plugins","_cacheId","register","plugin","unregister","idx","getAll","notify","hook","descriptor","params","descriptors","cache","$plugins","_invalidate","core_scaleService","constructors","registerScaleType","scaleConstructor","scaleDefaults","getScaleConstructor","getScaleDefaults","updateScaleDefaults","additions","addScalesToLayout","valueOrDefault$7","enabled","titleFontStyle","titleSpacing","titleMarginBottom","titleFontColor","titleAlign","bodySpacing","bodyFontColor","bodyAlign","footerFontStyle","footerSpacing","footerMarginTop","footerFontColor","footerAlign","yPadding","xPadding","caretPadding","caretSize","multiKeyBackground","displayColors","beforeTitle","tooltipItems","labelCount","afterTitle","beforeBody","beforeLabel","labelColor","activeElement","labelTextColor","afterLabel","afterBody","beforeFooter","footer","afterFooter","positioners","average","eventPosition","nearestElement","distanceBetweenPoints","tp","pushOrConcat","toPush","splitNewlines","String","split","createTooltipItem","indexScale","valueScale","getLabelForIndex","getBaseModel","tooltipOpts","xAlign","yAlign","_bodyFontFamily","bodyFontFamily","_bodyFontStyle","bodyFontStyle","_bodyAlign","bodyFontSize","_titleFontFamily","titleFontFamily","_titleFontStyle","titleFontSize","_titleAlign","_footerFontFamily","footerFontFamily","_footerFontStyle","footerFontSize","_footerAlign","opacity","legendColorBackground","getAlignedX","align","getBeforeAfterBodyLines","exports$3","_lastActive","getTitle","lines","getBeforeBody","getBody","bodyItems","bodyItem","before","after","getAfterBody","getFooter","changed","existingModel","active","_active","alignment","backgroundPoint","tooltipSize","caretX","caretY","labelColors","labelTextColors","_eventPosition","itemSort","body","dataPoints","tooltip","combinedBodyLength","reduce","titleLineCount","footerLineCount","widthPadding","maxLineWidth","measureText","fontString","getTooltipSize","lf","rf","olf","orf","yf","midX","midY","determineAlignment","paddingAndSize","radiusAndPadding","getBackgroundPoint","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","tmp","drawTitle","textAlign","textBaseline","fillText","drawBody","textColor","drawColorBoxes","xLinePadding","colorX","fillLineOfText","strokeRect","drawFooter","drawBackground","quadraticCurveTo","hasTooltipContent","globalAlpha","handleEvent","getElementsAtEventForMode","positioners_1","core_tooltip","valueOrDefault$8","mergeScaleConfig","slen","mergeConfig","positionIsHorizontal","events","onHover","animationDuration","responsive","responsiveAnimationDuration","Chart","construct","initConfig","_bufferedRender","instances","retinaScale","devicePixelRatio","bindEvents","resize","ensureScalesHaveIDs","buildOrUpdateScales","initToolTip","stop","silent","newWidth","getMaximumWidth","newHeight","getMaximumHeight","newSize","onResize","scalesOptions","scaleOptions","xAxisOptions","yAxisOptions","updated","dtype","dposition","isDefault","scaleType","scaleClass","mergeTicksOptions","hasUpdated","buildOrUpdateControllers","newControllers","destroyDatasetMeta","ControllerClass","resetElements","newOptions","updateConfig","updateLayout","updateDatasets","lastActive","_bufferedRequest","updateDataset","animationOptions","animationObject","easingFunction","stepDecimal","drawDatasets","_drawTooltip","drawDataset","getElementsAtXAxis","_meta","generateLegend","unbindEvents","toBase64Image","toDataURL","_chartInstance","_listeners","eventHandler","updateHoverStyle","bufferedRequest","hoverOptions","core_controller","abstract","DateAdapter","Controller","types","scaleMerge","formats","parse","format","diff","startOf","endOf","_create","override","members","core_adapters","_date","core_ticks","formatters","tickValue","logDelta","log10","tickString","maxTick","logTick","toExponential","numDecimal","toFixed","logarithmic","remain","valueOrDefault$9","labelsFromTicks","computeTextSize","tick","longestText","color","drawBorder","drawOnChartArea","drawTicks","tickMarkLength","zeroLineWidth","zeroLineColor","zeroLineBorderDash","zeroLineBorderDashOffset","scaleLabel","labelString","minRotation","maxRotation","mirror","autoSkip","autoSkipPadding","labelOffset","minor","major","core_scale","paddingLeft","paddingTop","paddingRight","paddingBottom","_ticks","beforeUpdate","maxWidth","maxHeight","margins","_maxLabelLines","longestLabelWidth","longestTextCache","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","beforeBuildTicks","buildTicks","afterBuildTicks","beforeTickToLabelConversion","convertTicksToLabels","afterTickToLabelConversion","beforeCalculateTickRotation","calculateTickRotation","afterCalculateTickRotation","beforeFit","fit","afterFit","afterUpdate","tickOpts","userCallback","tickFont","labelRotation","cosRotation","originalLabelWidth","labelWidth","tickWidth","angleRadians","toRadians","scaleLabelOpts","gridLineOpts","_isVisible","parseFont","isFullWidth","scaleLabelFont","scaleLabelPadding","deltaHeight","largestTextWidth","tallestLabelHeightInLines","numberOfLabelLines","lineSpace","tickPadding","sinRotation","labelHeight","firstLabelWidth","lastLabelWidth","offsetLeft","offsetRight","handleMargins","rawValue","getValueForPixel","innerWidth","pixel","finalVal","innerHeight","decimal","valueOffset","getBaseValue","_autoSkip","optionTicks","tickCount","skipRatio","maxTicks","maxTicksLimit","ticksLength","_tickSize","axisLength","PaddingBottom","rot","borderValue","tickStart","tickEnd","optionMajorTicks","isRotated","isMirrored","tickFontColor","fontColor","majorTickFontColor","majorTickFont","tl","scaleLabelFontColor","labelRotationRadians","itemsToDraw","axisWidth","alignPixel","_alignPixel","lineColor","tx1","ty1","tx2","ty2","labelX","labelY","textOffset","zeroLineIndex","lineValue","getPixelForGridLine","labelYOffset","labelXOffset","glWidth","glColor","glBorderDash","glBorderDashOffset","itemToDraw","translate","scaleLabelX","scaleLabelY","halfLineHeight","isLeft","firstLineWidth","lastLineWidth","scale_category","getLabels","xLabels","yLabels","minIndex","maxIndex","valueCategory","offsetAmt","valueWidth","widthOffset","valueHeight","heightOffset","horz","valueDimension","_defaults","scale_linearbase","handleTickRangeOptions","minSign","sign","maxSign","setMin","suggestedMin","setMax","suggestedMax","getTickLimit","stepSize","ceil","_computeTickLimit","handleDirectionalChanges","numericGeneratorOptions","precision","fixedStepSize","generationOptions","dataRange","factor","niceMin","niceMax","numSpaces","unit","maxNumSpaces","rmin","rmax","spacing","niceNum","_decimalPlaces","almostWhole","almostEquals","generateTicks","ticksAsNumbers","defaultConfig$1","scale_linear","IDMatches","hasStacks","valuesPerStack","positiveValues","negativeValues","relativePoints","valuesForType","minVal","maxVal","innerDimension","_defaults$1","valueOrDefault$a","defaultConfig$2","nonNegativeOrDefault","scale_logarithmic","minNotZero","exp","significand","tickVal","endExp","endSignificand","lastTick","generateTicks$1","tickValues","_getFirstTickValue","firstTickValue","_defaults$2","valueOrDefault$b","valueAtIndexOrDefault$1","resolve$7","defaultConfig$3","animate","showLabelBackdrop","backdropColor","backdropPaddingY","backdropPaddingX","getValueCount","getTickBackdropHeight","determineLimits","getTextAlignForAngle","adjustPointPositionForLabelHeight","textSize","numberOrZero","param","scale_radialLinear","drawingArea","NEGATIVE_INFINITY","plFont","furthestLimits","furthestAngles","_pointLabelSizes","valueCount","getPointPosition","getIndexAngle","toDegrees","hLimits","vLimits","setReductions","fitWithPointLabels","setCenterPoint","largestPossibleRadius","radiusReductionLeft","radiusReductionRight","radiusReductionTop","radiusReductionBottom","leftMovement","rightMovement","topMovement","bottomMovement","maxRight","maxLeft","maxTop","maxBottom","angleMultiplier","startAngleRadians","scalingFactor","distanceFromCenter","thisAngle","getBasePosition","angleLineOpts","pointLabelOpts","tickBackdropHeight","outerDistance","outerPosition","extra","pointLabelPosition","pointLabelFontColor","drawPointLabels","yCenterOffset","drawRadiusLine","_defaults$3","valueOrDefault$c","MIN_INTEGER","MIN_SAFE_INTEGER","MAX_INTEGER","MAX_SAFE_INTEGER","INTERVALS","millisecond","common","steps","second","minute","hour","day","week","month","quarter","year","UNITS","sorter","arrayUnique","hash","out","interpolate$1","table","skey","tkey","mid","i0","i1","lo","lookup","span","toTimestamp","input","adapter","_adapter","time","parser","determineMajorUnit","generate","capacity","timeOpts","minUnit","interval","determineUnitForAutoTicks","unitStepSize","weekday","isoWeekday","majorTicksEnabled","first","milliseconds","determineStepSize","scale_time","adapters","date","warn","displayFormats","timestamp","timestamps","dataLabels","_horizontal","_table","_timestamps","getLabelCapacity","_unit","determineUnitForFormatting","_majorUnit","distribution","buildLookupTable","_offsets","computeOffsets","majorUnit","ticksFromTimestamps","tooltipFormat","datetime","tickFormatFunction","minorFormat","majorFormat","majorTime","majorTickOpts","formatter","getPixelForOffset","isReverse","getLabelWidth","ticksOpts","tickLabelWidth","tickFontSize","exampleTime","exampleLabel","_defaults$4","displayFormat","category","radialLinear","FORMATS","_id","_format","amount","as","filler","propagate","mappers","visible","boundary","decodeFill","computeBoundary","scaleBottom","scaleTop","scaleZero","resolveTarget","visited","createMapper","isDrawable","drawArea","curve0","curve1","len0","len1","plugin_filler","afterDatasetsUpdate","$filler","mapper","beforeDatasetDraw","loop","p0","p1","d0","d1","doFill","noop$1","valueOrDefault$d","getBoxWidth","labelOpts","usePointStyle","boxWidth","ci","onLeave","lineDash","Legend","legendHitBoxes","_hoveredItem","doughnutMode","beforeBuildLabels","buildLabels","afterBuildLabels","legendItems","labelFont","hitboxes","lineWidths","totalHeight","vPadding","columnWidths","totalWidth","currentColWidth","currentColHeight","itemHeight","itemWidth","lineDefault","legendWidth","cursor","textWidth","SQRT2","drawLegendBox","halfFontSize","xLeft","yMiddle","_getLegendItemAt","hitBox","lh","hoveredItem","createNewLegendAndAttach","legendOpts","plugin_legend","_element","beforeInit","afterEvent","noop$2","Title","lineCount","fontOpts","titleX","titleY","createNewTitleBlockAndAttach","titleOpts","titleBlock","parseMaxStyle","styleValue","parentProperty","valueInPixels","isConstrainedValue","getConstraintDimension","domNode","maxStyle","percentageProperty","defaultView","_getParentNode","constrainedNode","getComputedStyle","constrainedContainer","hasCNode","hasCContainer","infinity","filterCallback","filtered","arrayToSearch","startIndex","currentItem","findPreviousWhere","epsilon","rounded","exponent","log","LOG10E","powerOf10","isPowerOf10","radians","centrePoint","anglePoint","distanceFromXCenter","distanceFromYCenter","radialDistanceFromCenter","aliasPixel","pixelWidth","currentDevicePixelRatio","halfWidth","firstPoint","middlePoint","afterPoint","d01","d12","s01","s12","fa","fb","EPSILON","pointBefore","pointCurrent","pointAfter","alphaK","betaK","tauK","squaredMagnitude","pointsWithTangents","deltaK","mK","pointsLen","slopeDeltaX","fraction","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","setTimeout","evt","originalEvent","srcElement","boundingRect","getBoundingClientRect","touches","clientX","clientY","getConstraintWidth","getConstraintHeight","_calculatePadding","parentDimension","parent","host","cw","clientHeight","ch","currentStyle","getPropertyValue","forceRatio","pixelRatio","pixelSize","arrayOfThings","gc","garbageCollect","longest","thing","nestedThing","gcLen","numberOfLines","CanvasGradient","colorValue","CanvasPattern","core_helpers","_adapters","Animation","animationService","Interaction","layouts","Scale","scaleService","Ticks","Tooltip","src","pluginService","PluginBase","canvasHelpers","layoutService","LinearScaleBase","klass","cfg","toLowerCase","factory","baseAssignValue","keyBy","createAggregator","arrayAggregator","baseAggregator","baseIteratee","setter","initializer","accumulator"],"mappings":"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","file":"static/js/3.64d655e6.chunk.js","sourcesContent":["var baseMatches = require('./_baseMatches'),\n    baseMatchesProperty = require('./_baseMatchesProperty'),\n    identity = require('./identity'),\n    isArray = require('./isArray'),\n    property = require('./property');\n/**\n * The base implementation of `_.iteratee`.\n *\n * @private\n * @param {*} [value=_.identity] The value to convert to an iteratee.\n * @returns {Function} Returns the iteratee.\n */\n\n\nfunction baseIteratee(value) {\n  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n  if (typeof value == 'function') {\n    return value;\n  }\n\n  if (value == null) {\n    return identity;\n  }\n\n  if (typeof value == 'object') {\n    return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);\n  }\n\n  return property(value);\n}\n\nmodule.exports = baseIteratee;","var baseIsEqual = require('./_baseIsEqual');\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\n\n\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\nmodule.exports = isEqual;","var baseIsEqualDeep = require('./_baseIsEqualDeep'),\n    isObjectLike = require('./isObjectLike');\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\n\n\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n\n  if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {\n    return value !== value && other !== other;\n  }\n\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\nmodule.exports = baseIsEqual;","var castPath = require('./_castPath'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isIndex = require('./_isIndex'),\n    isLength = require('./isLength'),\n    toKey = require('./_toKey');\n/**\n * Checks if `path` exists on `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @param {Function} hasFunc The function to check properties.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n */\n\n\nfunction hasPath(object, path, hasFunc) {\n  path = castPath(path, object);\n  var index = -1,\n      length = path.length,\n      result = false;\n\n  while (++index < length) {\n    var key = toKey(path[index]);\n\n    if (!(result = object != null && hasFunc(object, key))) {\n      break;\n    }\n\n    object = object[key];\n  }\n\n  if (result || ++index != length) {\n    return result;\n  }\n\n  length = object == null ? 0 : object.length;\n  return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));\n}\n\nmodule.exports = hasPath;","/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n  set.forEach(function (value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\nmodule.exports = setToArray;","var SetCache = require('./_SetCache'),\n    arraySome = require('./_arraySome'),\n    cacheHas = require('./_cacheHas');\n/** Used to compose bitmasks for value comparisons. */\n\n\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\n\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  } // Assume cyclic values are equal.\n\n\n  var stacked = stack.get(array);\n\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n\n  var index = -1,\n      result = true,\n      seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;\n  stack.set(array, other);\n  stack.set(other, array); // Ignore non-index properties.\n\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);\n    }\n\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n\n      result = false;\n      break;\n    } // Recursively compare arrays (susceptible to call stack limits).\n\n\n    if (seen) {\n      if (!arraySome(other, function (othValue, othIndex) {\n        if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n          return seen.push(othIndex);\n        }\n      })) {\n        result = false;\n        break;\n      }\n    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n      result = false;\n      break;\n    }\n  }\n\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\nmodule.exports = equalArrays;","var baseForOwn = require('./_baseForOwn'),\n    createBaseEach = require('./_createBaseEach');\n/**\n * The base implementation of `_.forEach` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n */\n\n\nvar baseEach = createBaseEach(baseForOwn);\nmodule.exports = baseEach;","var baseFor = require('./_baseFor'),\n    keys = require('./keys');\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\n\n\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\nmodule.exports = baseForOwn;","var isObject = require('./isObject');\n/**\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` if suitable for strict\n *  equality comparisons, else `false`.\n */\n\n\nfunction isStrictComparable(value) {\n  return value === value && !isObject(value);\n}\n\nmodule.exports = isStrictComparable;","/**\n * A specialized version of `matchesProperty` for source values suitable\n * for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction matchesStrictComparable(key, srcValue) {\n  return function (object) {\n    if (object == null) {\n      return false;\n    }\n\n    return object[key] === srcValue && (srcValue !== undefined || key in Object(object));\n  };\n}\n\nmodule.exports = matchesStrictComparable;","/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nmodule.exports = arraySome;","/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n  map.forEach(function (value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\nmodule.exports = mapToArray;","var createBaseFor = require('./_createBaseFor');\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\n\n\nvar baseFor = createBaseFor();\nmodule.exports = baseFor;","/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function (object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n\n    return object;\n  };\n}\n\nmodule.exports = createBaseFor;","var Stack = require('./_Stack'),\n    equalArrays = require('./_equalArrays'),\n    equalByTag = require('./_equalByTag'),\n    equalObjects = require('./_equalObjects'),\n    getTag = require('./_getTag'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isTypedArray = require('./isTypedArray');\n/** Used to compose bitmasks for value comparisons. */\n\n\nvar COMPARE_PARTIAL_FLAG = 1;\n/** `Object#toString` result references. */\n\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    objectTag = '[object Object]';\n/** Used for built-in method references. */\n\nvar objectProto = Object.prototype;\n/** Used to check objects for own properties. */\n\nvar hasOwnProperty = objectProto.hasOwnProperty;\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\n\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n\n    objIsArr = true;\n    objIsObj = false;\n  }\n\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack());\n    return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n      stack || (stack = new Stack());\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n\n  if (!isSameTag) {\n    return false;\n  }\n\n  stack || (stack = new Stack());\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\nmodule.exports = baseIsEqualDeep;","var Symbol = require('./_Symbol'),\n    Uint8Array = require('./_Uint8Array'),\n    eq = require('./eq'),\n    equalArrays = require('./_equalArrays'),\n    mapToArray = require('./_mapToArray'),\n    setToArray = require('./_setToArray');\n/** Used to compose bitmasks for value comparisons. */\n\n\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n/** `Object#toString` result references. */\n\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]';\n/** Used to convert symbols to primitives and strings. */\n\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\n\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {\n        return false;\n      }\n\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == other + '';\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      } // Assume cyclic values are equal.\n\n\n      var stacked = stack.get(object);\n\n      if (stacked) {\n        return stacked == other;\n      }\n\n      bitmask |= COMPARE_UNORDERED_FLAG; // Recursively compare objects (susceptible to call stack limits).\n\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n\n  }\n\n  return false;\n}\n\nmodule.exports = equalByTag;","var getAllKeys = require('./_getAllKeys');\n/** Used to compose bitmasks for value comparisons. */\n\n\nvar COMPARE_PARTIAL_FLAG = 1;\n/** Used for built-in method references. */\n\nvar objectProto = Object.prototype;\n/** Used to check objects for own properties. */\n\nvar hasOwnProperty = objectProto.hasOwnProperty;\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\n\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n\n  var index = objLength;\n\n  while (index--) {\n    var key = objProps[index];\n\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  } // Assume cyclic values are equal.\n\n\n  var stacked = stack.get(object);\n\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n  var skipCtor = isPartial;\n\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);\n    } // Recursively compare objects (susceptible to call stack limits).\n\n\n    if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {\n      result = false;\n      break;\n    }\n\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor; // Non `Object` object instances with different constructors are not equal.\n\n    if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\nmodule.exports = equalObjects;","var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Chart from 'chart.js';\nimport isEqual from 'lodash/isEqual';\nimport keyBy from 'lodash/keyBy';\nvar NODE_ENV = typeof process !== 'undefined' && process.env && process.env.NODE_ENV;\n\nvar ChartComponent = function (_React$Component) {\n  _inherits(ChartComponent, _React$Component);\n\n  function ChartComponent() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, ChartComponent);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleOnClick = function (event) {\n      var instance = _this.chartInstance;\n      var _this$props = _this.props,\n          getDatasetAtEvent = _this$props.getDatasetAtEvent,\n          getElementAtEvent = _this$props.getElementAtEvent,\n          getElementsAtEvent = _this$props.getElementsAtEvent,\n          onElementsClick = _this$props.onElementsClick;\n      getDatasetAtEvent && getDatasetAtEvent(instance.getDatasetAtEvent(event), event);\n      getElementAtEvent && getElementAtEvent(instance.getElementAtEvent(event), event);\n      getElementsAtEvent && getElementsAtEvent(instance.getElementsAtEvent(event), event);\n      onElementsClick && onElementsClick(instance.getElementsAtEvent(event), event); // Backward compatibility\n    }, _this.ref = function (element) {\n      _this.element = element;\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  ChartComponent.prototype.componentWillMount = function componentWillMount() {\n    this.chartInstance = undefined;\n  };\n\n  ChartComponent.prototype.componentDidMount = function componentDidMount() {\n    this.renderChart();\n  };\n\n  ChartComponent.prototype.componentDidUpdate = function componentDidUpdate() {\n    if (this.props.redraw) {\n      this.destroyChart();\n      this.renderChart();\n      return;\n    }\n\n    this.updateChart();\n  };\n\n  ChartComponent.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {\n    var _props = this.props,\n        redraw = _props.redraw,\n        type = _props.type,\n        options = _props.options,\n        plugins = _props.plugins,\n        legend = _props.legend,\n        height = _props.height,\n        width = _props.width;\n\n    if (nextProps.redraw === true) {\n      return true;\n    }\n\n    if (height !== nextProps.height || width !== nextProps.width) {\n      return true;\n    }\n\n    if (type !== nextProps.type) {\n      return true;\n    }\n\n    if (!isEqual(legend, nextProps.legend)) {\n      return true;\n    }\n\n    if (!isEqual(options, nextProps.options)) {\n      return true;\n    }\n\n    var nextData = this.transformDataProp(nextProps);\n\n    if (!isEqual(this.shadowDataProp, nextData)) {\n      return true;\n    }\n\n    return !isEqual(plugins, nextProps.plugins);\n  };\n\n  ChartComponent.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.destroyChart();\n  };\n\n  ChartComponent.prototype.transformDataProp = function transformDataProp(props) {\n    var data = props.data;\n\n    if (typeof data == 'function') {\n      var node = this.element;\n      return data(node);\n    } else {\n      return data;\n    }\n  }; // Chart.js directly mutates the data.dataset objects by adding _meta proprerty\n  // this makes impossible to compare the current and next data changes\n  // therefore we memoize the data prop while sending a fake to Chart.js for mutation.\n  // see https://github.com/chartjs/Chart.js/blob/master/src/core/core.controller.js#L615-L617\n\n\n  ChartComponent.prototype.memoizeDataProps = function memoizeDataProps() {\n    if (!this.props.data) {\n      return;\n    }\n\n    var data = this.transformDataProp(this.props);\n    this.shadowDataProp = _extends({}, data, {\n      datasets: data.datasets && data.datasets.map(function (set) {\n        return _extends({}, set);\n      })\n    });\n    this.saveCurrentDatasets(); // to remove the dataset metadata from this chart when the chart is destroyed\n\n    return data;\n  };\n\n  ChartComponent.prototype.checkDatasets = function checkDatasets(datasets) {\n    var isDev = NODE_ENV !== 'production' && NODE_ENV !== 'prod';\n    var usingCustomKeyProvider = this.props.datasetKeyProvider !== ChartComponent.getLabelAsKey;\n    var multipleDatasets = datasets.length > 1;\n\n    if (isDev && multipleDatasets && !usingCustomKeyProvider) {\n      var shouldWarn = false;\n      datasets.forEach(function (dataset) {\n        if (!dataset.label) {\n          shouldWarn = true;\n        }\n      });\n\n      if (shouldWarn) {\n        console.error('[react-chartjs-2] Warning: Each dataset needs a unique key. By default, the \"label\" property on each dataset is used. Alternatively, you may provide a \"datasetKeyProvider\" as a prop that returns a unique key.');\n      }\n    }\n  };\n\n  ChartComponent.prototype.getCurrentDatasets = function getCurrentDatasets() {\n    return this.chartInstance && this.chartInstance.config.data && this.chartInstance.config.data.datasets || [];\n  };\n\n  ChartComponent.prototype.saveCurrentDatasets = function saveCurrentDatasets() {\n    var _this2 = this;\n\n    this.datasets = this.datasets || {};\n    var currentDatasets = this.getCurrentDatasets();\n    currentDatasets.forEach(function (d) {\n      _this2.datasets[_this2.props.datasetKeyProvider(d)] = d;\n    });\n  };\n\n  ChartComponent.prototype.updateChart = function updateChart() {\n    var _this3 = this;\n\n    var options = this.props.options;\n    var data = this.memoizeDataProps(this.props);\n    if (!this.chartInstance) return;\n\n    if (options) {\n      this.chartInstance.options = Chart.helpers.configMerge(this.chartInstance.options, options);\n    } // Pipe datasets to chart instance datasets enabling\n    // seamless transitions\n\n\n    var currentDatasets = this.getCurrentDatasets();\n    var nextDatasets = data.datasets || [];\n    this.checkDatasets(currentDatasets);\n    var currentDatasetsIndexed = keyBy(currentDatasets, this.props.datasetKeyProvider); // We can safely replace the dataset array, as long as we retain the _meta property\n    // on each dataset.\n\n    this.chartInstance.config.data.datasets = nextDatasets.map(function (next) {\n      var current = currentDatasetsIndexed[_this3.props.datasetKeyProvider(next)];\n\n      if (current && current.type === next.type) {\n        // The data array must be edited in place. As chart.js adds listeners to it.\n        current.data.splice(next.data.length);\n        next.data.forEach(function (point, pid) {\n          current.data[pid] = next.data[pid];\n        });\n\n        var _data = next.data,\n            otherProps = _objectWithoutProperties(next, ['data']); // Merge properties. Notice a weakness here. If a property is removed\n        // from next, it will be retained by current and never disappears.\n        // Workaround is to set value to null or undefined in next.\n\n\n        return _extends({}, current, otherProps);\n      } else {\n        return next;\n      }\n    });\n\n    var datasets = data.datasets,\n        rest = _objectWithoutProperties(data, ['datasets']);\n\n    this.chartInstance.config.data = _extends({}, this.chartInstance.config.data, rest);\n    this.chartInstance.update();\n  };\n\n  ChartComponent.prototype.renderChart = function renderChart() {\n    var _props2 = this.props,\n        options = _props2.options,\n        legend = _props2.legend,\n        type = _props2.type,\n        plugins = _props2.plugins;\n    var node = this.element;\n    var data = this.memoizeDataProps();\n\n    if (typeof legend !== 'undefined' && !isEqual(ChartComponent.defaultProps.legend, legend)) {\n      options.legend = legend;\n    }\n\n    this.chartInstance = new Chart(node, {\n      type: type,\n      data: data,\n      options: options,\n      plugins: plugins\n    });\n  };\n\n  ChartComponent.prototype.destroyChart = function destroyChart() {\n    // Put all of the datasets that have existed in the chart back on the chart\n    // so that the metadata associated with this chart get destroyed.\n    // This allows the datasets to be used in another chart. This can happen,\n    // for example, in a tabbed UI where the chart gets created each time the\n    // tab gets switched to the chart and uses the same data).\n    this.saveCurrentDatasets();\n    var datasets = Object.values(this.datasets);\n    this.chartInstance.config.data.datasets = datasets;\n    this.chartInstance.destroy();\n  };\n\n  ChartComponent.prototype.render = function render() {\n    var _props3 = this.props,\n        height = _props3.height,\n        width = _props3.width,\n        id = _props3.id;\n    return React.createElement('canvas', {\n      ref: this.ref,\n      height: height,\n      width: width,\n      id: id,\n      onClick: this.handleOnClick\n    });\n  };\n\n  return ChartComponent;\n}(React.Component);\n\nChartComponent.getLabelAsKey = function (d) {\n  return d.label;\n};\n\nChartComponent.propTypes = {\n  data: PropTypes.oneOfType([PropTypes.object, PropTypes.func]).isRequired,\n  getDatasetAtEvent: PropTypes.func,\n  getElementAtEvent: PropTypes.func,\n  getElementsAtEvent: PropTypes.func,\n  height: PropTypes.number,\n  legend: PropTypes.object,\n  onElementsClick: PropTypes.func,\n  options: PropTypes.object,\n  plugins: PropTypes.arrayOf(PropTypes.object),\n  redraw: PropTypes.bool,\n  type: function type(props, propName, componentName) {\n    if (!Chart.controllers[props[propName]]) {\n      return new Error('Invalid chart type `' + props[propName] + '` supplied to' + ' `' + componentName + '`.');\n    }\n  },\n  width: PropTypes.number,\n  datasetKeyProvider: PropTypes.func\n};\nChartComponent.defaultProps = {\n  legend: {\n    display: true,\n    position: 'bottom'\n  },\n  type: 'doughnut',\n  height: 150,\n  width: 300,\n  redraw: false,\n  options: {},\n  datasetKeyProvider: ChartComponent.getLabelAsKey\n};\nexport default ChartComponent;\nexport var Doughnut = function (_React$Component2) {\n  _inherits(Doughnut, _React$Component2);\n\n  function Doughnut() {\n    _classCallCheck(this, Doughnut);\n\n    return _possibleConstructorReturn(this, _React$Component2.apply(this, arguments));\n  }\n\n  Doughnut.prototype.render = function render() {\n    var _this5 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref) {\n        return _this5.chartInstance = _ref && _ref.chartInstance;\n      },\n      type: 'doughnut'\n    }));\n  };\n\n  return Doughnut;\n}(React.Component);\nexport var Pie = function (_React$Component3) {\n  _inherits(Pie, _React$Component3);\n\n  function Pie() {\n    _classCallCheck(this, Pie);\n\n    return _possibleConstructorReturn(this, _React$Component3.apply(this, arguments));\n  }\n\n  Pie.prototype.render = function render() {\n    var _this7 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref2) {\n        return _this7.chartInstance = _ref2 && _ref2.chartInstance;\n      },\n      type: 'pie'\n    }));\n  };\n\n  return Pie;\n}(React.Component);\nexport var Line = function (_React$Component4) {\n  _inherits(Line, _React$Component4);\n\n  function Line() {\n    _classCallCheck(this, Line);\n\n    return _possibleConstructorReturn(this, _React$Component4.apply(this, arguments));\n  }\n\n  Line.prototype.render = function render() {\n    var _this9 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref3) {\n        return _this9.chartInstance = _ref3 && _ref3.chartInstance;\n      },\n      type: 'line'\n    }));\n  };\n\n  return Line;\n}(React.Component);\nexport var Bar = function (_React$Component5) {\n  _inherits(Bar, _React$Component5);\n\n  function Bar() {\n    _classCallCheck(this, Bar);\n\n    return _possibleConstructorReturn(this, _React$Component5.apply(this, arguments));\n  }\n\n  Bar.prototype.render = function render() {\n    var _this11 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref4) {\n        return _this11.chartInstance = _ref4 && _ref4.chartInstance;\n      },\n      type: 'bar'\n    }));\n  };\n\n  return Bar;\n}(React.Component);\nexport var HorizontalBar = function (_React$Component6) {\n  _inherits(HorizontalBar, _React$Component6);\n\n  function HorizontalBar() {\n    _classCallCheck(this, HorizontalBar);\n\n    return _possibleConstructorReturn(this, _React$Component6.apply(this, arguments));\n  }\n\n  HorizontalBar.prototype.render = function render() {\n    var _this13 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref5) {\n        return _this13.chartInstance = _ref5 && _ref5.chartInstance;\n      },\n      type: 'horizontalBar'\n    }));\n  };\n\n  return HorizontalBar;\n}(React.Component);\nexport var Radar = function (_React$Component7) {\n  _inherits(Radar, _React$Component7);\n\n  function Radar() {\n    _classCallCheck(this, Radar);\n\n    return _possibleConstructorReturn(this, _React$Component7.apply(this, arguments));\n  }\n\n  Radar.prototype.render = function render() {\n    var _this15 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref6) {\n        return _this15.chartInstance = _ref6 && _ref6.chartInstance;\n      },\n      type: 'radar'\n    }));\n  };\n\n  return Radar;\n}(React.Component);\nexport var Polar = function (_React$Component8) {\n  _inherits(Polar, _React$Component8);\n\n  function Polar() {\n    _classCallCheck(this, Polar);\n\n    return _possibleConstructorReturn(this, _React$Component8.apply(this, arguments));\n  }\n\n  Polar.prototype.render = function render() {\n    var _this17 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref7) {\n        return _this17.chartInstance = _ref7 && _ref7.chartInstance;\n      },\n      type: 'polarArea'\n    }));\n  };\n\n  return Polar;\n}(React.Component);\nexport var Bubble = function (_React$Component9) {\n  _inherits(Bubble, _React$Component9);\n\n  function Bubble() {\n    _classCallCheck(this, Bubble);\n\n    return _possibleConstructorReturn(this, _React$Component9.apply(this, arguments));\n  }\n\n  Bubble.prototype.render = function render() {\n    var _this19 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref8) {\n        return _this19.chartInstance = _ref8 && _ref8.chartInstance;\n      },\n      type: 'bubble'\n    }));\n  };\n\n  return Bubble;\n}(React.Component);\nexport var Scatter = function (_React$Component10) {\n  _inherits(Scatter, _React$Component10);\n\n  function Scatter() {\n    _classCallCheck(this, Scatter);\n\n    return _possibleConstructorReturn(this, _React$Component10.apply(this, arguments));\n  }\n\n  Scatter.prototype.render = function render() {\n    var _this21 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref9) {\n        return _this21.chartInstance = _ref9 && _ref9.chartInstance;\n      },\n      type: 'scatter'\n    }));\n  };\n\n  return Scatter;\n}(React.Component);\nexport var defaults = Chart.defaults;\nexport { Chart };","var baseHasIn = require('./_baseHasIn'),\n    hasPath = require('./_hasPath');\n/**\n * Checks if `path` is a direct or inherited property of `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.hasIn(object, 'a');\n * // => true\n *\n * _.hasIn(object, 'a.b');\n * // => true\n *\n * _.hasIn(object, ['a', 'b']);\n * // => true\n *\n * _.hasIn(object, 'b');\n * // => false\n */\n\n\nfunction hasIn(object, path) {\n  return object != null && hasPath(object, path, baseHasIn);\n}\n\nmodule.exports = hasIn;","var baseIsMatch = require('./_baseIsMatch'),\n    getMatchData = require('./_getMatchData'),\n    matchesStrictComparable = require('./_matchesStrictComparable');\n/**\n * The base implementation of `_.matches` which doesn't clone `source`.\n *\n * @private\n * @param {Object} source The object of property values to match.\n * @returns {Function} Returns the new spec function.\n */\n\n\nfunction baseMatches(source) {\n  var matchData = getMatchData(source);\n\n  if (matchData.length == 1 && matchData[0][2]) {\n    return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n  }\n\n  return function (object) {\n    return object === source || baseIsMatch(object, source, matchData);\n  };\n}\n\nmodule.exports = baseMatches;","var Stack = require('./_Stack'),\n    baseIsEqual = require('./_baseIsEqual');\n/** Used to compose bitmasks for value comparisons. */\n\n\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n/**\n * The base implementation of `_.isMatch` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Array} matchData The property names, values, and compare flags to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n */\n\nfunction baseIsMatch(object, source, matchData, customizer) {\n  var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer;\n\n  if (object == null) {\n    return !length;\n  }\n\n  object = Object(object);\n\n  while (index--) {\n    var data = matchData[index];\n\n    if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {\n      return false;\n    }\n  }\n\n  while (++index < length) {\n    data = matchData[index];\n    var key = data[0],\n        objValue = object[key],\n        srcValue = data[1];\n\n    if (noCustomizer && data[2]) {\n      if (objValue === undefined && !(key in object)) {\n        return false;\n      }\n    } else {\n      var stack = new Stack();\n\n      if (customizer) {\n        var result = customizer(objValue, srcValue, key, object, source, stack);\n      }\n\n      if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nmodule.exports = baseIsMatch;","var isStrictComparable = require('./_isStrictComparable'),\n    keys = require('./keys');\n/**\n * Gets the property names, values, and compare flags of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the match data of `object`.\n */\n\n\nfunction getMatchData(object) {\n  var result = keys(object),\n      length = result.length;\n\n  while (length--) {\n    var key = result[length],\n        value = object[key];\n    result[length] = [key, value, isStrictComparable(value)];\n  }\n\n  return result;\n}\n\nmodule.exports = getMatchData;","var baseIsEqual = require('./_baseIsEqual'),\n    get = require('./get'),\n    hasIn = require('./hasIn'),\n    isKey = require('./_isKey'),\n    isStrictComparable = require('./_isStrictComparable'),\n    matchesStrictComparable = require('./_matchesStrictComparable'),\n    toKey = require('./_toKey');\n/** Used to compose bitmasks for value comparisons. */\n\n\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\n\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n\n  return function (object) {\n    var objValue = get(object, path);\n    return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n  };\n}\n\nmodule.exports = baseMatchesProperty;","/**\n * The base implementation of `_.hasIn` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHasIn(object, key) {\n  return object != null && key in Object(object);\n}\n\nmodule.exports = baseHasIn;","var baseProperty = require('./_baseProperty'),\n    basePropertyDeep = require('./_basePropertyDeep'),\n    isKey = require('./_isKey'),\n    toKey = require('./_toKey');\n/**\n * Creates a function that returns the value at `path` of a given object.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n * @example\n *\n * var objects = [\n *   { 'a': { 'b': 2 } },\n *   { 'a': { 'b': 1 } }\n * ];\n *\n * _.map(objects, _.property('a.b'));\n * // => [2, 1]\n *\n * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n * // => [1, 2]\n */\n\n\nfunction property(path) {\n  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n}\n\nmodule.exports = property;","/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function (object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\nmodule.exports = baseProperty;","var baseGet = require('./_baseGet');\n/**\n * A specialized version of `baseProperty` which supports deep paths.\n *\n * @private\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\n\n\nfunction basePropertyDeep(path) {\n  return function (object) {\n    return baseGet(object, path);\n  };\n}\n\nmodule.exports = basePropertyDeep;","var isArrayLike = require('./isArrayLike');\n/**\n * Creates a `baseEach` or `baseEachRight` function.\n *\n * @private\n * @param {Function} eachFunc The function to iterate over a collection.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\n\n\nfunction createBaseEach(eachFunc, fromRight) {\n  return function (collection, iteratee) {\n    if (collection == null) {\n      return collection;\n    }\n\n    if (!isArrayLike(collection)) {\n      return eachFunc(collection, iteratee);\n    }\n\n    var length = collection.length,\n        index = fromRight ? length : -1,\n        iterable = Object(collection);\n\n    while (fromRight ? index-- : ++index < length) {\n      if (iteratee(iterable[index], index, iterable) === false) {\n        break;\n      }\n    }\n\n    return collection;\n  };\n}\n\nmodule.exports = createBaseEach;","/*!\n * Chart.js v2.8.0\n * https://www.chartjs.org\n * (c) 2019 Chart.js Contributors\n * Released under the MIT License\n */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(function () {\n    try {\n      return require('moment');\n    } catch (e) {}\n  }()) : typeof define === 'function' && define.amd ? define(['require'], function (require) {\n    return factory(function () {\n      try {\n        return require('moment');\n      } catch (e) {}\n    }());\n  }) : global.Chart = factory(global.moment);\n})(this, function (moment) {\n  'use strict';\n\n  moment = moment && moment.hasOwnProperty('default') ? moment['default'] : moment;\n  /* MIT license */\n\n  var conversions = {\n    rgb2hsl: rgb2hsl,\n    rgb2hsv: rgb2hsv,\n    rgb2hwb: rgb2hwb,\n    rgb2cmyk: rgb2cmyk,\n    rgb2keyword: rgb2keyword,\n    rgb2xyz: rgb2xyz,\n    rgb2lab: rgb2lab,\n    rgb2lch: rgb2lch,\n    hsl2rgb: hsl2rgb,\n    hsl2hsv: hsl2hsv,\n    hsl2hwb: hsl2hwb,\n    hsl2cmyk: hsl2cmyk,\n    hsl2keyword: hsl2keyword,\n    hsv2rgb: hsv2rgb,\n    hsv2hsl: hsv2hsl,\n    hsv2hwb: hsv2hwb,\n    hsv2cmyk: hsv2cmyk,\n    hsv2keyword: hsv2keyword,\n    hwb2rgb: hwb2rgb,\n    hwb2hsl: hwb2hsl,\n    hwb2hsv: hwb2hsv,\n    hwb2cmyk: hwb2cmyk,\n    hwb2keyword: hwb2keyword,\n    cmyk2rgb: cmyk2rgb,\n    cmyk2hsl: cmyk2hsl,\n    cmyk2hsv: cmyk2hsv,\n    cmyk2hwb: cmyk2hwb,\n    cmyk2keyword: cmyk2keyword,\n    keyword2rgb: keyword2rgb,\n    keyword2hsl: keyword2hsl,\n    keyword2hsv: keyword2hsv,\n    keyword2hwb: keyword2hwb,\n    keyword2cmyk: keyword2cmyk,\n    keyword2lab: keyword2lab,\n    keyword2xyz: keyword2xyz,\n    xyz2rgb: xyz2rgb,\n    xyz2lab: xyz2lab,\n    xyz2lch: xyz2lch,\n    lab2xyz: lab2xyz,\n    lab2rgb: lab2rgb,\n    lab2lch: lab2lch,\n    lch2lab: lch2lab,\n    lch2xyz: lch2xyz,\n    lch2rgb: lch2rgb\n  };\n\n  function rgb2hsl(rgb) {\n    var r = rgb[0] / 255,\n        g = rgb[1] / 255,\n        b = rgb[2] / 255,\n        min = Math.min(r, g, b),\n        max = Math.max(r, g, b),\n        delta = max - min,\n        h,\n        s,\n        l;\n    if (max == min) h = 0;else if (r == max) h = (g - b) / delta;else if (g == max) h = 2 + (b - r) / delta;else if (b == max) h = 4 + (r - g) / delta;\n    h = Math.min(h * 60, 360);\n    if (h < 0) h += 360;\n    l = (min + max) / 2;\n    if (max == min) s = 0;else if (l <= 0.5) s = delta / (max + min);else s = delta / (2 - max - min);\n    return [h, s * 100, l * 100];\n  }\n\n  function rgb2hsv(rgb) {\n    var r = rgb[0],\n        g = rgb[1],\n        b = rgb[2],\n        min = Math.min(r, g, b),\n        max = Math.max(r, g, b),\n        delta = max - min,\n        h,\n        s,\n        v;\n    if (max == 0) s = 0;else s = delta / max * 1000 / 10;\n    if (max == min) h = 0;else if (r == max) h = (g - b) / delta;else if (g == max) h = 2 + (b - r) / delta;else if (b == max) h = 4 + (r - g) / delta;\n    h = Math.min(h * 60, 360);\n    if (h < 0) h += 360;\n    v = max / 255 * 1000 / 10;\n    return [h, s, v];\n  }\n\n  function rgb2hwb(rgb) {\n    var r = rgb[0],\n        g = rgb[1],\n        b = rgb[2],\n        h = rgb2hsl(rgb)[0],\n        w = 1 / 255 * Math.min(r, Math.min(g, b)),\n        b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\n    return [h, w * 100, b * 100];\n  }\n\n  function rgb2cmyk(rgb) {\n    var r = rgb[0] / 255,\n        g = rgb[1] / 255,\n        b = rgb[2] / 255,\n        c,\n        m,\n        y,\n        k;\n    k = Math.min(1 - r, 1 - g, 1 - b);\n    c = (1 - r - k) / (1 - k) || 0;\n    m = (1 - g - k) / (1 - k) || 0;\n    y = (1 - b - k) / (1 - k) || 0;\n    return [c * 100, m * 100, y * 100, k * 100];\n  }\n\n  function rgb2keyword(rgb) {\n    return reverseKeywords[JSON.stringify(rgb)];\n  }\n\n  function rgb2xyz(rgb) {\n    var r = rgb[0] / 255,\n        g = rgb[1] / 255,\n        b = rgb[2] / 255; // assume sRGB\n\n    r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;\n    g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;\n    b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;\n    var x = r * 0.4124 + g * 0.3576 + b * 0.1805;\n    var y = r * 0.2126 + g * 0.7152 + b * 0.0722;\n    var z = r * 0.0193 + g * 0.1192 + b * 0.9505;\n    return [x * 100, y * 100, z * 100];\n  }\n\n  function rgb2lab(rgb) {\n    var xyz = rgb2xyz(rgb),\n        x = xyz[0],\n        y = xyz[1],\n        z = xyz[2],\n        l,\n        a,\n        b;\n    x /= 95.047;\n    y /= 100;\n    z /= 108.883;\n    x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;\n    y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;\n    z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;\n    l = 116 * y - 16;\n    a = 500 * (x - y);\n    b = 200 * (y - z);\n    return [l, a, b];\n  }\n\n  function rgb2lch(args) {\n    return lab2lch(rgb2lab(args));\n  }\n\n  function hsl2rgb(hsl) {\n    var h = hsl[0] / 360,\n        s = hsl[1] / 100,\n        l = hsl[2] / 100,\n        t1,\n        t2,\n        t3,\n        rgb,\n        val;\n\n    if (s == 0) {\n      val = l * 255;\n      return [val, val, val];\n    }\n\n    if (l < 0.5) t2 = l * (1 + s);else t2 = l + s - l * s;\n    t1 = 2 * l - t2;\n    rgb = [0, 0, 0];\n\n    for (var i = 0; i < 3; i++) {\n      t3 = h + 1 / 3 * -(i - 1);\n      t3 < 0 && t3++;\n      t3 > 1 && t3--;\n      if (6 * t3 < 1) val = t1 + (t2 - t1) * 6 * t3;else if (2 * t3 < 1) val = t2;else if (3 * t3 < 2) val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;else val = t1;\n      rgb[i] = val * 255;\n    }\n\n    return rgb;\n  }\n\n  function hsl2hsv(hsl) {\n    var h = hsl[0],\n        s = hsl[1] / 100,\n        l = hsl[2] / 100,\n        sv,\n        v;\n\n    if (l === 0) {\n      // no need to do calc on black\n      // also avoids divide by 0 error\n      return [0, 0, 0];\n    }\n\n    l *= 2;\n    s *= l <= 1 ? l : 2 - l;\n    v = (l + s) / 2;\n    sv = 2 * s / (l + s);\n    return [h, sv * 100, v * 100];\n  }\n\n  function hsl2hwb(args) {\n    return rgb2hwb(hsl2rgb(args));\n  }\n\n  function hsl2cmyk(args) {\n    return rgb2cmyk(hsl2rgb(args));\n  }\n\n  function hsl2keyword(args) {\n    return rgb2keyword(hsl2rgb(args));\n  }\n\n  function hsv2rgb(hsv) {\n    var h = hsv[0] / 60,\n        s = hsv[1] / 100,\n        v = hsv[2] / 100,\n        hi = Math.floor(h) % 6;\n    var f = h - Math.floor(h),\n        p = 255 * v * (1 - s),\n        q = 255 * v * (1 - s * f),\n        t = 255 * v * (1 - s * (1 - f)),\n        v = 255 * v;\n\n    switch (hi) {\n      case 0:\n        return [v, t, p];\n\n      case 1:\n        return [q, v, p];\n\n      case 2:\n        return [p, v, t];\n\n      case 3:\n        return [p, q, v];\n\n      case 4:\n        return [t, p, v];\n\n      case 5:\n        return [v, p, q];\n    }\n  }\n\n  function hsv2hsl(hsv) {\n    var h = hsv[0],\n        s = hsv[1] / 100,\n        v = hsv[2] / 100,\n        sl,\n        l;\n    l = (2 - s) * v;\n    sl = s * v;\n    sl /= l <= 1 ? l : 2 - l;\n    sl = sl || 0;\n    l /= 2;\n    return [h, sl * 100, l * 100];\n  }\n\n  function hsv2hwb(args) {\n    return rgb2hwb(hsv2rgb(args));\n  }\n\n  function hsv2cmyk(args) {\n    return rgb2cmyk(hsv2rgb(args));\n  }\n\n  function hsv2keyword(args) {\n    return rgb2keyword(hsv2rgb(args));\n  } // http://dev.w3.org/csswg/css-color/#hwb-to-rgb\n\n\n  function hwb2rgb(hwb) {\n    var h = hwb[0] / 360,\n        wh = hwb[1] / 100,\n        bl = hwb[2] / 100,\n        ratio = wh + bl,\n        i,\n        v,\n        f,\n        n; // wh + bl cant be > 1\n\n    if (ratio > 1) {\n      wh /= ratio;\n      bl /= ratio;\n    }\n\n    i = Math.floor(6 * h);\n    v = 1 - bl;\n    f = 6 * h - i;\n\n    if ((i & 0x01) != 0) {\n      f = 1 - f;\n    }\n\n    n = wh + f * (v - wh); // linear interpolation\n\n    switch (i) {\n      default:\n      case 6:\n      case 0:\n        r = v;\n        g = n;\n        b = wh;\n        break;\n\n      case 1:\n        r = n;\n        g = v;\n        b = wh;\n        break;\n\n      case 2:\n        r = wh;\n        g = v;\n        b = n;\n        break;\n\n      case 3:\n        r = wh;\n        g = n;\n        b = v;\n        break;\n\n      case 4:\n        r = n;\n        g = wh;\n        b = v;\n        break;\n\n      case 5:\n        r = v;\n        g = wh;\n        b = n;\n        break;\n    }\n\n    return [r * 255, g * 255, b * 255];\n  }\n\n  function hwb2hsl(args) {\n    return rgb2hsl(hwb2rgb(args));\n  }\n\n  function hwb2hsv(args) {\n    return rgb2hsv(hwb2rgb(args));\n  }\n\n  function hwb2cmyk(args) {\n    return rgb2cmyk(hwb2rgb(args));\n  }\n\n  function hwb2keyword(args) {\n    return rgb2keyword(hwb2rgb(args));\n  }\n\n  function cmyk2rgb(cmyk) {\n    var c = cmyk[0] / 100,\n        m = cmyk[1] / 100,\n        y = cmyk[2] / 100,\n        k = cmyk[3] / 100,\n        r,\n        g,\n        b;\n    r = 1 - Math.min(1, c * (1 - k) + k);\n    g = 1 - Math.min(1, m * (1 - k) + k);\n    b = 1 - Math.min(1, y * (1 - k) + k);\n    return [r * 255, g * 255, b * 255];\n  }\n\n  function cmyk2hsl(args) {\n    return rgb2hsl(cmyk2rgb(args));\n  }\n\n  function cmyk2hsv(args) {\n    return rgb2hsv(cmyk2rgb(args));\n  }\n\n  function cmyk2hwb(args) {\n    return rgb2hwb(cmyk2rgb(args));\n  }\n\n  function cmyk2keyword(args) {\n    return rgb2keyword(cmyk2rgb(args));\n  }\n\n  function xyz2rgb(xyz) {\n    var x = xyz[0] / 100,\n        y = xyz[1] / 100,\n        z = xyz[2] / 100,\n        r,\n        g,\n        b;\n    r = x * 3.2406 + y * -1.5372 + z * -0.4986;\n    g = x * -0.9689 + y * 1.8758 + z * 0.0415;\n    b = x * 0.0557 + y * -0.2040 + z * 1.0570; // assume sRGB\n\n    r = r > 0.0031308 ? 1.055 * Math.pow(r, 1.0 / 2.4) - 0.055 : r = r * 12.92;\n    g = g > 0.0031308 ? 1.055 * Math.pow(g, 1.0 / 2.4) - 0.055 : g = g * 12.92;\n    b = b > 0.0031308 ? 1.055 * Math.pow(b, 1.0 / 2.4) - 0.055 : b = b * 12.92;\n    r = Math.min(Math.max(0, r), 1);\n    g = Math.min(Math.max(0, g), 1);\n    b = Math.min(Math.max(0, b), 1);\n    return [r * 255, g * 255, b * 255];\n  }\n\n  function xyz2lab(xyz) {\n    var x = xyz[0],\n        y = xyz[1],\n        z = xyz[2],\n        l,\n        a,\n        b;\n    x /= 95.047;\n    y /= 100;\n    z /= 108.883;\n    x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;\n    y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;\n    z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;\n    l = 116 * y - 16;\n    a = 500 * (x - y);\n    b = 200 * (y - z);\n    return [l, a, b];\n  }\n\n  function xyz2lch(args) {\n    return lab2lch(xyz2lab(args));\n  }\n\n  function lab2xyz(lab) {\n    var l = lab[0],\n        a = lab[1],\n        b = lab[2],\n        x,\n        y,\n        z,\n        y2;\n\n    if (l <= 8) {\n      y = l * 100 / 903.3;\n      y2 = 7.787 * (y / 100) + 16 / 116;\n    } else {\n      y = 100 * Math.pow((l + 16) / 116, 3);\n      y2 = Math.pow(y / 100, 1 / 3);\n    }\n\n    x = x / 95.047 <= 0.008856 ? x = 95.047 * (a / 500 + y2 - 16 / 116) / 7.787 : 95.047 * Math.pow(a / 500 + y2, 3);\n    z = z / 108.883 <= 0.008859 ? z = 108.883 * (y2 - b / 200 - 16 / 116) / 7.787 : 108.883 * Math.pow(y2 - b / 200, 3);\n    return [x, y, z];\n  }\n\n  function lab2lch(lab) {\n    var l = lab[0],\n        a = lab[1],\n        b = lab[2],\n        hr,\n        h,\n        c;\n    hr = Math.atan2(b, a);\n    h = hr * 360 / 2 / Math.PI;\n\n    if (h < 0) {\n      h += 360;\n    }\n\n    c = Math.sqrt(a * a + b * b);\n    return [l, c, h];\n  }\n\n  function lab2rgb(args) {\n    return xyz2rgb(lab2xyz(args));\n  }\n\n  function lch2lab(lch) {\n    var l = lch[0],\n        c = lch[1],\n        h = lch[2],\n        a,\n        b,\n        hr;\n    hr = h / 360 * 2 * Math.PI;\n    a = c * Math.cos(hr);\n    b = c * Math.sin(hr);\n    return [l, a, b];\n  }\n\n  function lch2xyz(args) {\n    return lab2xyz(lch2lab(args));\n  }\n\n  function lch2rgb(args) {\n    return lab2rgb(lch2lab(args));\n  }\n\n  function keyword2rgb(keyword) {\n    return cssKeywords[keyword];\n  }\n\n  function keyword2hsl(args) {\n    return rgb2hsl(keyword2rgb(args));\n  }\n\n  function keyword2hsv(args) {\n    return rgb2hsv(keyword2rgb(args));\n  }\n\n  function keyword2hwb(args) {\n    return rgb2hwb(keyword2rgb(args));\n  }\n\n  function keyword2cmyk(args) {\n    return rgb2cmyk(keyword2rgb(args));\n  }\n\n  function keyword2lab(args) {\n    return rgb2lab(keyword2rgb(args));\n  }\n\n  function keyword2xyz(args) {\n    return rgb2xyz(keyword2rgb(args));\n  }\n\n  var cssKeywords = {\n    aliceblue: [240, 248, 255],\n    antiquewhite: [250, 235, 215],\n    aqua: [0, 255, 255],\n    aquamarine: [127, 255, 212],\n    azure: [240, 255, 255],\n    beige: [245, 245, 220],\n    bisque: [255, 228, 196],\n    black: [0, 0, 0],\n    blanchedalmond: [255, 235, 205],\n    blue: [0, 0, 255],\n    blueviolet: [138, 43, 226],\n    brown: [165, 42, 42],\n    burlywood: [222, 184, 135],\n    cadetblue: [95, 158, 160],\n    chartreuse: [127, 255, 0],\n    chocolate: [210, 105, 30],\n    coral: [255, 127, 80],\n    cornflowerblue: [100, 149, 237],\n    cornsilk: [255, 248, 220],\n    crimson: [220, 20, 60],\n    cyan: [0, 255, 255],\n    darkblue: [0, 0, 139],\n    darkcyan: [0, 139, 139],\n    darkgoldenrod: [184, 134, 11],\n    darkgray: [169, 169, 169],\n    darkgreen: [0, 100, 0],\n    darkgrey: [169, 169, 169],\n    darkkhaki: [189, 183, 107],\n    darkmagenta: [139, 0, 139],\n    darkolivegreen: [85, 107, 47],\n    darkorange: [255, 140, 0],\n    darkorchid: [153, 50, 204],\n    darkred: [139, 0, 0],\n    darksalmon: [233, 150, 122],\n    darkseagreen: [143, 188, 143],\n    darkslateblue: [72, 61, 139],\n    darkslategray: [47, 79, 79],\n    darkslategrey: [47, 79, 79],\n    darkturquoise: [0, 206, 209],\n    darkviolet: [148, 0, 211],\n    deeppink: [255, 20, 147],\n    deepskyblue: [0, 191, 255],\n    dimgray: [105, 105, 105],\n    dimgrey: [105, 105, 105],\n    dodgerblue: [30, 144, 255],\n    firebrick: [178, 34, 34],\n    floralwhite: [255, 250, 240],\n    forestgreen: [34, 139, 34],\n    fuchsia: [255, 0, 255],\n    gainsboro: [220, 220, 220],\n    ghostwhite: [248, 248, 255],\n    gold: [255, 215, 0],\n    goldenrod: [218, 165, 32],\n    gray: [128, 128, 128],\n    green: [0, 128, 0],\n    greenyellow: [173, 255, 47],\n    grey: [128, 128, 128],\n    honeydew: [240, 255, 240],\n    hotpink: [255, 105, 180],\n    indianred: [205, 92, 92],\n    indigo: [75, 0, 130],\n    ivory: [255, 255, 240],\n    khaki: [240, 230, 140],\n    lavender: [230, 230, 250],\n    lavenderblush: [255, 240, 245],\n    lawngreen: [124, 252, 0],\n    lemonchiffon: [255, 250, 205],\n    lightblue: [173, 216, 230],\n    lightcoral: [240, 128, 128],\n    lightcyan: [224, 255, 255],\n    lightgoldenrodyellow: [250, 250, 210],\n    lightgray: [211, 211, 211],\n    lightgreen: [144, 238, 144],\n    lightgrey: [211, 211, 211],\n    lightpink: [255, 182, 193],\n    lightsalmon: [255, 160, 122],\n    lightseagreen: [32, 178, 170],\n    lightskyblue: [135, 206, 250],\n    lightslategray: [119, 136, 153],\n    lightslategrey: [119, 136, 153],\n    lightsteelblue: [176, 196, 222],\n    lightyellow: [255, 255, 224],\n    lime: [0, 255, 0],\n    limegreen: [50, 205, 50],\n    linen: [250, 240, 230],\n    magenta: [255, 0, 255],\n    maroon: [128, 0, 0],\n    mediumaquamarine: [102, 205, 170],\n    mediumblue: [0, 0, 205],\n    mediumorchid: [186, 85, 211],\n    mediumpurple: [147, 112, 219],\n    mediumseagreen: [60, 179, 113],\n    mediumslateblue: [123, 104, 238],\n    mediumspringgreen: [0, 250, 154],\n    mediumturquoise: [72, 209, 204],\n    mediumvioletred: [199, 21, 133],\n    midnightblue: [25, 25, 112],\n    mintcream: [245, 255, 250],\n    mistyrose: [255, 228, 225],\n    moccasin: [255, 228, 181],\n    navajowhite: [255, 222, 173],\n    navy: [0, 0, 128],\n    oldlace: [253, 245, 230],\n    olive: [128, 128, 0],\n    olivedrab: [107, 142, 35],\n    orange: [255, 165, 0],\n    orangered: [255, 69, 0],\n    orchid: [218, 112, 214],\n    palegoldenrod: [238, 232, 170],\n    palegreen: [152, 251, 152],\n    paleturquoise: [175, 238, 238],\n    palevioletred: [219, 112, 147],\n    papayawhip: [255, 239, 213],\n    peachpuff: [255, 218, 185],\n    peru: [205, 133, 63],\n    pink: [255, 192, 203],\n    plum: [221, 160, 221],\n    powderblue: [176, 224, 230],\n    purple: [128, 0, 128],\n    rebeccapurple: [102, 51, 153],\n    red: [255, 0, 0],\n    rosybrown: [188, 143, 143],\n    royalblue: [65, 105, 225],\n    saddlebrown: [139, 69, 19],\n    salmon: [250, 128, 114],\n    sandybrown: [244, 164, 96],\n    seagreen: [46, 139, 87],\n    seashell: [255, 245, 238],\n    sienna: [160, 82, 45],\n    silver: [192, 192, 192],\n    skyblue: [135, 206, 235],\n    slateblue: [106, 90, 205],\n    slategray: [112, 128, 144],\n    slategrey: [112, 128, 144],\n    snow: [255, 250, 250],\n    springgreen: [0, 255, 127],\n    steelblue: [70, 130, 180],\n    tan: [210, 180, 140],\n    teal: [0, 128, 128],\n    thistle: [216, 191, 216],\n    tomato: [255, 99, 71],\n    turquoise: [64, 224, 208],\n    violet: [238, 130, 238],\n    wheat: [245, 222, 179],\n    white: [255, 255, 255],\n    whitesmoke: [245, 245, 245],\n    yellow: [255, 255, 0],\n    yellowgreen: [154, 205, 50]\n  };\n  var reverseKeywords = {};\n\n  for (var key in cssKeywords) {\n    reverseKeywords[JSON.stringify(cssKeywords[key])] = key;\n  }\n\n  var convert = function convert() {\n    return new Converter();\n  };\n\n  for (var func in conversions) {\n    // export Raw versions\n    convert[func + \"Raw\"] = function (func) {\n      // accept array or plain args\n      return function (arg) {\n        if (typeof arg == \"number\") arg = Array.prototype.slice.call(arguments);\n        return conversions[func](arg);\n      };\n    }(func);\n\n    var pair = /(\\w+)2(\\w+)/.exec(func),\n        from = pair[1],\n        to = pair[2]; // export rgb2hsl and [\"rgb\"][\"hsl\"]\n\n    convert[from] = convert[from] || {};\n\n    convert[from][to] = convert[func] = function (func) {\n      return function (arg) {\n        if (typeof arg == \"number\") arg = Array.prototype.slice.call(arguments);\n        var val = conversions[func](arg);\n        if (typeof val == \"string\" || val === undefined) return val; // keyword\n\n        for (var i = 0; i < val.length; i++) {\n          val[i] = Math.round(val[i]);\n        }\n\n        return val;\n      };\n    }(func);\n  }\n  /* Converter does lazy conversion and caching */\n\n\n  var Converter = function Converter() {\n    this.convs = {};\n  };\n  /* Either get the values for a space or\n    set the values for a space, depending on args */\n\n\n  Converter.prototype.routeSpace = function (space, args) {\n    var values = args[0];\n\n    if (values === undefined) {\n      // color.rgb()\n      return this.getValues(space);\n    } // color.rgb(10, 10, 10)\n\n\n    if (typeof values == \"number\") {\n      values = Array.prototype.slice.call(args);\n    }\n\n    return this.setValues(space, values);\n  };\n  /* Set the values for a space, invalidating cache */\n\n\n  Converter.prototype.setValues = function (space, values) {\n    this.space = space;\n    this.convs = {};\n    this.convs[space] = values;\n    return this;\n  };\n  /* Get the values for a space. If there's already\n    a conversion for the space, fetch it, otherwise\n    compute it */\n\n\n  Converter.prototype.getValues = function (space) {\n    var vals = this.convs[space];\n\n    if (!vals) {\n      var fspace = this.space,\n          from = this.convs[fspace];\n      vals = convert[fspace][space](from);\n      this.convs[space] = vals;\n    }\n\n    return vals;\n  };\n\n  [\"rgb\", \"hsl\", \"hsv\", \"cmyk\", \"keyword\"].forEach(function (space) {\n    Converter.prototype[space] = function (vals) {\n      return this.routeSpace(space, arguments);\n    };\n  });\n  var colorConvert = convert;\n  var colorName = {\n    \"aliceblue\": [240, 248, 255],\n    \"antiquewhite\": [250, 235, 215],\n    \"aqua\": [0, 255, 255],\n    \"aquamarine\": [127, 255, 212],\n    \"azure\": [240, 255, 255],\n    \"beige\": [245, 245, 220],\n    \"bisque\": [255, 228, 196],\n    \"black\": [0, 0, 0],\n    \"blanchedalmond\": [255, 235, 205],\n    \"blue\": [0, 0, 255],\n    \"blueviolet\": [138, 43, 226],\n    \"brown\": [165, 42, 42],\n    \"burlywood\": [222, 184, 135],\n    \"cadetblue\": [95, 158, 160],\n    \"chartreuse\": [127, 255, 0],\n    \"chocolate\": [210, 105, 30],\n    \"coral\": [255, 127, 80],\n    \"cornflowerblue\": [100, 149, 237],\n    \"cornsilk\": [255, 248, 220],\n    \"crimson\": [220, 20, 60],\n    \"cyan\": [0, 255, 255],\n    \"darkblue\": [0, 0, 139],\n    \"darkcyan\": [0, 139, 139],\n    \"darkgoldenrod\": [184, 134, 11],\n    \"darkgray\": [169, 169, 169],\n    \"darkgreen\": [0, 100, 0],\n    \"darkgrey\": [169, 169, 169],\n    \"darkkhaki\": [189, 183, 107],\n    \"darkmagenta\": [139, 0, 139],\n    \"darkolivegreen\": [85, 107, 47],\n    \"darkorange\": [255, 140, 0],\n    \"darkorchid\": [153, 50, 204],\n    \"darkred\": [139, 0, 0],\n    \"darksalmon\": [233, 150, 122],\n    \"darkseagreen\": [143, 188, 143],\n    \"darkslateblue\": [72, 61, 139],\n    \"darkslategray\": [47, 79, 79],\n    \"darkslategrey\": [47, 79, 79],\n    \"darkturquoise\": [0, 206, 209],\n    \"darkviolet\": [148, 0, 211],\n    \"deeppink\": [255, 20, 147],\n    \"deepskyblue\": [0, 191, 255],\n    \"dimgray\": [105, 105, 105],\n    \"dimgrey\": [105, 105, 105],\n    \"dodgerblue\": [30, 144, 255],\n    \"firebrick\": [178, 34, 34],\n    \"floralwhite\": [255, 250, 240],\n    \"forestgreen\": [34, 139, 34],\n    \"fuchsia\": [255, 0, 255],\n    \"gainsboro\": [220, 220, 220],\n    \"ghostwhite\": [248, 248, 255],\n    \"gold\": [255, 215, 0],\n    \"goldenrod\": [218, 165, 32],\n    \"gray\": [128, 128, 128],\n    \"green\": [0, 128, 0],\n    \"greenyellow\": [173, 255, 47],\n    \"grey\": [128, 128, 128],\n    \"honeydew\": [240, 255, 240],\n    \"hotpink\": [255, 105, 180],\n    \"indianred\": [205, 92, 92],\n    \"indigo\": [75, 0, 130],\n    \"ivory\": [255, 255, 240],\n    \"khaki\": [240, 230, 140],\n    \"lavender\": [230, 230, 250],\n    \"lavenderblush\": [255, 240, 245],\n    \"lawngreen\": [124, 252, 0],\n    \"lemonchiffon\": [255, 250, 205],\n    \"lightblue\": [173, 216, 230],\n    \"lightcoral\": [240, 128, 128],\n    \"lightcyan\": [224, 255, 255],\n    \"lightgoldenrodyellow\": [250, 250, 210],\n    \"lightgray\": [211, 211, 211],\n    \"lightgreen\": [144, 238, 144],\n    \"lightgrey\": [211, 211, 211],\n    \"lightpink\": [255, 182, 193],\n    \"lightsalmon\": [255, 160, 122],\n    \"lightseagreen\": [32, 178, 170],\n    \"lightskyblue\": [135, 206, 250],\n    \"lightslategray\": [119, 136, 153],\n    \"lightslategrey\": [119, 136, 153],\n    \"lightsteelblue\": [176, 196, 222],\n    \"lightyellow\": [255, 255, 224],\n    \"lime\": [0, 255, 0],\n    \"limegreen\": [50, 205, 50],\n    \"linen\": [250, 240, 230],\n    \"magenta\": [255, 0, 255],\n    \"maroon\": [128, 0, 0],\n    \"mediumaquamarine\": [102, 205, 170],\n    \"mediumblue\": [0, 0, 205],\n    \"mediumorchid\": [186, 85, 211],\n    \"mediumpurple\": [147, 112, 219],\n    \"mediumseagreen\": [60, 179, 113],\n    \"mediumslateblue\": [123, 104, 238],\n    \"mediumspringgreen\": [0, 250, 154],\n    \"mediumturquoise\": [72, 209, 204],\n    \"mediumvioletred\": [199, 21, 133],\n    \"midnightblue\": [25, 25, 112],\n    \"mintcream\": [245, 255, 250],\n    \"mistyrose\": [255, 228, 225],\n    \"moccasin\": [255, 228, 181],\n    \"navajowhite\": [255, 222, 173],\n    \"navy\": [0, 0, 128],\n    \"oldlace\": [253, 245, 230],\n    \"olive\": [128, 128, 0],\n    \"olivedrab\": [107, 142, 35],\n    \"orange\": [255, 165, 0],\n    \"orangered\": [255, 69, 0],\n    \"orchid\": [218, 112, 214],\n    \"palegoldenrod\": [238, 232, 170],\n    \"palegreen\": [152, 251, 152],\n    \"paleturquoise\": [175, 238, 238],\n    \"palevioletred\": [219, 112, 147],\n    \"papayawhip\": [255, 239, 213],\n    \"peachpuff\": [255, 218, 185],\n    \"peru\": [205, 133, 63],\n    \"pink\": [255, 192, 203],\n    \"plum\": [221, 160, 221],\n    \"powderblue\": [176, 224, 230],\n    \"purple\": [128, 0, 128],\n    \"rebeccapurple\": [102, 51, 153],\n    \"red\": [255, 0, 0],\n    \"rosybrown\": [188, 143, 143],\n    \"royalblue\": [65, 105, 225],\n    \"saddlebrown\": [139, 69, 19],\n    \"salmon\": [250, 128, 114],\n    \"sandybrown\": [244, 164, 96],\n    \"seagreen\": [46, 139, 87],\n    \"seashell\": [255, 245, 238],\n    \"sienna\": [160, 82, 45],\n    \"silver\": [192, 192, 192],\n    \"skyblue\": [135, 206, 235],\n    \"slateblue\": [106, 90, 205],\n    \"slategray\": [112, 128, 144],\n    \"slategrey\": [112, 128, 144],\n    \"snow\": [255, 250, 250],\n    \"springgreen\": [0, 255, 127],\n    \"steelblue\": [70, 130, 180],\n    \"tan\": [210, 180, 140],\n    \"teal\": [0, 128, 128],\n    \"thistle\": [216, 191, 216],\n    \"tomato\": [255, 99, 71],\n    \"turquoise\": [64, 224, 208],\n    \"violet\": [238, 130, 238],\n    \"wheat\": [245, 222, 179],\n    \"white\": [255, 255, 255],\n    \"whitesmoke\": [245, 245, 245],\n    \"yellow\": [255, 255, 0],\n    \"yellowgreen\": [154, 205, 50]\n  };\n  /* MIT license */\n\n  var colorString = {\n    getRgba: getRgba,\n    getHsla: getHsla,\n    getRgb: getRgb,\n    getHsl: getHsl,\n    getHwb: getHwb,\n    getAlpha: getAlpha,\n    hexString: hexString,\n    rgbString: rgbString,\n    rgbaString: rgbaString,\n    percentString: percentString,\n    percentaString: percentaString,\n    hslString: hslString,\n    hslaString: hslaString,\n    hwbString: hwbString,\n    keyword: keyword\n  };\n\n  function getRgba(string) {\n    if (!string) {\n      return;\n    }\n\n    var abbr = /^#([a-fA-F0-9]{3,4})$/i,\n        hex = /^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i,\n        rgba = /^rgba?\\(\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/i,\n        per = /^rgba?\\(\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/i,\n        keyword = /(\\w+)/;\n    var rgb = [0, 0, 0],\n        a = 1,\n        match = string.match(abbr),\n        hexAlpha = \"\";\n\n    if (match) {\n      match = match[1];\n      hexAlpha = match[3];\n\n      for (var i = 0; i < rgb.length; i++) {\n        rgb[i] = parseInt(match[i] + match[i], 16);\n      }\n\n      if (hexAlpha) {\n        a = Math.round(parseInt(hexAlpha + hexAlpha, 16) / 255 * 100) / 100;\n      }\n    } else if (match = string.match(hex)) {\n      hexAlpha = match[2];\n      match = match[1];\n\n      for (var i = 0; i < rgb.length; i++) {\n        rgb[i] = parseInt(match.slice(i * 2, i * 2 + 2), 16);\n      }\n\n      if (hexAlpha) {\n        a = Math.round(parseInt(hexAlpha, 16) / 255 * 100) / 100;\n      }\n    } else if (match = string.match(rgba)) {\n      for (var i = 0; i < rgb.length; i++) {\n        rgb[i] = parseInt(match[i + 1]);\n      }\n\n      a = parseFloat(match[4]);\n    } else if (match = string.match(per)) {\n      for (var i = 0; i < rgb.length; i++) {\n        rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);\n      }\n\n      a = parseFloat(match[4]);\n    } else if (match = string.match(keyword)) {\n      if (match[1] == \"transparent\") {\n        return [0, 0, 0, 0];\n      }\n\n      rgb = colorName[match[1]];\n\n      if (!rgb) {\n        return;\n      }\n    }\n\n    for (var i = 0; i < rgb.length; i++) {\n      rgb[i] = scale(rgb[i], 0, 255);\n    }\n\n    if (!a && a != 0) {\n      a = 1;\n    } else {\n      a = scale(a, 0, 1);\n    }\n\n    rgb[3] = a;\n    return rgb;\n  }\n\n  function getHsla(string) {\n    if (!string) {\n      return;\n    }\n\n    var hsl = /^hsla?\\(\\s*([+-]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)/;\n    var match = string.match(hsl);\n\n    if (match) {\n      var alpha = parseFloat(match[4]);\n      var h = scale(parseInt(match[1]), 0, 360),\n          s = scale(parseFloat(match[2]), 0, 100),\n          l = scale(parseFloat(match[3]), 0, 100),\n          a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);\n      return [h, s, l, a];\n    }\n  }\n\n  function getHwb(string) {\n    if (!string) {\n      return;\n    }\n\n    var hwb = /^hwb\\(\\s*([+-]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)/;\n    var match = string.match(hwb);\n\n    if (match) {\n      var alpha = parseFloat(match[4]);\n      var h = scale(parseInt(match[1]), 0, 360),\n          w = scale(parseFloat(match[2]), 0, 100),\n          b = scale(parseFloat(match[3]), 0, 100),\n          a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);\n      return [h, w, b, a];\n    }\n  }\n\n  function getRgb(string) {\n    var rgba = getRgba(string);\n    return rgba && rgba.slice(0, 3);\n  }\n\n  function getHsl(string) {\n    var hsla = getHsla(string);\n    return hsla && hsla.slice(0, 3);\n  }\n\n  function getAlpha(string) {\n    var vals = getRgba(string);\n\n    if (vals) {\n      return vals[3];\n    } else if (vals = getHsla(string)) {\n      return vals[3];\n    } else if (vals = getHwb(string)) {\n      return vals[3];\n    }\n  } // generators\n\n\n  function hexString(rgba, a) {\n    var a = a !== undefined && rgba.length === 3 ? a : rgba[3];\n    return \"#\" + hexDouble(rgba[0]) + hexDouble(rgba[1]) + hexDouble(rgba[2]) + (a >= 0 && a < 1 ? hexDouble(Math.round(a * 255)) : \"\");\n  }\n\n  function rgbString(rgba, alpha) {\n    if (alpha < 1 || rgba[3] && rgba[3] < 1) {\n      return rgbaString(rgba, alpha);\n    }\n\n    return \"rgb(\" + rgba[0] + \", \" + rgba[1] + \", \" + rgba[2] + \")\";\n  }\n\n  function rgbaString(rgba, alpha) {\n    if (alpha === undefined) {\n      alpha = rgba[3] !== undefined ? rgba[3] : 1;\n    }\n\n    return \"rgba(\" + rgba[0] + \", \" + rgba[1] + \", \" + rgba[2] + \", \" + alpha + \")\";\n  }\n\n  function percentString(rgba, alpha) {\n    if (alpha < 1 || rgba[3] && rgba[3] < 1) {\n      return percentaString(rgba, alpha);\n    }\n\n    var r = Math.round(rgba[0] / 255 * 100),\n        g = Math.round(rgba[1] / 255 * 100),\n        b = Math.round(rgba[2] / 255 * 100);\n    return \"rgb(\" + r + \"%, \" + g + \"%, \" + b + \"%)\";\n  }\n\n  function percentaString(rgba, alpha) {\n    var r = Math.round(rgba[0] / 255 * 100),\n        g = Math.round(rgba[1] / 255 * 100),\n        b = Math.round(rgba[2] / 255 * 100);\n    return \"rgba(\" + r + \"%, \" + g + \"%, \" + b + \"%, \" + (alpha || rgba[3] || 1) + \")\";\n  }\n\n  function hslString(hsla, alpha) {\n    if (alpha < 1 || hsla[3] && hsla[3] < 1) {\n      return hslaString(hsla, alpha);\n    }\n\n    return \"hsl(\" + hsla[0] + \", \" + hsla[1] + \"%, \" + hsla[2] + \"%)\";\n  }\n\n  function hslaString(hsla, alpha) {\n    if (alpha === undefined) {\n      alpha = hsla[3] !== undefined ? hsla[3] : 1;\n    }\n\n    return \"hsla(\" + hsla[0] + \", \" + hsla[1] + \"%, \" + hsla[2] + \"%, \" + alpha + \")\";\n  } // hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax\n  // (hwb have alpha optional & 1 is default value)\n\n\n  function hwbString(hwb, alpha) {\n    if (alpha === undefined) {\n      alpha = hwb[3] !== undefined ? hwb[3] : 1;\n    }\n\n    return \"hwb(\" + hwb[0] + \", \" + hwb[1] + \"%, \" + hwb[2] + \"%\" + (alpha !== undefined && alpha !== 1 ? \", \" + alpha : \"\") + \")\";\n  }\n\n  function keyword(rgb) {\n    return reverseNames[rgb.slice(0, 3)];\n  } // helpers\n\n\n  function scale(num, min, max) {\n    return Math.min(Math.max(min, num), max);\n  }\n\n  function hexDouble(num) {\n    var str = num.toString(16).toUpperCase();\n    return str.length < 2 ? \"0\" + str : str;\n  } //create a list of reverse color names\n\n\n  var reverseNames = {};\n\n  for (var name in colorName) {\n    reverseNames[colorName[name]] = name;\n  }\n  /* MIT license */\n\n\n  var Color = function Color(obj) {\n    if (obj instanceof Color) {\n      return obj;\n    }\n\n    if (!(this instanceof Color)) {\n      return new Color(obj);\n    }\n\n    this.valid = false;\n    this.values = {\n      rgb: [0, 0, 0],\n      hsl: [0, 0, 0],\n      hsv: [0, 0, 0],\n      hwb: [0, 0, 0],\n      cmyk: [0, 0, 0, 0],\n      alpha: 1\n    }; // parse Color() argument\n\n    var vals;\n\n    if (typeof obj === 'string') {\n      vals = colorString.getRgba(obj);\n\n      if (vals) {\n        this.setValues('rgb', vals);\n      } else if (vals = colorString.getHsla(obj)) {\n        this.setValues('hsl', vals);\n      } else if (vals = colorString.getHwb(obj)) {\n        this.setValues('hwb', vals);\n      }\n    } else if (typeof obj === 'object') {\n      vals = obj;\n\n      if (vals.r !== undefined || vals.red !== undefined) {\n        this.setValues('rgb', vals);\n      } else if (vals.l !== undefined || vals.lightness !== undefined) {\n        this.setValues('hsl', vals);\n      } else if (vals.v !== undefined || vals.value !== undefined) {\n        this.setValues('hsv', vals);\n      } else if (vals.w !== undefined || vals.whiteness !== undefined) {\n        this.setValues('hwb', vals);\n      } else if (vals.c !== undefined || vals.cyan !== undefined) {\n        this.setValues('cmyk', vals);\n      }\n    }\n  };\n\n  Color.prototype = {\n    isValid: function isValid() {\n      return this.valid;\n    },\n    rgb: function rgb() {\n      return this.setSpace('rgb', arguments);\n    },\n    hsl: function hsl() {\n      return this.setSpace('hsl', arguments);\n    },\n    hsv: function hsv() {\n      return this.setSpace('hsv', arguments);\n    },\n    hwb: function hwb() {\n      return this.setSpace('hwb', arguments);\n    },\n    cmyk: function cmyk() {\n      return this.setSpace('cmyk', arguments);\n    },\n    rgbArray: function rgbArray() {\n      return this.values.rgb;\n    },\n    hslArray: function hslArray() {\n      return this.values.hsl;\n    },\n    hsvArray: function hsvArray() {\n      return this.values.hsv;\n    },\n    hwbArray: function hwbArray() {\n      var values = this.values;\n\n      if (values.alpha !== 1) {\n        return values.hwb.concat([values.alpha]);\n      }\n\n      return values.hwb;\n    },\n    cmykArray: function cmykArray() {\n      return this.values.cmyk;\n    },\n    rgbaArray: function rgbaArray() {\n      var values = this.values;\n      return values.rgb.concat([values.alpha]);\n    },\n    hslaArray: function hslaArray() {\n      var values = this.values;\n      return values.hsl.concat([values.alpha]);\n    },\n    alpha: function alpha(val) {\n      if (val === undefined) {\n        return this.values.alpha;\n      }\n\n      this.setValues('alpha', val);\n      return this;\n    },\n    red: function red(val) {\n      return this.setChannel('rgb', 0, val);\n    },\n    green: function green(val) {\n      return this.setChannel('rgb', 1, val);\n    },\n    blue: function blue(val) {\n      return this.setChannel('rgb', 2, val);\n    },\n    hue: function hue(val) {\n      if (val) {\n        val %= 360;\n        val = val < 0 ? 360 + val : val;\n      }\n\n      return this.setChannel('hsl', 0, val);\n    },\n    saturation: function saturation(val) {\n      return this.setChannel('hsl', 1, val);\n    },\n    lightness: function lightness(val) {\n      return this.setChannel('hsl', 2, val);\n    },\n    saturationv: function saturationv(val) {\n      return this.setChannel('hsv', 1, val);\n    },\n    whiteness: function whiteness(val) {\n      return this.setChannel('hwb', 1, val);\n    },\n    blackness: function blackness(val) {\n      return this.setChannel('hwb', 2, val);\n    },\n    value: function value(val) {\n      return this.setChannel('hsv', 2, val);\n    },\n    cyan: function cyan(val) {\n      return this.setChannel('cmyk', 0, val);\n    },\n    magenta: function magenta(val) {\n      return this.setChannel('cmyk', 1, val);\n    },\n    yellow: function yellow(val) {\n      return this.setChannel('cmyk', 2, val);\n    },\n    black: function black(val) {\n      return this.setChannel('cmyk', 3, val);\n    },\n    hexString: function hexString() {\n      return colorString.hexString(this.values.rgb);\n    },\n    rgbString: function rgbString() {\n      return colorString.rgbString(this.values.rgb, this.values.alpha);\n    },\n    rgbaString: function rgbaString() {\n      return colorString.rgbaString(this.values.rgb, this.values.alpha);\n    },\n    percentString: function percentString() {\n      return colorString.percentString(this.values.rgb, this.values.alpha);\n    },\n    hslString: function hslString() {\n      return colorString.hslString(this.values.hsl, this.values.alpha);\n    },\n    hslaString: function hslaString() {\n      return colorString.hslaString(this.values.hsl, this.values.alpha);\n    },\n    hwbString: function hwbString() {\n      return colorString.hwbString(this.values.hwb, this.values.alpha);\n    },\n    keyword: function keyword() {\n      return colorString.keyword(this.values.rgb, this.values.alpha);\n    },\n    rgbNumber: function rgbNumber() {\n      var rgb = this.values.rgb;\n      return rgb[0] << 16 | rgb[1] << 8 | rgb[2];\n    },\n    luminosity: function luminosity() {\n      // http://www.w3.org/TR/WCAG20/#relativeluminancedef\n      var rgb = this.values.rgb;\n      var lum = [];\n\n      for (var i = 0; i < rgb.length; i++) {\n        var chan = rgb[i] / 255;\n        lum[i] = chan <= 0.03928 ? chan / 12.92 : Math.pow((chan + 0.055) / 1.055, 2.4);\n      }\n\n      return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];\n    },\n    contrast: function contrast(color2) {\n      // http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n      var lum1 = this.luminosity();\n      var lum2 = color2.luminosity();\n\n      if (lum1 > lum2) {\n        return (lum1 + 0.05) / (lum2 + 0.05);\n      }\n\n      return (lum2 + 0.05) / (lum1 + 0.05);\n    },\n    level: function level(color2) {\n      var contrastRatio = this.contrast(color2);\n\n      if (contrastRatio >= 7.1) {\n        return 'AAA';\n      }\n\n      return contrastRatio >= 4.5 ? 'AA' : '';\n    },\n    dark: function dark() {\n      // YIQ equation from http://24ways.org/2010/calculating-color-contrast\n      var rgb = this.values.rgb;\n      var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;\n      return yiq < 128;\n    },\n    light: function light() {\n      return !this.dark();\n    },\n    negate: function negate() {\n      var rgb = [];\n\n      for (var i = 0; i < 3; i++) {\n        rgb[i] = 255 - this.values.rgb[i];\n      }\n\n      this.setValues('rgb', rgb);\n      return this;\n    },\n    lighten: function lighten(ratio) {\n      var hsl = this.values.hsl;\n      hsl[2] += hsl[2] * ratio;\n      this.setValues('hsl', hsl);\n      return this;\n    },\n    darken: function darken(ratio) {\n      var hsl = this.values.hsl;\n      hsl[2] -= hsl[2] * ratio;\n      this.setValues('hsl', hsl);\n      return this;\n    },\n    saturate: function saturate(ratio) {\n      var hsl = this.values.hsl;\n      hsl[1] += hsl[1] * ratio;\n      this.setValues('hsl', hsl);\n      return this;\n    },\n    desaturate: function desaturate(ratio) {\n      var hsl = this.values.hsl;\n      hsl[1] -= hsl[1] * ratio;\n      this.setValues('hsl', hsl);\n      return this;\n    },\n    whiten: function whiten(ratio) {\n      var hwb = this.values.hwb;\n      hwb[1] += hwb[1] * ratio;\n      this.setValues('hwb', hwb);\n      return this;\n    },\n    blacken: function blacken(ratio) {\n      var hwb = this.values.hwb;\n      hwb[2] += hwb[2] * ratio;\n      this.setValues('hwb', hwb);\n      return this;\n    },\n    greyscale: function greyscale() {\n      var rgb = this.values.rgb; // http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale\n\n      var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;\n      this.setValues('rgb', [val, val, val]);\n      return this;\n    },\n    clearer: function clearer(ratio) {\n      var alpha = this.values.alpha;\n      this.setValues('alpha', alpha - alpha * ratio);\n      return this;\n    },\n    opaquer: function opaquer(ratio) {\n      var alpha = this.values.alpha;\n      this.setValues('alpha', alpha + alpha * ratio);\n      return this;\n    },\n    rotate: function rotate(degrees) {\n      var hsl = this.values.hsl;\n      var hue = (hsl[0] + degrees) % 360;\n      hsl[0] = hue < 0 ? 360 + hue : hue;\n      this.setValues('hsl', hsl);\n      return this;\n    },\n\n    /**\n     * Ported from sass implementation in C\n     * https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209\n     */\n    mix: function mix(mixinColor, weight) {\n      var color1 = this;\n      var color2 = mixinColor;\n      var p = weight === undefined ? 0.5 : weight;\n      var w = 2 * p - 1;\n      var a = color1.alpha() - color2.alpha();\n      var w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n      var w2 = 1 - w1;\n      return this.rgb(w1 * color1.red() + w2 * color2.red(), w1 * color1.green() + w2 * color2.green(), w1 * color1.blue() + w2 * color2.blue()).alpha(color1.alpha() * p + color2.alpha() * (1 - p));\n    },\n    toJSON: function toJSON() {\n      return this.rgb();\n    },\n    clone: function clone() {\n      // NOTE(SB): using node-clone creates a dependency to Buffer when using browserify,\n      // making the final build way to big to embed in Chart.js. So let's do it manually,\n      // assuming that values to clone are 1 dimension arrays containing only numbers,\n      // except 'alpha' which is a number.\n      var result = new Color();\n      var source = this.values;\n      var target = result.values;\n      var value, type;\n\n      for (var prop in source) {\n        if (source.hasOwnProperty(prop)) {\n          value = source[prop];\n          type = {}.toString.call(value);\n\n          if (type === '[object Array]') {\n            target[prop] = value.slice(0);\n          } else if (type === '[object Number]') {\n            target[prop] = value;\n          } else {\n            console.error('unexpected color value:', value);\n          }\n        }\n      }\n\n      return result;\n    }\n  };\n  Color.prototype.spaces = {\n    rgb: ['red', 'green', 'blue'],\n    hsl: ['hue', 'saturation', 'lightness'],\n    hsv: ['hue', 'saturation', 'value'],\n    hwb: ['hue', 'whiteness', 'blackness'],\n    cmyk: ['cyan', 'magenta', 'yellow', 'black']\n  };\n  Color.prototype.maxes = {\n    rgb: [255, 255, 255],\n    hsl: [360, 100, 100],\n    hsv: [360, 100, 100],\n    hwb: [360, 100, 100],\n    cmyk: [100, 100, 100, 100]\n  };\n\n  Color.prototype.getValues = function (space) {\n    var values = this.values;\n    var vals = {};\n\n    for (var i = 0; i < space.length; i++) {\n      vals[space.charAt(i)] = values[space][i];\n    }\n\n    if (values.alpha !== 1) {\n      vals.a = values.alpha;\n    } // {r: 255, g: 255, b: 255, a: 0.4}\n\n\n    return vals;\n  };\n\n  Color.prototype.setValues = function (space, vals) {\n    var values = this.values;\n    var spaces = this.spaces;\n    var maxes = this.maxes;\n    var alpha = 1;\n    var i;\n    this.valid = true;\n\n    if (space === 'alpha') {\n      alpha = vals;\n    } else if (vals.length) {\n      // [10, 10, 10]\n      values[space] = vals.slice(0, space.length);\n      alpha = vals[space.length];\n    } else if (vals[space.charAt(0)] !== undefined) {\n      // {r: 10, g: 10, b: 10}\n      for (i = 0; i < space.length; i++) {\n        values[space][i] = vals[space.charAt(i)];\n      }\n\n      alpha = vals.a;\n    } else if (vals[spaces[space][0]] !== undefined) {\n      // {red: 10, green: 10, blue: 10}\n      var chans = spaces[space];\n\n      for (i = 0; i < space.length; i++) {\n        values[space][i] = vals[chans[i]];\n      }\n\n      alpha = vals.alpha;\n    }\n\n    values.alpha = Math.max(0, Math.min(1, alpha === undefined ? values.alpha : alpha));\n\n    if (space === 'alpha') {\n      return false;\n    }\n\n    var capped; // cap values of the space prior converting all values\n\n    for (i = 0; i < space.length; i++) {\n      capped = Math.max(0, Math.min(maxes[space][i], values[space][i]));\n      values[space][i] = Math.round(capped);\n    } // convert to all the other color spaces\n\n\n    for (var sname in spaces) {\n      if (sname !== space) {\n        values[sname] = colorConvert[space][sname](values[space]);\n      }\n    }\n\n    return true;\n  };\n\n  Color.prototype.setSpace = function (space, args) {\n    var vals = args[0];\n\n    if (vals === undefined) {\n      // color.rgb()\n      return this.getValues(space);\n    } // color.rgb(10, 10, 10)\n\n\n    if (typeof vals === 'number') {\n      vals = Array.prototype.slice.call(args);\n    }\n\n    this.setValues(space, vals);\n    return this;\n  };\n\n  Color.prototype.setChannel = function (space, index, val) {\n    var svalues = this.values[space];\n\n    if (val === undefined) {\n      // color.red()\n      return svalues[index];\n    } else if (val === svalues[index]) {\n      // color.red(color.red())\n      return this;\n    } // color.red(100)\n\n\n    svalues[index] = val;\n    this.setValues(space, svalues);\n    return this;\n  };\n\n  if (typeof window !== 'undefined') {\n    window.Color = Color;\n  }\n\n  var chartjsColor = Color;\n  /**\n   * @namespace Chart.helpers\n   */\n\n  var helpers = {\n    /**\n     * An empty function that can be used, for example, for optional callback.\n     */\n    noop: function noop() {},\n\n    /**\n     * Returns a unique id, sequentially generated from a global variable.\n     * @returns {number}\n     * @function\n     */\n    uid: function () {\n      var id = 0;\n      return function () {\n        return id++;\n      };\n    }(),\n\n    /**\n     * Returns true if `value` is neither null nor undefined, else returns false.\n     * @param {*} value - The value to test.\n     * @returns {boolean}\n     * @since 2.7.0\n     */\n    isNullOrUndef: function isNullOrUndef(value) {\n      return value === null || typeof value === 'undefined';\n    },\n\n    /**\n     * Returns true if `value` is an array (including typed arrays), else returns false.\n     * @param {*} value - The value to test.\n     * @returns {boolean}\n     * @function\n     */\n    isArray: function isArray(value) {\n      if (Array.isArray && Array.isArray(value)) {\n        return true;\n      }\n\n      var type = Object.prototype.toString.call(value);\n\n      if (type.substr(0, 7) === '[object' && type.substr(-6) === 'Array]') {\n        return true;\n      }\n\n      return false;\n    },\n\n    /**\n     * Returns true if `value` is an object (excluding null), else returns false.\n     * @param {*} value - The value to test.\n     * @returns {boolean}\n     * @since 2.7.0\n     */\n    isObject: function isObject(value) {\n      return value !== null && Object.prototype.toString.call(value) === '[object Object]';\n    },\n\n    /**\n     * Returns true if `value` is a finite number, else returns false\n     * @param {*} value  - The value to test.\n     * @returns {boolean}\n     */\n    isFinite: function (_isFinite) {\n      function isFinite(_x) {\n        return _isFinite.apply(this, arguments);\n      }\n\n      isFinite.toString = function () {\n        return _isFinite.toString();\n      };\n\n      return isFinite;\n    }(function (value) {\n      return (typeof value === 'number' || value instanceof Number) && isFinite(value);\n    }),\n\n    /**\n     * Returns `value` if defined, else returns `defaultValue`.\n     * @param {*} value - The value to return if defined.\n     * @param {*} defaultValue - The value to return if `value` is undefined.\n     * @returns {*}\n     */\n    valueOrDefault: function valueOrDefault(value, defaultValue) {\n      return typeof value === 'undefined' ? defaultValue : value;\n    },\n\n    /**\n     * Returns value at the given `index` in array if defined, else returns `defaultValue`.\n     * @param {Array} value - The array to lookup for value at `index`.\n     * @param {number} index - The index in `value` to lookup for value.\n     * @param {*} defaultValue - The value to return if `value[index]` is undefined.\n     * @returns {*}\n     */\n    valueAtIndexOrDefault: function valueAtIndexOrDefault(value, index, defaultValue) {\n      return helpers.valueOrDefault(helpers.isArray(value) ? value[index] : value, defaultValue);\n    },\n\n    /**\n     * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the\n     * value returned by `fn`. If `fn` is not a function, this method returns undefined.\n     * @param {function} fn - The function to call.\n     * @param {Array|undefined|null} args - The arguments with which `fn` should be called.\n     * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.\n     * @returns {*}\n     */\n    callback: function callback(fn, args, thisArg) {\n      if (fn && typeof fn.call === 'function') {\n        return fn.apply(thisArg, args);\n      }\n    },\n\n    /**\n     * Note(SB) for performance sake, this method should only be used when loopable type\n     * is unknown or in none intensive code (not called often and small loopable). Else\n     * it's preferable to use a regular for() loop and save extra function calls.\n     * @param {object|Array} loopable - The object or array to be iterated.\n     * @param {function} fn - The function to call for each item.\n     * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.\n     * @param {boolean} [reverse] - If true, iterates backward on the loopable.\n     */\n    each: function each(loopable, fn, thisArg, reverse) {\n      var i, len, keys;\n\n      if (helpers.isArray(loopable)) {\n        len = loopable.length;\n\n        if (reverse) {\n          for (i = len - 1; i >= 0; i--) {\n            fn.call(thisArg, loopable[i], i);\n          }\n        } else {\n          for (i = 0; i < len; i++) {\n            fn.call(thisArg, loopable[i], i);\n          }\n        }\n      } else if (helpers.isObject(loopable)) {\n        keys = Object.keys(loopable);\n        len = keys.length;\n\n        for (i = 0; i < len; i++) {\n          fn.call(thisArg, loopable[keys[i]], keys[i]);\n        }\n      }\n    },\n\n    /**\n     * Returns true if the `a0` and `a1` arrays have the same content, else returns false.\n     * @see https://stackoverflow.com/a/14853974\n     * @param {Array} a0 - The array to compare\n     * @param {Array} a1 - The array to compare\n     * @returns {boolean}\n     */\n    arrayEquals: function arrayEquals(a0, a1) {\n      var i, ilen, v0, v1;\n\n      if (!a0 || !a1 || a0.length !== a1.length) {\n        return false;\n      }\n\n      for (i = 0, ilen = a0.length; i < ilen; ++i) {\n        v0 = a0[i];\n        v1 = a1[i];\n\n        if (v0 instanceof Array && v1 instanceof Array) {\n          if (!helpers.arrayEquals(v0, v1)) {\n            return false;\n          }\n        } else if (v0 !== v1) {\n          // NOTE: two different object instances will never be equal: {x:20} != {x:20}\n          return false;\n        }\n      }\n\n      return true;\n    },\n\n    /**\n     * Returns a deep copy of `source` without keeping references on objects and arrays.\n     * @param {*} source - The value to clone.\n     * @returns {*}\n     */\n    clone: function clone(source) {\n      if (helpers.isArray(source)) {\n        return source.map(helpers.clone);\n      }\n\n      if (helpers.isObject(source)) {\n        var target = {};\n        var keys = Object.keys(source);\n        var klen = keys.length;\n        var k = 0;\n\n        for (; k < klen; ++k) {\n          target[keys[k]] = helpers.clone(source[keys[k]]);\n        }\n\n        return target;\n      }\n\n      return source;\n    },\n\n    /**\n     * The default merger when Chart.helpers.merge is called without merger option.\n     * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.\n     * @private\n     */\n    _merger: function _merger(key, target, source, options) {\n      var tval = target[key];\n      var sval = source[key];\n\n      if (helpers.isObject(tval) && helpers.isObject(sval)) {\n        helpers.merge(tval, sval, options);\n      } else {\n        target[key] = helpers.clone(sval);\n      }\n    },\n\n    /**\n     * Merges source[key] in target[key] only if target[key] is undefined.\n     * @private\n     */\n    _mergerIf: function _mergerIf(key, target, source) {\n      var tval = target[key];\n      var sval = source[key];\n\n      if (helpers.isObject(tval) && helpers.isObject(sval)) {\n        helpers.mergeIf(tval, sval);\n      } else if (!target.hasOwnProperty(key)) {\n        target[key] = helpers.clone(sval);\n      }\n    },\n\n    /**\n     * Recursively deep copies `source` properties into `target` with the given `options`.\n     * IMPORTANT: `target` is not cloned and will be updated with `source` properties.\n     * @param {object} target - The target object in which all sources are merged into.\n     * @param {object|object[]} source - Object(s) to merge into `target`.\n     * @param {object} [options] - Merging options:\n     * @param {function} [options.merger] - The merge method (key, target, source, options)\n     * @returns {object} The `target` object.\n     */\n    merge: function merge(target, source, options) {\n      var sources = helpers.isArray(source) ? source : [source];\n      var ilen = sources.length;\n      var merge, i, keys, klen, k;\n\n      if (!helpers.isObject(target)) {\n        return target;\n      }\n\n      options = options || {};\n      merge = options.merger || helpers._merger;\n\n      for (i = 0; i < ilen; ++i) {\n        source = sources[i];\n\n        if (!helpers.isObject(source)) {\n          continue;\n        }\n\n        keys = Object.keys(source);\n\n        for (k = 0, klen = keys.length; k < klen; ++k) {\n          merge(keys[k], target, source, options);\n        }\n      }\n\n      return target;\n    },\n\n    /**\n     * Recursively deep copies `source` properties into `target` *only* if not defined in target.\n     * IMPORTANT: `target` is not cloned and will be updated with `source` properties.\n     * @param {object} target - The target object in which all sources are merged into.\n     * @param {object|object[]} source - Object(s) to merge into `target`.\n     * @returns {object} The `target` object.\n     */\n    mergeIf: function mergeIf(target, source) {\n      return helpers.merge(target, source, {\n        merger: helpers._mergerIf\n      });\n    },\n\n    /**\n     * Applies the contents of two or more objects together into the first object.\n     * @param {object} target - The target object in which all objects are merged into.\n     * @param {object} arg1 - Object containing additional properties to merge in target.\n     * @param {object} argN - Additional objects containing properties to merge in target.\n     * @returns {object} The `target` object.\n     */\n    extend: function extend(target) {\n      var setFn = function setFn(value, key) {\n        target[key] = value;\n      };\n\n      for (var i = 1, ilen = arguments.length; i < ilen; ++i) {\n        helpers.each(arguments[i], setFn);\n      }\n\n      return target;\n    },\n\n    /**\n     * Basic javascript inheritance based on the model created in Backbone.js\n     */\n    inherits: function inherits(extensions) {\n      var me = this;\n      var ChartElement = extensions && extensions.hasOwnProperty('constructor') ? extensions.constructor : function () {\n        return me.apply(this, arguments);\n      };\n\n      var Surrogate = function Surrogate() {\n        this.constructor = ChartElement;\n      };\n\n      Surrogate.prototype = me.prototype;\n      ChartElement.prototype = new Surrogate();\n      ChartElement.extend = helpers.inherits;\n\n      if (extensions) {\n        helpers.extend(ChartElement.prototype, extensions);\n      }\n\n      ChartElement.__super__ = me.prototype;\n      return ChartElement;\n    }\n  };\n  var helpers_core = helpers; // DEPRECATIONS\n\n  /**\n   * Provided for backward compatibility, use Chart.helpers.callback instead.\n   * @function Chart.helpers.callCallback\n   * @deprecated since version 2.6.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers.callCallback = helpers.callback;\n  /**\n   * Provided for backward compatibility, use Array.prototype.indexOf instead.\n   * Array.prototype.indexOf compatibility: Chrome, Opera, Safari, FF1.5+, IE9+\n   * @function Chart.helpers.indexOf\n   * @deprecated since version 2.7.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers.indexOf = function (array, item, fromIndex) {\n    return Array.prototype.indexOf.call(array, item, fromIndex);\n  };\n  /**\n   * Provided for backward compatibility, use Chart.helpers.valueOrDefault instead.\n   * @function Chart.helpers.getValueOrDefault\n   * @deprecated since version 2.7.0\n   * @todo remove at version 3\n   * @private\n   */\n\n\n  helpers.getValueOrDefault = helpers.valueOrDefault;\n  /**\n   * Provided for backward compatibility, use Chart.helpers.valueAtIndexOrDefault instead.\n   * @function Chart.helpers.getValueAtIndexOrDefault\n   * @deprecated since version 2.7.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers.getValueAtIndexOrDefault = helpers.valueAtIndexOrDefault;\n  /**\n   * Easing functions adapted from Robert Penner's easing equations.\n   * @namespace Chart.helpers.easingEffects\n   * @see http://www.robertpenner.com/easing/\n   */\n\n  var effects = {\n    linear: function linear(t) {\n      return t;\n    },\n    easeInQuad: function easeInQuad(t) {\n      return t * t;\n    },\n    easeOutQuad: function easeOutQuad(t) {\n      return -t * (t - 2);\n    },\n    easeInOutQuad: function easeInOutQuad(t) {\n      if ((t /= 0.5) < 1) {\n        return 0.5 * t * t;\n      }\n\n      return -0.5 * (--t * (t - 2) - 1);\n    },\n    easeInCubic: function easeInCubic(t) {\n      return t * t * t;\n    },\n    easeOutCubic: function easeOutCubic(t) {\n      return (t = t - 1) * t * t + 1;\n    },\n    easeInOutCubic: function easeInOutCubic(t) {\n      if ((t /= 0.5) < 1) {\n        return 0.5 * t * t * t;\n      }\n\n      return 0.5 * ((t -= 2) * t * t + 2);\n    },\n    easeInQuart: function easeInQuart(t) {\n      return t * t * t * t;\n    },\n    easeOutQuart: function easeOutQuart(t) {\n      return -((t = t - 1) * t * t * t - 1);\n    },\n    easeInOutQuart: function easeInOutQuart(t) {\n      if ((t /= 0.5) < 1) {\n        return 0.5 * t * t * t * t;\n      }\n\n      return -0.5 * ((t -= 2) * t * t * t - 2);\n    },\n    easeInQuint: function easeInQuint(t) {\n      return t * t * t * t * t;\n    },\n    easeOutQuint: function easeOutQuint(t) {\n      return (t = t - 1) * t * t * t * t + 1;\n    },\n    easeInOutQuint: function easeInOutQuint(t) {\n      if ((t /= 0.5) < 1) {\n        return 0.5 * t * t * t * t * t;\n      }\n\n      return 0.5 * ((t -= 2) * t * t * t * t + 2);\n    },\n    easeInSine: function easeInSine(t) {\n      return -Math.cos(t * (Math.PI / 2)) + 1;\n    },\n    easeOutSine: function easeOutSine(t) {\n      return Math.sin(t * (Math.PI / 2));\n    },\n    easeInOutSine: function easeInOutSine(t) {\n      return -0.5 * (Math.cos(Math.PI * t) - 1);\n    },\n    easeInExpo: function easeInExpo(t) {\n      return t === 0 ? 0 : Math.pow(2, 10 * (t - 1));\n    },\n    easeOutExpo: function easeOutExpo(t) {\n      return t === 1 ? 1 : -Math.pow(2, -10 * t) + 1;\n    },\n    easeInOutExpo: function easeInOutExpo(t) {\n      if (t === 0) {\n        return 0;\n      }\n\n      if (t === 1) {\n        return 1;\n      }\n\n      if ((t /= 0.5) < 1) {\n        return 0.5 * Math.pow(2, 10 * (t - 1));\n      }\n\n      return 0.5 * (-Math.pow(2, -10 * --t) + 2);\n    },\n    easeInCirc: function easeInCirc(t) {\n      if (t >= 1) {\n        return t;\n      }\n\n      return -(Math.sqrt(1 - t * t) - 1);\n    },\n    easeOutCirc: function easeOutCirc(t) {\n      return Math.sqrt(1 - (t = t - 1) * t);\n    },\n    easeInOutCirc: function easeInOutCirc(t) {\n      if ((t /= 0.5) < 1) {\n        return -0.5 * (Math.sqrt(1 - t * t) - 1);\n      }\n\n      return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);\n    },\n    easeInElastic: function easeInElastic(t) {\n      var s = 1.70158;\n      var p = 0;\n      var a = 1;\n\n      if (t === 0) {\n        return 0;\n      }\n\n      if (t === 1) {\n        return 1;\n      }\n\n      if (!p) {\n        p = 0.3;\n      }\n\n      if (a < 1) {\n        a = 1;\n        s = p / 4;\n      } else {\n        s = p / (2 * Math.PI) * Math.asin(1 / a);\n      }\n\n      return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));\n    },\n    easeOutElastic: function easeOutElastic(t) {\n      var s = 1.70158;\n      var p = 0;\n      var a = 1;\n\n      if (t === 0) {\n        return 0;\n      }\n\n      if (t === 1) {\n        return 1;\n      }\n\n      if (!p) {\n        p = 0.3;\n      }\n\n      if (a < 1) {\n        a = 1;\n        s = p / 4;\n      } else {\n        s = p / (2 * Math.PI) * Math.asin(1 / a);\n      }\n\n      return a * Math.pow(2, -10 * t) * Math.sin((t - s) * (2 * Math.PI) / p) + 1;\n    },\n    easeInOutElastic: function easeInOutElastic(t) {\n      var s = 1.70158;\n      var p = 0;\n      var a = 1;\n\n      if (t === 0) {\n        return 0;\n      }\n\n      if ((t /= 0.5) === 2) {\n        return 1;\n      }\n\n      if (!p) {\n        p = 0.45;\n      }\n\n      if (a < 1) {\n        a = 1;\n        s = p / 4;\n      } else {\n        s = p / (2 * Math.PI) * Math.asin(1 / a);\n      }\n\n      if (t < 1) {\n        return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));\n      }\n\n      return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p) * 0.5 + 1;\n    },\n    easeInBack: function easeInBack(t) {\n      var s = 1.70158;\n      return t * t * ((s + 1) * t - s);\n    },\n    easeOutBack: function easeOutBack(t) {\n      var s = 1.70158;\n      return (t = t - 1) * t * ((s + 1) * t + s) + 1;\n    },\n    easeInOutBack: function easeInOutBack(t) {\n      var s = 1.70158;\n\n      if ((t /= 0.5) < 1) {\n        return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));\n      }\n\n      return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);\n    },\n    easeInBounce: function easeInBounce(t) {\n      return 1 - effects.easeOutBounce(1 - t);\n    },\n    easeOutBounce: function easeOutBounce(t) {\n      if (t < 1 / 2.75) {\n        return 7.5625 * t * t;\n      }\n\n      if (t < 2 / 2.75) {\n        return 7.5625 * (t -= 1.5 / 2.75) * t + 0.75;\n      }\n\n      if (t < 2.5 / 2.75) {\n        return 7.5625 * (t -= 2.25 / 2.75) * t + 0.9375;\n      }\n\n      return 7.5625 * (t -= 2.625 / 2.75) * t + 0.984375;\n    },\n    easeInOutBounce: function easeInOutBounce(t) {\n      if (t < 0.5) {\n        return effects.easeInBounce(t * 2) * 0.5;\n      }\n\n      return effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5;\n    }\n  };\n  var helpers_easing = {\n    effects: effects\n  }; // DEPRECATIONS\n\n  /**\n   * Provided for backward compatibility, use Chart.helpers.easing.effects instead.\n   * @function Chart.helpers.easingEffects\n   * @deprecated since version 2.7.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers_core.easingEffects = effects;\n  var PI = Math.PI;\n  var RAD_PER_DEG = PI / 180;\n  var DOUBLE_PI = PI * 2;\n  var HALF_PI = PI / 2;\n  var QUARTER_PI = PI / 4;\n  var TWO_THIRDS_PI = PI * 2 / 3;\n  /**\n   * @namespace Chart.helpers.canvas\n   */\n\n  var exports$1 = {\n    /**\n     * Clears the entire canvas associated to the given `chart`.\n     * @param {Chart} chart - The chart for which to clear the canvas.\n     */\n    clear: function clear(chart) {\n      chart.ctx.clearRect(0, 0, chart.width, chart.height);\n    },\n\n    /**\n     * Creates a \"path\" for a rectangle with rounded corners at position (x, y) with a\n     * given size (width, height) and the same `radius` for all corners.\n     * @param {CanvasRenderingContext2D} ctx - The canvas 2D Context.\n     * @param {number} x - The x axis of the coordinate for the rectangle starting point.\n     * @param {number} y - The y axis of the coordinate for the rectangle starting point.\n     * @param {number} width - The rectangle's width.\n     * @param {number} height - The rectangle's height.\n     * @param {number} radius - The rounded amount (in pixels) for the four corners.\n     * @todo handle `radius` as top-left, top-right, bottom-right, bottom-left array/object?\n     */\n    roundedRect: function roundedRect(ctx, x, y, width, height, radius) {\n      if (radius) {\n        var r = Math.min(radius, height / 2, width / 2);\n        var left = x + r;\n        var top = y + r;\n        var right = x + width - r;\n        var bottom = y + height - r;\n        ctx.moveTo(x, top);\n\n        if (left < right && top < bottom) {\n          ctx.arc(left, top, r, -PI, -HALF_PI);\n          ctx.arc(right, top, r, -HALF_PI, 0);\n          ctx.arc(right, bottom, r, 0, HALF_PI);\n          ctx.arc(left, bottom, r, HALF_PI, PI);\n        } else if (left < right) {\n          ctx.moveTo(left, y);\n          ctx.arc(right, top, r, -HALF_PI, HALF_PI);\n          ctx.arc(left, top, r, HALF_PI, PI + HALF_PI);\n        } else if (top < bottom) {\n          ctx.arc(left, top, r, -PI, 0);\n          ctx.arc(left, bottom, r, 0, PI);\n        } else {\n          ctx.arc(left, top, r, -PI, PI);\n        }\n\n        ctx.closePath();\n        ctx.moveTo(x, y);\n      } else {\n        ctx.rect(x, y, width, height);\n      }\n    },\n    drawPoint: function drawPoint(ctx, style, radius, x, y, rotation) {\n      var type, xOffset, yOffset, size, cornerRadius;\n      var rad = (rotation || 0) * RAD_PER_DEG;\n\n      if (style && typeof style === 'object') {\n        type = style.toString();\n\n        if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n          ctx.drawImage(style, x - style.width / 2, y - style.height / 2, style.width, style.height);\n          return;\n        }\n      }\n\n      if (isNaN(radius) || radius <= 0) {\n        return;\n      }\n\n      ctx.beginPath();\n\n      switch (style) {\n        // Default includes circle\n        default:\n          ctx.arc(x, y, radius, 0, DOUBLE_PI);\n          ctx.closePath();\n          break;\n\n        case 'triangle':\n          ctx.moveTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n          rad += TWO_THIRDS_PI;\n          ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n          rad += TWO_THIRDS_PI;\n          ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n          ctx.closePath();\n          break;\n\n        case 'rectRounded':\n          // NOTE: the rounded rect implementation changed to use `arc` instead of\n          // `quadraticCurveTo` since it generates better results when rect is\n          // almost a circle. 0.516 (instead of 0.5) produces results with visually\n          // closer proportion to the previous impl and it is inscribed in the\n          // circle with `radius`. For more details, see the following PRs:\n          // https://github.com/chartjs/Chart.js/issues/5597\n          // https://github.com/chartjs/Chart.js/issues/5858\n          cornerRadius = radius * 0.516;\n          size = radius - cornerRadius;\n          xOffset = Math.cos(rad + QUARTER_PI) * size;\n          yOffset = Math.sin(rad + QUARTER_PI) * size;\n          ctx.arc(x - xOffset, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);\n          ctx.arc(x + yOffset, y - xOffset, cornerRadius, rad - HALF_PI, rad);\n          ctx.arc(x + xOffset, y + yOffset, cornerRadius, rad, rad + HALF_PI);\n          ctx.arc(x - yOffset, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);\n          ctx.closePath();\n          break;\n\n        case 'rect':\n          if (!rotation) {\n            size = Math.SQRT1_2 * radius;\n            ctx.rect(x - size, y - size, 2 * size, 2 * size);\n            break;\n          }\n\n          rad += QUARTER_PI;\n\n        /* falls through */\n\n        case 'rectRot':\n          xOffset = Math.cos(rad) * radius;\n          yOffset = Math.sin(rad) * radius;\n          ctx.moveTo(x - xOffset, y - yOffset);\n          ctx.lineTo(x + yOffset, y - xOffset);\n          ctx.lineTo(x + xOffset, y + yOffset);\n          ctx.lineTo(x - yOffset, y + xOffset);\n          ctx.closePath();\n          break;\n\n        case 'crossRot':\n          rad += QUARTER_PI;\n\n        /* falls through */\n\n        case 'cross':\n          xOffset = Math.cos(rad) * radius;\n          yOffset = Math.sin(rad) * radius;\n          ctx.moveTo(x - xOffset, y - yOffset);\n          ctx.lineTo(x + xOffset, y + yOffset);\n          ctx.moveTo(x + yOffset, y - xOffset);\n          ctx.lineTo(x - yOffset, y + xOffset);\n          break;\n\n        case 'star':\n          xOffset = Math.cos(rad) * radius;\n          yOffset = Math.sin(rad) * radius;\n          ctx.moveTo(x - xOffset, y - yOffset);\n          ctx.lineTo(x + xOffset, y + yOffset);\n          ctx.moveTo(x + yOffset, y - xOffset);\n          ctx.lineTo(x - yOffset, y + xOffset);\n          rad += QUARTER_PI;\n          xOffset = Math.cos(rad) * radius;\n          yOffset = Math.sin(rad) * radius;\n          ctx.moveTo(x - xOffset, y - yOffset);\n          ctx.lineTo(x + xOffset, y + yOffset);\n          ctx.moveTo(x + yOffset, y - xOffset);\n          ctx.lineTo(x - yOffset, y + xOffset);\n          break;\n\n        case 'line':\n          xOffset = Math.cos(rad) * radius;\n          yOffset = Math.sin(rad) * radius;\n          ctx.moveTo(x - xOffset, y - yOffset);\n          ctx.lineTo(x + xOffset, y + yOffset);\n          break;\n\n        case 'dash':\n          ctx.moveTo(x, y);\n          ctx.lineTo(x + Math.cos(rad) * radius, y + Math.sin(rad) * radius);\n          break;\n      }\n\n      ctx.fill();\n      ctx.stroke();\n    },\n\n    /**\n     * Returns true if the point is inside the rectangle\n     * @param {object} point - The point to test\n     * @param {object} area - The rectangle\n     * @returns {boolean}\n     * @private\n     */\n    _isPointInArea: function _isPointInArea(point, area) {\n      var epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.\n\n      return point.x > area.left - epsilon && point.x < area.right + epsilon && point.y > area.top - epsilon && point.y < area.bottom + epsilon;\n    },\n    clipArea: function clipArea(ctx, area) {\n      ctx.save();\n      ctx.beginPath();\n      ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\n      ctx.clip();\n    },\n    unclipArea: function unclipArea(ctx) {\n      ctx.restore();\n    },\n    lineTo: function lineTo(ctx, previous, target, flip) {\n      var stepped = target.steppedLine;\n\n      if (stepped) {\n        if (stepped === 'middle') {\n          var midpoint = (previous.x + target.x) / 2.0;\n          ctx.lineTo(midpoint, flip ? target.y : previous.y);\n          ctx.lineTo(midpoint, flip ? previous.y : target.y);\n        } else if (stepped === 'after' && !flip || stepped !== 'after' && flip) {\n          ctx.lineTo(previous.x, target.y);\n        } else {\n          ctx.lineTo(target.x, previous.y);\n        }\n\n        ctx.lineTo(target.x, target.y);\n        return;\n      }\n\n      if (!target.tension) {\n        ctx.lineTo(target.x, target.y);\n        return;\n      }\n\n      ctx.bezierCurveTo(flip ? previous.controlPointPreviousX : previous.controlPointNextX, flip ? previous.controlPointPreviousY : previous.controlPointNextY, flip ? target.controlPointNextX : target.controlPointPreviousX, flip ? target.controlPointNextY : target.controlPointPreviousY, target.x, target.y);\n    }\n  };\n  var helpers_canvas = exports$1; // DEPRECATIONS\n\n  /**\n   * Provided for backward compatibility, use Chart.helpers.canvas.clear instead.\n   * @namespace Chart.helpers.clear\n   * @deprecated since version 2.7.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers_core.clear = exports$1.clear;\n  /**\n   * Provided for backward compatibility, use Chart.helpers.canvas.roundedRect instead.\n   * @namespace Chart.helpers.drawRoundedRectangle\n   * @deprecated since version 2.7.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers_core.drawRoundedRectangle = function (ctx) {\n    ctx.beginPath();\n    exports$1.roundedRect.apply(exports$1, arguments);\n  };\n\n  var defaults = {\n    /**\n     * @private\n     */\n    _set: function _set(scope, values) {\n      return helpers_core.merge(this[scope] || (this[scope] = {}), values);\n    }\n  };\n\n  defaults._set('global', {\n    defaultColor: 'rgba(0,0,0,0.1)',\n    defaultFontColor: '#666',\n    defaultFontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n    defaultFontSize: 12,\n    defaultFontStyle: 'normal',\n    defaultLineHeight: 1.2,\n    showLines: true\n  });\n\n  var core_defaults = defaults;\n  var valueOrDefault = helpers_core.valueOrDefault;\n  /**\n   * Converts the given font object into a CSS font string.\n   * @param {object} font - A font object.\n   * @return {string} The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font\n   * @private\n   */\n\n  function toFontString(font) {\n    if (!font || helpers_core.isNullOrUndef(font.size) || helpers_core.isNullOrUndef(font.family)) {\n      return null;\n    }\n\n    return (font.style ? font.style + ' ' : '') + (font.weight ? font.weight + ' ' : '') + font.size + 'px ' + font.family;\n  }\n  /**\n   * @alias Chart.helpers.options\n   * @namespace\n   */\n\n\n  var helpers_options = {\n    /**\n     * Converts the given line height `value` in pixels for a specific font `size`.\n     * @param {number|string} value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').\n     * @param {number} size - The font size (in pixels) used to resolve relative `value`.\n     * @returns {number} The effective line height in pixels (size * 1.2 if value is invalid).\n     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height\n     * @since 2.7.0\n     */\n    toLineHeight: function toLineHeight(value, size) {\n      var matches = ('' + value).match(/^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/);\n\n      if (!matches || matches[1] === 'normal') {\n        return size * 1.2;\n      }\n\n      value = +matches[2];\n\n      switch (matches[3]) {\n        case 'px':\n          return value;\n\n        case '%':\n          value /= 100;\n          break;\n\n        default:\n          break;\n      }\n\n      return size * value;\n    },\n\n    /**\n     * Converts the given value into a padding object with pre-computed width/height.\n     * @param {number|object} value - If a number, set the value to all TRBL component,\n     *  else, if and object, use defined properties and sets undefined ones to 0.\n     * @returns {object} The padding values (top, right, bottom, left, width, height)\n     * @since 2.7.0\n     */\n    toPadding: function toPadding(value) {\n      var t, r, b, l;\n\n      if (helpers_core.isObject(value)) {\n        t = +value.top || 0;\n        r = +value.right || 0;\n        b = +value.bottom || 0;\n        l = +value.left || 0;\n      } else {\n        t = r = b = l = +value || 0;\n      }\n\n      return {\n        top: t,\n        right: r,\n        bottom: b,\n        left: l,\n        height: t + b,\n        width: l + r\n      };\n    },\n\n    /**\n     * Parses font options and returns the font object.\n     * @param {object} options - A object that contains font options to be parsed.\n     * @return {object} The font object.\n     * @todo Support font.* options and renamed to toFont().\n     * @private\n     */\n    _parseFont: function _parseFont(options) {\n      var globalDefaults = core_defaults.global;\n      var size = valueOrDefault(options.fontSize, globalDefaults.defaultFontSize);\n      var font = {\n        family: valueOrDefault(options.fontFamily, globalDefaults.defaultFontFamily),\n        lineHeight: helpers_core.options.toLineHeight(valueOrDefault(options.lineHeight, globalDefaults.defaultLineHeight), size),\n        size: size,\n        style: valueOrDefault(options.fontStyle, globalDefaults.defaultFontStyle),\n        weight: null,\n        string: ''\n      };\n      font.string = toFontString(font);\n      return font;\n    },\n\n    /**\n     * Evaluates the given `inputs` sequentially and returns the first defined value.\n     * @param {Array} inputs - An array of values, falling back to the last value.\n     * @param {object} [context] - If defined and the current value is a function, the value\n     * is called with `context` as first argument and the result becomes the new input.\n     * @param {number} [index] - If defined and the current value is an array, the value\n     * at `index` become the new input.\n     * @since 2.7.0\n     */\n    resolve: function resolve(inputs, context, index) {\n      var i, ilen, value;\n\n      for (i = 0, ilen = inputs.length; i < ilen; ++i) {\n        value = inputs[i];\n\n        if (value === undefined) {\n          continue;\n        }\n\n        if (context !== undefined && typeof value === 'function') {\n          value = value(context);\n        }\n\n        if (index !== undefined && helpers_core.isArray(value)) {\n          value = value[index];\n        }\n\n        if (value !== undefined) {\n          return value;\n        }\n      }\n    }\n  };\n  var helpers$1 = helpers_core;\n  var easing = helpers_easing;\n  var canvas = helpers_canvas;\n  var options = helpers_options;\n  helpers$1.easing = easing;\n  helpers$1.canvas = canvas;\n  helpers$1.options = options;\n\n  function interpolate(start, view, model, ease) {\n    var keys = Object.keys(model);\n    var i, ilen, key, actual, origin, target, type, c0, c1;\n\n    for (i = 0, ilen = keys.length; i < ilen; ++i) {\n      key = keys[i];\n      target = model[key]; // if a value is added to the model after pivot() has been called, the view\n      // doesn't contain it, so let's initialize the view to the target value.\n\n      if (!view.hasOwnProperty(key)) {\n        view[key] = target;\n      }\n\n      actual = view[key];\n\n      if (actual === target || key[0] === '_') {\n        continue;\n      }\n\n      if (!start.hasOwnProperty(key)) {\n        start[key] = actual;\n      }\n\n      origin = start[key];\n      type = typeof target;\n\n      if (type === typeof origin) {\n        if (type === 'string') {\n          c0 = chartjsColor(origin);\n\n          if (c0.valid) {\n            c1 = chartjsColor(target);\n\n            if (c1.valid) {\n              view[key] = c1.mix(c0, ease).rgbString();\n              continue;\n            }\n          }\n        } else if (helpers$1.isFinite(origin) && helpers$1.isFinite(target)) {\n          view[key] = origin + (target - origin) * ease;\n          continue;\n        }\n      }\n\n      view[key] = target;\n    }\n  }\n\n  var Element = function Element(configuration) {\n    helpers$1.extend(this, configuration);\n    this.initialize.apply(this, arguments);\n  };\n\n  helpers$1.extend(Element.prototype, {\n    initialize: function initialize() {\n      this.hidden = false;\n    },\n    pivot: function pivot() {\n      var me = this;\n\n      if (!me._view) {\n        me._view = helpers$1.clone(me._model);\n      }\n\n      me._start = {};\n      return me;\n    },\n    transition: function transition(ease) {\n      var me = this;\n      var model = me._model;\n      var start = me._start;\n      var view = me._view; // No animation -> No Transition\n\n      if (!model || ease === 1) {\n        me._view = model;\n        me._start = null;\n        return me;\n      }\n\n      if (!view) {\n        view = me._view = {};\n      }\n\n      if (!start) {\n        start = me._start = {};\n      }\n\n      interpolate(start, view, model, ease);\n      return me;\n    },\n    tooltipPosition: function tooltipPosition() {\n      return {\n        x: this._model.x,\n        y: this._model.y\n      };\n    },\n    hasValue: function hasValue() {\n      return helpers$1.isNumber(this._model.x) && helpers$1.isNumber(this._model.y);\n    }\n  });\n  Element.extend = helpers$1.inherits;\n  var core_element = Element;\n  var exports$2 = core_element.extend({\n    chart: null,\n    // the animation associated chart instance\n    currentStep: 0,\n    // the current animation step\n    numSteps: 60,\n    // default number of steps\n    easing: '',\n    // the easing to use for this animation\n    render: null,\n    // render function used by the animation service\n    onAnimationProgress: null,\n    // user specified callback to fire on each step of the animation\n    onAnimationComplete: null // user specified callback to fire when the animation finishes\n\n  });\n  var core_animation = exports$2; // DEPRECATIONS\n\n  /**\n   * Provided for backward compatibility, use Chart.Animation instead\n   * @prop Chart.Animation#animationObject\n   * @deprecated since version 2.6.0\n   * @todo remove at version 3\n   */\n\n  Object.defineProperty(exports$2.prototype, 'animationObject', {\n    get: function get() {\n      return this;\n    }\n  });\n  /**\n   * Provided for backward compatibility, use Chart.Animation#chart instead\n   * @prop Chart.Animation#chartInstance\n   * @deprecated since version 2.6.0\n   * @todo remove at version 3\n   */\n\n  Object.defineProperty(exports$2.prototype, 'chartInstance', {\n    get: function get() {\n      return this.chart;\n    },\n    set: function set(value) {\n      this.chart = value;\n    }\n  });\n\n  core_defaults._set('global', {\n    animation: {\n      duration: 1000,\n      easing: 'easeOutQuart',\n      onProgress: helpers$1.noop,\n      onComplete: helpers$1.noop\n    }\n  });\n\n  var core_animations = {\n    animations: [],\n    request: null,\n\n    /**\n     * @param {Chart} chart - The chart to animate.\n     * @param {Chart.Animation} animation - The animation that we will animate.\n     * @param {number} duration - The animation duration in ms.\n     * @param {boolean} lazy - if true, the chart is not marked as animating to enable more responsive interactions\n     */\n    addAnimation: function addAnimation(chart, animation, duration, lazy) {\n      var animations = this.animations;\n      var i, ilen;\n      animation.chart = chart;\n      animation.startTime = Date.now();\n      animation.duration = duration;\n\n      if (!lazy) {\n        chart.animating = true;\n      }\n\n      for (i = 0, ilen = animations.length; i < ilen; ++i) {\n        if (animations[i].chart === chart) {\n          animations[i] = animation;\n          return;\n        }\n      }\n\n      animations.push(animation); // If there are no animations queued, manually kickstart a digest, for lack of a better word\n\n      if (animations.length === 1) {\n        this.requestAnimationFrame();\n      }\n    },\n    cancelAnimation: function cancelAnimation(chart) {\n      var index = helpers$1.findIndex(this.animations, function (animation) {\n        return animation.chart === chart;\n      });\n\n      if (index !== -1) {\n        this.animations.splice(index, 1);\n        chart.animating = false;\n      }\n    },\n    requestAnimationFrame: function requestAnimationFrame() {\n      var me = this;\n\n      if (me.request === null) {\n        // Skip animation frame requests until the active one is executed.\n        // This can happen when processing mouse events, e.g. 'mousemove'\n        // and 'mouseout' events will trigger multiple renders.\n        me.request = helpers$1.requestAnimFrame.call(window, function () {\n          me.request = null;\n          me.startDigest();\n        });\n      }\n    },\n\n    /**\n     * @private\n     */\n    startDigest: function startDigest() {\n      var me = this;\n      me.advance(); // Do we have more stuff to animate?\n\n      if (me.animations.length > 0) {\n        me.requestAnimationFrame();\n      }\n    },\n\n    /**\n     * @private\n     */\n    advance: function advance() {\n      var animations = this.animations;\n      var animation, chart, numSteps, nextStep;\n      var i = 0; // 1 animation per chart, so we are looping charts here\n\n      while (i < animations.length) {\n        animation = animations[i];\n        chart = animation.chart;\n        numSteps = animation.numSteps; // Make sure that currentStep starts at 1\n        // https://github.com/chartjs/Chart.js/issues/6104\n\n        nextStep = Math.floor((Date.now() - animation.startTime) / animation.duration * numSteps) + 1;\n        animation.currentStep = Math.min(nextStep, numSteps);\n        helpers$1.callback(animation.render, [chart, animation], chart);\n        helpers$1.callback(animation.onAnimationProgress, [animation], chart);\n\n        if (animation.currentStep >= numSteps) {\n          helpers$1.callback(animation.onAnimationComplete, [animation], chart);\n          chart.animating = false;\n          animations.splice(i, 1);\n        } else {\n          ++i;\n        }\n      }\n    }\n  };\n  var resolve = helpers$1.options.resolve;\n  var arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];\n  /**\n   * Hooks the array methods that add or remove values ('push', pop', 'shift', 'splice',\n   * 'unshift') and notify the listener AFTER the array has been altered. Listeners are\n   * called on the 'onData*' callbacks (e.g. onDataPush, etc.) with same arguments.\n   */\n\n  function listenArrayEvents(array, listener) {\n    if (array._chartjs) {\n      array._chartjs.listeners.push(listener);\n\n      return;\n    }\n\n    Object.defineProperty(array, '_chartjs', {\n      configurable: true,\n      enumerable: false,\n      value: {\n        listeners: [listener]\n      }\n    });\n    arrayEvents.forEach(function (key) {\n      var method = 'onData' + key.charAt(0).toUpperCase() + key.slice(1);\n      var base = array[key];\n      Object.defineProperty(array, key, {\n        configurable: true,\n        enumerable: false,\n        value: function value() {\n          var args = Array.prototype.slice.call(arguments);\n          var res = base.apply(this, args);\n          helpers$1.each(array._chartjs.listeners, function (object) {\n            if (typeof object[method] === 'function') {\n              object[method].apply(object, args);\n            }\n          });\n          return res;\n        }\n      });\n    });\n  }\n  /**\n   * Removes the given array event listener and cleanup extra attached properties (such as\n   * the _chartjs stub and overridden methods) if array doesn't have any more listeners.\n   */\n\n\n  function unlistenArrayEvents(array, listener) {\n    var stub = array._chartjs;\n\n    if (!stub) {\n      return;\n    }\n\n    var listeners = stub.listeners;\n    var index = listeners.indexOf(listener);\n\n    if (index !== -1) {\n      listeners.splice(index, 1);\n    }\n\n    if (listeners.length > 0) {\n      return;\n    }\n\n    arrayEvents.forEach(function (key) {\n      delete array[key];\n    });\n    delete array._chartjs;\n  } // Base class for all dataset controllers (line, bar, etc)\n\n\n  var DatasetController = function DatasetController(chart, datasetIndex) {\n    this.initialize(chart, datasetIndex);\n  };\n\n  helpers$1.extend(DatasetController.prototype, {\n    /**\n     * Element type used to generate a meta dataset (e.g. Chart.element.Line).\n     * @type {Chart.core.element}\n     */\n    datasetElementType: null,\n\n    /**\n     * Element type used to generate a meta data (e.g. Chart.element.Point).\n     * @type {Chart.core.element}\n     */\n    dataElementType: null,\n    initialize: function initialize(chart, datasetIndex) {\n      var me = this;\n      me.chart = chart;\n      me.index = datasetIndex;\n      me.linkScales();\n      me.addElements();\n    },\n    updateIndex: function updateIndex(datasetIndex) {\n      this.index = datasetIndex;\n    },\n    linkScales: function linkScales() {\n      var me = this;\n      var meta = me.getMeta();\n      var dataset = me.getDataset();\n\n      if (meta.xAxisID === null || !(meta.xAxisID in me.chart.scales)) {\n        meta.xAxisID = dataset.xAxisID || me.chart.options.scales.xAxes[0].id;\n      }\n\n      if (meta.yAxisID === null || !(meta.yAxisID in me.chart.scales)) {\n        meta.yAxisID = dataset.yAxisID || me.chart.options.scales.yAxes[0].id;\n      }\n    },\n    getDataset: function getDataset() {\n      return this.chart.data.datasets[this.index];\n    },\n    getMeta: function getMeta() {\n      return this.chart.getDatasetMeta(this.index);\n    },\n    getScaleForId: function getScaleForId(scaleID) {\n      return this.chart.scales[scaleID];\n    },\n\n    /**\n     * @private\n     */\n    _getValueScaleId: function _getValueScaleId() {\n      return this.getMeta().yAxisID;\n    },\n\n    /**\n     * @private\n     */\n    _getIndexScaleId: function _getIndexScaleId() {\n      return this.getMeta().xAxisID;\n    },\n\n    /**\n     * @private\n     */\n    _getValueScale: function _getValueScale() {\n      return this.getScaleForId(this._getValueScaleId());\n    },\n\n    /**\n     * @private\n     */\n    _getIndexScale: function _getIndexScale() {\n      return this.getScaleForId(this._getIndexScaleId());\n    },\n    reset: function reset() {\n      this.update(true);\n    },\n\n    /**\n     * @private\n     */\n    destroy: function destroy() {\n      if (this._data) {\n        unlistenArrayEvents(this._data, this);\n      }\n    },\n    createMetaDataset: function createMetaDataset() {\n      var me = this;\n      var type = me.datasetElementType;\n      return type && new type({\n        _chart: me.chart,\n        _datasetIndex: me.index\n      });\n    },\n    createMetaData: function createMetaData(index) {\n      var me = this;\n      var type = me.dataElementType;\n      return type && new type({\n        _chart: me.chart,\n        _datasetIndex: me.index,\n        _index: index\n      });\n    },\n    addElements: function addElements() {\n      var me = this;\n      var meta = me.getMeta();\n      var data = me.getDataset().data || [];\n      var metaData = meta.data;\n      var i, ilen;\n\n      for (i = 0, ilen = data.length; i < ilen; ++i) {\n        metaData[i] = metaData[i] || me.createMetaData(i);\n      }\n\n      meta.dataset = meta.dataset || me.createMetaDataset();\n    },\n    addElementAndReset: function addElementAndReset(index) {\n      var element = this.createMetaData(index);\n      this.getMeta().data.splice(index, 0, element);\n      this.updateElement(element, index, true);\n    },\n    buildOrUpdateElements: function buildOrUpdateElements() {\n      var me = this;\n      var dataset = me.getDataset();\n      var data = dataset.data || (dataset.data = []); // In order to correctly handle data addition/deletion animation (an thus simulate\n      // real-time charts), we need to monitor these data modifications and synchronize\n      // the internal meta data accordingly.\n\n      if (me._data !== data) {\n        if (me._data) {\n          // This case happens when the user replaced the data array instance.\n          unlistenArrayEvents(me._data, me);\n        }\n\n        if (data && Object.isExtensible(data)) {\n          listenArrayEvents(data, me);\n        }\n\n        me._data = data;\n      } // Re-sync meta data in case the user replaced the data array or if we missed\n      // any updates and so make sure that we handle number of datapoints changing.\n\n\n      me.resyncElements();\n    },\n    update: helpers$1.noop,\n    transition: function transition(easingValue) {\n      var meta = this.getMeta();\n      var elements = meta.data || [];\n      var ilen = elements.length;\n      var i = 0;\n\n      for (; i < ilen; ++i) {\n        elements[i].transition(easingValue);\n      }\n\n      if (meta.dataset) {\n        meta.dataset.transition(easingValue);\n      }\n    },\n    draw: function draw() {\n      var meta = this.getMeta();\n      var elements = meta.data || [];\n      var ilen = elements.length;\n      var i = 0;\n\n      if (meta.dataset) {\n        meta.dataset.draw();\n      }\n\n      for (; i < ilen; ++i) {\n        elements[i].draw();\n      }\n    },\n    removeHoverStyle: function removeHoverStyle(element) {\n      helpers$1.merge(element._model, element.$previousStyle || {});\n      delete element.$previousStyle;\n    },\n    setHoverStyle: function setHoverStyle(element) {\n      var dataset = this.chart.data.datasets[element._datasetIndex];\n      var index = element._index;\n      var custom = element.custom || {};\n      var model = element._model;\n      var getHoverColor = helpers$1.getHoverColor;\n      element.$previousStyle = {\n        backgroundColor: model.backgroundColor,\n        borderColor: model.borderColor,\n        borderWidth: model.borderWidth\n      };\n      model.backgroundColor = resolve([custom.hoverBackgroundColor, dataset.hoverBackgroundColor, getHoverColor(model.backgroundColor)], undefined, index);\n      model.borderColor = resolve([custom.hoverBorderColor, dataset.hoverBorderColor, getHoverColor(model.borderColor)], undefined, index);\n      model.borderWidth = resolve([custom.hoverBorderWidth, dataset.hoverBorderWidth, model.borderWidth], undefined, index);\n    },\n\n    /**\n     * @private\n     */\n    resyncElements: function resyncElements() {\n      var me = this;\n      var meta = me.getMeta();\n      var data = me.getDataset().data;\n      var numMeta = meta.data.length;\n      var numData = data.length;\n\n      if (numData < numMeta) {\n        meta.data.splice(numData, numMeta - numData);\n      } else if (numData > numMeta) {\n        me.insertElements(numMeta, numData - numMeta);\n      }\n    },\n\n    /**\n     * @private\n     */\n    insertElements: function insertElements(start, count) {\n      for (var i = 0; i < count; ++i) {\n        this.addElementAndReset(start + i);\n      }\n    },\n\n    /**\n     * @private\n     */\n    onDataPush: function onDataPush() {\n      var count = arguments.length;\n      this.insertElements(this.getDataset().data.length - count, count);\n    },\n\n    /**\n     * @private\n     */\n    onDataPop: function onDataPop() {\n      this.getMeta().data.pop();\n    },\n\n    /**\n     * @private\n     */\n    onDataShift: function onDataShift() {\n      this.getMeta().data.shift();\n    },\n\n    /**\n     * @private\n     */\n    onDataSplice: function onDataSplice(start, count) {\n      this.getMeta().data.splice(start, count);\n      this.insertElements(start, arguments.length - 2);\n    },\n\n    /**\n     * @private\n     */\n    onDataUnshift: function onDataUnshift() {\n      this.insertElements(0, arguments.length);\n    }\n  });\n  DatasetController.extend = helpers$1.inherits;\n  var core_datasetController = DatasetController;\n\n  core_defaults._set('global', {\n    elements: {\n      arc: {\n        backgroundColor: core_defaults.global.defaultColor,\n        borderColor: '#fff',\n        borderWidth: 2,\n        borderAlign: 'center'\n      }\n    }\n  });\n\n  var element_arc = core_element.extend({\n    inLabelRange: function inLabelRange(mouseX) {\n      var vm = this._view;\n\n      if (vm) {\n        return Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hoverRadius, 2);\n      }\n\n      return false;\n    },\n    inRange: function inRange(chartX, chartY) {\n      var vm = this._view;\n\n      if (vm) {\n        var pointRelativePosition = helpers$1.getAngleFromPoint(vm, {\n          x: chartX,\n          y: chartY\n        });\n        var angle = pointRelativePosition.angle;\n        var distance = pointRelativePosition.distance; // Sanitise angle range\n\n        var startAngle = vm.startAngle;\n        var endAngle = vm.endAngle;\n\n        while (endAngle < startAngle) {\n          endAngle += 2.0 * Math.PI;\n        }\n\n        while (angle > endAngle) {\n          angle -= 2.0 * Math.PI;\n        }\n\n        while (angle < startAngle) {\n          angle += 2.0 * Math.PI;\n        } // Check if within the range of the open/close angle\n\n\n        var betweenAngles = angle >= startAngle && angle <= endAngle;\n        var withinRadius = distance >= vm.innerRadius && distance <= vm.outerRadius;\n        return betweenAngles && withinRadius;\n      }\n\n      return false;\n    },\n    getCenterPoint: function getCenterPoint() {\n      var vm = this._view;\n      var halfAngle = (vm.startAngle + vm.endAngle) / 2;\n      var halfRadius = (vm.innerRadius + vm.outerRadius) / 2;\n      return {\n        x: vm.x + Math.cos(halfAngle) * halfRadius,\n        y: vm.y + Math.sin(halfAngle) * halfRadius\n      };\n    },\n    getArea: function getArea() {\n      var vm = this._view;\n      return Math.PI * ((vm.endAngle - vm.startAngle) / (2 * Math.PI)) * (Math.pow(vm.outerRadius, 2) - Math.pow(vm.innerRadius, 2));\n    },\n    tooltipPosition: function tooltipPosition() {\n      var vm = this._view;\n      var centreAngle = vm.startAngle + (vm.endAngle - vm.startAngle) / 2;\n      var rangeFromCentre = (vm.outerRadius - vm.innerRadius) / 2 + vm.innerRadius;\n      return {\n        x: vm.x + Math.cos(centreAngle) * rangeFromCentre,\n        y: vm.y + Math.sin(centreAngle) * rangeFromCentre\n      };\n    },\n    draw: function draw() {\n      var ctx = this._chart.ctx;\n      var vm = this._view;\n      var sA = vm.startAngle;\n      var eA = vm.endAngle;\n      var pixelMargin = vm.borderAlign === 'inner' ? 0.33 : 0;\n      var angleMargin;\n      ctx.save();\n      ctx.beginPath();\n      ctx.arc(vm.x, vm.y, Math.max(vm.outerRadius - pixelMargin, 0), sA, eA);\n      ctx.arc(vm.x, vm.y, vm.innerRadius, eA, sA, true);\n      ctx.closePath();\n      ctx.fillStyle = vm.backgroundColor;\n      ctx.fill();\n\n      if (vm.borderWidth) {\n        if (vm.borderAlign === 'inner') {\n          // Draw an inner border by cliping the arc and drawing a double-width border\n          // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n          ctx.beginPath();\n          angleMargin = pixelMargin / vm.outerRadius;\n          ctx.arc(vm.x, vm.y, vm.outerRadius, sA - angleMargin, eA + angleMargin);\n\n          if (vm.innerRadius > pixelMargin) {\n            angleMargin = pixelMargin / vm.innerRadius;\n            ctx.arc(vm.x, vm.y, vm.innerRadius - pixelMargin, eA + angleMargin, sA - angleMargin, true);\n          } else {\n            ctx.arc(vm.x, vm.y, pixelMargin, eA + Math.PI / 2, sA - Math.PI / 2);\n          }\n\n          ctx.closePath();\n          ctx.clip();\n          ctx.beginPath();\n          ctx.arc(vm.x, vm.y, vm.outerRadius, sA, eA);\n          ctx.arc(vm.x, vm.y, vm.innerRadius, eA, sA, true);\n          ctx.closePath();\n          ctx.lineWidth = vm.borderWidth * 2;\n          ctx.lineJoin = 'round';\n        } else {\n          ctx.lineWidth = vm.borderWidth;\n          ctx.lineJoin = 'bevel';\n        }\n\n        ctx.strokeStyle = vm.borderColor;\n        ctx.stroke();\n      }\n\n      ctx.restore();\n    }\n  });\n  var valueOrDefault$1 = helpers$1.valueOrDefault;\n  var defaultColor = core_defaults.global.defaultColor;\n\n  core_defaults._set('global', {\n    elements: {\n      line: {\n        tension: 0.4,\n        backgroundColor: defaultColor,\n        borderWidth: 3,\n        borderColor: defaultColor,\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        capBezierPoints: true,\n        fill: true // do we fill in the area between the line and its base axis\n\n      }\n    }\n  });\n\n  var element_line = core_element.extend({\n    draw: function draw() {\n      var me = this;\n      var vm = me._view;\n      var ctx = me._chart.ctx;\n      var spanGaps = vm.spanGaps;\n\n      var points = me._children.slice(); // clone array\n\n\n      var globalDefaults = core_defaults.global;\n      var globalOptionLineElements = globalDefaults.elements.line;\n      var lastDrawnIndex = -1;\n      var index, current, previous, currentVM; // If we are looping, adding the first point again\n\n      if (me._loop && points.length) {\n        points.push(points[0]);\n      }\n\n      ctx.save(); // Stroke Line Options\n\n      ctx.lineCap = vm.borderCapStyle || globalOptionLineElements.borderCapStyle; // IE 9 and 10 do not support line dash\n\n      if (ctx.setLineDash) {\n        ctx.setLineDash(vm.borderDash || globalOptionLineElements.borderDash);\n      }\n\n      ctx.lineDashOffset = valueOrDefault$1(vm.borderDashOffset, globalOptionLineElements.borderDashOffset);\n      ctx.lineJoin = vm.borderJoinStyle || globalOptionLineElements.borderJoinStyle;\n      ctx.lineWidth = valueOrDefault$1(vm.borderWidth, globalOptionLineElements.borderWidth);\n      ctx.strokeStyle = vm.borderColor || globalDefaults.defaultColor; // Stroke Line\n\n      ctx.beginPath();\n      lastDrawnIndex = -1;\n\n      for (index = 0; index < points.length; ++index) {\n        current = points[index];\n        previous = helpers$1.previousItem(points, index);\n        currentVM = current._view; // First point moves to it's starting position no matter what\n\n        if (index === 0) {\n          if (!currentVM.skip) {\n            ctx.moveTo(currentVM.x, currentVM.y);\n            lastDrawnIndex = index;\n          }\n        } else {\n          previous = lastDrawnIndex === -1 ? previous : points[lastDrawnIndex];\n\n          if (!currentVM.skip) {\n            if (lastDrawnIndex !== index - 1 && !spanGaps || lastDrawnIndex === -1) {\n              // There was a gap and this is the first point after the gap\n              ctx.moveTo(currentVM.x, currentVM.y);\n            } else {\n              // Line to next point\n              helpers$1.canvas.lineTo(ctx, previous._view, current._view);\n            }\n\n            lastDrawnIndex = index;\n          }\n        }\n      }\n\n      ctx.stroke();\n      ctx.restore();\n    }\n  });\n  var valueOrDefault$2 = helpers$1.valueOrDefault;\n  var defaultColor$1 = core_defaults.global.defaultColor;\n\n  core_defaults._set('global', {\n    elements: {\n      point: {\n        radius: 3,\n        pointStyle: 'circle',\n        backgroundColor: defaultColor$1,\n        borderColor: defaultColor$1,\n        borderWidth: 1,\n        // Hover\n        hitRadius: 1,\n        hoverRadius: 4,\n        hoverBorderWidth: 1\n      }\n    }\n  });\n\n  function xRange(mouseX) {\n    var vm = this._view;\n    return vm ? Math.abs(mouseX - vm.x) < vm.radius + vm.hitRadius : false;\n  }\n\n  function yRange(mouseY) {\n    var vm = this._view;\n    return vm ? Math.abs(mouseY - vm.y) < vm.radius + vm.hitRadius : false;\n  }\n\n  var element_point = core_element.extend({\n    inRange: function inRange(mouseX, mouseY) {\n      var vm = this._view;\n      return vm ? Math.pow(mouseX - vm.x, 2) + Math.pow(mouseY - vm.y, 2) < Math.pow(vm.hitRadius + vm.radius, 2) : false;\n    },\n    inLabelRange: xRange,\n    inXRange: xRange,\n    inYRange: yRange,\n    getCenterPoint: function getCenterPoint() {\n      var vm = this._view;\n      return {\n        x: vm.x,\n        y: vm.y\n      };\n    },\n    getArea: function getArea() {\n      return Math.PI * Math.pow(this._view.radius, 2);\n    },\n    tooltipPosition: function tooltipPosition() {\n      var vm = this._view;\n      return {\n        x: vm.x,\n        y: vm.y,\n        padding: vm.radius + vm.borderWidth\n      };\n    },\n    draw: function draw(chartArea) {\n      var vm = this._view;\n      var ctx = this._chart.ctx;\n      var pointStyle = vm.pointStyle;\n      var rotation = vm.rotation;\n      var radius = vm.radius;\n      var x = vm.x;\n      var y = vm.y;\n      var globalDefaults = core_defaults.global;\n      var defaultColor = globalDefaults.defaultColor; // eslint-disable-line no-shadow\n\n      if (vm.skip) {\n        return;\n      } // Clipping for Points.\n\n\n      if (chartArea === undefined || helpers$1.canvas._isPointInArea(vm, chartArea)) {\n        ctx.strokeStyle = vm.borderColor || defaultColor;\n        ctx.lineWidth = valueOrDefault$2(vm.borderWidth, globalDefaults.elements.point.borderWidth);\n        ctx.fillStyle = vm.backgroundColor || defaultColor;\n        helpers$1.canvas.drawPoint(ctx, pointStyle, radius, x, y, rotation);\n      }\n    }\n  });\n  var defaultColor$2 = core_defaults.global.defaultColor;\n\n  core_defaults._set('global', {\n    elements: {\n      rectangle: {\n        backgroundColor: defaultColor$2,\n        borderColor: defaultColor$2,\n        borderSkipped: 'bottom',\n        borderWidth: 0\n      }\n    }\n  });\n\n  function isVertical(vm) {\n    return vm && vm.width !== undefined;\n  }\n  /**\n   * Helper function to get the bounds of the bar regardless of the orientation\n   * @param bar {Chart.Element.Rectangle} the bar\n   * @return {Bounds} bounds of the bar\n   * @private\n   */\n\n\n  function getBarBounds(vm) {\n    var x1, x2, y1, y2, half;\n\n    if (isVertical(vm)) {\n      half = vm.width / 2;\n      x1 = vm.x - half;\n      x2 = vm.x + half;\n      y1 = Math.min(vm.y, vm.base);\n      y2 = Math.max(vm.y, vm.base);\n    } else {\n      half = vm.height / 2;\n      x1 = Math.min(vm.x, vm.base);\n      x2 = Math.max(vm.x, vm.base);\n      y1 = vm.y - half;\n      y2 = vm.y + half;\n    }\n\n    return {\n      left: x1,\n      top: y1,\n      right: x2,\n      bottom: y2\n    };\n  }\n\n  function swap(orig, v1, v2) {\n    return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n  }\n\n  function parseBorderSkipped(vm) {\n    var edge = vm.borderSkipped;\n    var res = {};\n\n    if (!edge) {\n      return res;\n    }\n\n    if (vm.horizontal) {\n      if (vm.base > vm.x) {\n        edge = swap(edge, 'left', 'right');\n      }\n    } else if (vm.base < vm.y) {\n      edge = swap(edge, 'bottom', 'top');\n    }\n\n    res[edge] = true;\n    return res;\n  }\n\n  function parseBorderWidth(vm, maxW, maxH) {\n    var value = vm.borderWidth;\n    var skip = parseBorderSkipped(vm);\n    var t, r, b, l;\n\n    if (helpers$1.isObject(value)) {\n      t = +value.top || 0;\n      r = +value.right || 0;\n      b = +value.bottom || 0;\n      l = +value.left || 0;\n    } else {\n      t = r = b = l = +value || 0;\n    }\n\n    return {\n      t: skip.top || t < 0 ? 0 : t > maxH ? maxH : t,\n      r: skip.right || r < 0 ? 0 : r > maxW ? maxW : r,\n      b: skip.bottom || b < 0 ? 0 : b > maxH ? maxH : b,\n      l: skip.left || l < 0 ? 0 : l > maxW ? maxW : l\n    };\n  }\n\n  function boundingRects(vm) {\n    var bounds = getBarBounds(vm);\n    var width = bounds.right - bounds.left;\n    var height = bounds.bottom - bounds.top;\n    var border = parseBorderWidth(vm, width / 2, height / 2);\n    return {\n      outer: {\n        x: bounds.left,\n        y: bounds.top,\n        w: width,\n        h: height\n      },\n      inner: {\n        x: bounds.left + border.l,\n        y: bounds.top + border.t,\n        w: width - border.l - border.r,\n        h: height - border.t - border.b\n      }\n    };\n  }\n\n  function _inRange(vm, x, y) {\n    var skipX = x === null;\n    var skipY = y === null;\n    var bounds = !vm || skipX && skipY ? false : getBarBounds(vm);\n    return bounds && (skipX || x >= bounds.left && x <= bounds.right) && (skipY || y >= bounds.top && y <= bounds.bottom);\n  }\n\n  var element_rectangle = core_element.extend({\n    draw: function draw() {\n      var ctx = this._chart.ctx;\n      var vm = this._view;\n      var rects = boundingRects(vm);\n      var outer = rects.outer;\n      var inner = rects.inner;\n      ctx.fillStyle = vm.backgroundColor;\n      ctx.fillRect(outer.x, outer.y, outer.w, outer.h);\n\n      if (outer.w === inner.w && outer.h === inner.h) {\n        return;\n      }\n\n      ctx.save();\n      ctx.beginPath();\n      ctx.rect(outer.x, outer.y, outer.w, outer.h);\n      ctx.clip();\n      ctx.fillStyle = vm.borderColor;\n      ctx.rect(inner.x, inner.y, inner.w, inner.h);\n      ctx.fill('evenodd');\n      ctx.restore();\n    },\n    height: function height() {\n      var vm = this._view;\n      return vm.base - vm.y;\n    },\n    inRange: function inRange(mouseX, mouseY) {\n      return _inRange(this._view, mouseX, mouseY);\n    },\n    inLabelRange: function inLabelRange(mouseX, mouseY) {\n      var vm = this._view;\n      return isVertical(vm) ? _inRange(vm, mouseX, null) : _inRange(vm, null, mouseY);\n    },\n    inXRange: function inXRange(mouseX) {\n      return _inRange(this._view, mouseX, null);\n    },\n    inYRange: function inYRange(mouseY) {\n      return _inRange(this._view, null, mouseY);\n    },\n    getCenterPoint: function getCenterPoint() {\n      var vm = this._view;\n      var x, y;\n\n      if (isVertical(vm)) {\n        x = vm.x;\n        y = (vm.y + vm.base) / 2;\n      } else {\n        x = (vm.x + vm.base) / 2;\n        y = vm.y;\n      }\n\n      return {\n        x: x,\n        y: y\n      };\n    },\n    getArea: function getArea() {\n      var vm = this._view;\n      return isVertical(vm) ? vm.width * Math.abs(vm.y - vm.base) : vm.height * Math.abs(vm.x - vm.base);\n    },\n    tooltipPosition: function tooltipPosition() {\n      var vm = this._view;\n      return {\n        x: vm.x,\n        y: vm.y\n      };\n    }\n  });\n  var elements = {};\n  var Arc = element_arc;\n  var Line = element_line;\n  var Point = element_point;\n  var Rectangle = element_rectangle;\n  elements.Arc = Arc;\n  elements.Line = Line;\n  elements.Point = Point;\n  elements.Rectangle = Rectangle;\n  var resolve$1 = helpers$1.options.resolve;\n\n  core_defaults._set('bar', {\n    hover: {\n      mode: 'label'\n    },\n    scales: {\n      xAxes: [{\n        type: 'category',\n        categoryPercentage: 0.8,\n        barPercentage: 0.9,\n        offset: true,\n        gridLines: {\n          offsetGridLines: true\n        }\n      }],\n      yAxes: [{\n        type: 'linear'\n      }]\n    }\n  });\n  /**\n   * Computes the \"optimal\" sample size to maintain bars equally sized while preventing overlap.\n   * @private\n   */\n\n\n  function computeMinSampleSize(scale, pixels) {\n    var min = scale.isHorizontal() ? scale.width : scale.height;\n    var ticks = scale.getTicks();\n    var prev, curr, i, ilen;\n\n    for (i = 1, ilen = pixels.length; i < ilen; ++i) {\n      min = Math.min(min, Math.abs(pixels[i] - pixels[i - 1]));\n    }\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      curr = scale.getPixelForTick(i);\n      min = i > 0 ? Math.min(min, curr - prev) : min;\n      prev = curr;\n    }\n\n    return min;\n  }\n  /**\n   * Computes an \"ideal\" category based on the absolute bar thickness or, if undefined or null,\n   * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This\n   * mode currently always generates bars equally sized (until we introduce scriptable options?).\n   * @private\n   */\n\n\n  function computeFitCategoryTraits(index, ruler, options) {\n    var thickness = options.barThickness;\n    var count = ruler.stackCount;\n    var curr = ruler.pixels[index];\n    var size, ratio;\n\n    if (helpers$1.isNullOrUndef(thickness)) {\n      size = ruler.min * options.categoryPercentage;\n      ratio = options.barPercentage;\n    } else {\n      // When bar thickness is enforced, category and bar percentages are ignored.\n      // Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')\n      // and deprecate barPercentage since this value is ignored when thickness is absolute.\n      size = thickness * count;\n      ratio = 1;\n    }\n\n    return {\n      chunk: size / count,\n      ratio: ratio,\n      start: curr - size / 2\n    };\n  }\n  /**\n   * Computes an \"optimal\" category that globally arranges bars side by side (no gap when\n   * percentage options are 1), based on the previous and following categories. This mode\n   * generates bars with different widths when data are not evenly spaced.\n   * @private\n   */\n\n\n  function computeFlexCategoryTraits(index, ruler, options) {\n    var pixels = ruler.pixels;\n    var curr = pixels[index];\n    var prev = index > 0 ? pixels[index - 1] : null;\n    var next = index < pixels.length - 1 ? pixels[index + 1] : null;\n    var percent = options.categoryPercentage;\n    var start, size;\n\n    if (prev === null) {\n      // first data: its size is double based on the next point or,\n      // if it's also the last data, we use the scale size.\n      prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n    }\n\n    if (next === null) {\n      // last data: its size is also double based on the previous point.\n      next = curr + curr - prev;\n    }\n\n    start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n    size = Math.abs(next - prev) / 2 * percent;\n    return {\n      chunk: size / ruler.stackCount,\n      ratio: options.barPercentage,\n      start: start\n    };\n  }\n\n  var controller_bar = core_datasetController.extend({\n    dataElementType: elements.Rectangle,\n    initialize: function initialize() {\n      var me = this;\n      var meta;\n      core_datasetController.prototype.initialize.apply(me, arguments);\n      meta = me.getMeta();\n      meta.stack = me.getDataset().stack;\n      meta.bar = true;\n    },\n    update: function update(reset) {\n      var me = this;\n      var rects = me.getMeta().data;\n      var i, ilen;\n      me._ruler = me.getRuler();\n\n      for (i = 0, ilen = rects.length; i < ilen; ++i) {\n        me.updateElement(rects[i], i, reset);\n      }\n    },\n    updateElement: function updateElement(rectangle, index, reset) {\n      var me = this;\n      var meta = me.getMeta();\n      var dataset = me.getDataset();\n\n      var options = me._resolveElementOptions(rectangle, index);\n\n      rectangle._xScale = me.getScaleForId(meta.xAxisID);\n      rectangle._yScale = me.getScaleForId(meta.yAxisID);\n      rectangle._datasetIndex = me.index;\n      rectangle._index = index;\n      rectangle._model = {\n        backgroundColor: options.backgroundColor,\n        borderColor: options.borderColor,\n        borderSkipped: options.borderSkipped,\n        borderWidth: options.borderWidth,\n        datasetLabel: dataset.label,\n        label: me.chart.data.labels[index]\n      };\n\n      me._updateElementGeometry(rectangle, index, reset);\n\n      rectangle.pivot();\n    },\n\n    /**\n     * @private\n     */\n    _updateElementGeometry: function _updateElementGeometry(rectangle, index, reset) {\n      var me = this;\n      var model = rectangle._model;\n\n      var vscale = me._getValueScale();\n\n      var base = vscale.getBasePixel();\n      var horizontal = vscale.isHorizontal();\n      var ruler = me._ruler || me.getRuler();\n      var vpixels = me.calculateBarValuePixels(me.index, index);\n      var ipixels = me.calculateBarIndexPixels(me.index, index, ruler);\n      model.horizontal = horizontal;\n      model.base = reset ? base : vpixels.base;\n      model.x = horizontal ? reset ? base : vpixels.head : ipixels.center;\n      model.y = horizontal ? ipixels.center : reset ? base : vpixels.head;\n      model.height = horizontal ? ipixels.size : undefined;\n      model.width = horizontal ? undefined : ipixels.size;\n    },\n\n    /**\n     * Returns the stacks based on groups and bar visibility.\n     * @param {number} [last] - The dataset index\n     * @returns {string[]} The list of stack IDs\n     * @private\n     */\n    _getStacks: function _getStacks(last) {\n      var me = this;\n      var chart = me.chart;\n\n      var scale = me._getIndexScale();\n\n      var stacked = scale.options.stacked;\n      var ilen = last === undefined ? chart.data.datasets.length : last + 1;\n      var stacks = [];\n      var i, meta;\n\n      for (i = 0; i < ilen; ++i) {\n        meta = chart.getDatasetMeta(i);\n\n        if (meta.bar && chart.isDatasetVisible(i) && (stacked === false || stacked === true && stacks.indexOf(meta.stack) === -1 || stacked === undefined && (meta.stack === undefined || stacks.indexOf(meta.stack) === -1))) {\n          stacks.push(meta.stack);\n        }\n      }\n\n      return stacks;\n    },\n\n    /**\n     * Returns the effective number of stacks based on groups and bar visibility.\n     * @private\n     */\n    getStackCount: function getStackCount() {\n      return this._getStacks().length;\n    },\n\n    /**\n     * Returns the stack index for the given dataset based on groups and bar visibility.\n     * @param {number} [datasetIndex] - The dataset index\n     * @param {string} [name] - The stack name to find\n     * @returns {number} The stack index\n     * @private\n     */\n    getStackIndex: function getStackIndex(datasetIndex, name) {\n      var stacks = this._getStacks(datasetIndex);\n\n      var index = name !== undefined ? stacks.indexOf(name) : -1; // indexOf returns -1 if element is not present\n\n      return index === -1 ? stacks.length - 1 : index;\n    },\n\n    /**\n     * @private\n     */\n    getRuler: function getRuler() {\n      var me = this;\n\n      var scale = me._getIndexScale();\n\n      var stackCount = me.getStackCount();\n      var datasetIndex = me.index;\n      var isHorizontal = scale.isHorizontal();\n      var start = isHorizontal ? scale.left : scale.top;\n      var end = start + (isHorizontal ? scale.width : scale.height);\n      var pixels = [];\n      var i, ilen, min;\n\n      for (i = 0, ilen = me.getMeta().data.length; i < ilen; ++i) {\n        pixels.push(scale.getPixelForValue(null, i, datasetIndex));\n      }\n\n      min = helpers$1.isNullOrUndef(scale.options.barThickness) ? computeMinSampleSize(scale, pixels) : -1;\n      return {\n        min: min,\n        pixels: pixels,\n        start: start,\n        end: end,\n        stackCount: stackCount,\n        scale: scale\n      };\n    },\n\n    /**\n     * Note: pixel values are not clamped to the scale area.\n     * @private\n     */\n    calculateBarValuePixels: function calculateBarValuePixels(datasetIndex, index) {\n      var me = this;\n      var chart = me.chart;\n      var meta = me.getMeta();\n\n      var scale = me._getValueScale();\n\n      var isHorizontal = scale.isHorizontal();\n      var datasets = chart.data.datasets;\n      var value = +scale.getRightValue(datasets[datasetIndex].data[index]);\n      var minBarLength = scale.options.minBarLength;\n      var stacked = scale.options.stacked;\n      var stack = meta.stack;\n      var start = 0;\n      var i, imeta, ivalue, base, head, size;\n\n      if (stacked || stacked === undefined && stack !== undefined) {\n        for (i = 0; i < datasetIndex; ++i) {\n          imeta = chart.getDatasetMeta(i);\n\n          if (imeta.bar && imeta.stack === stack && imeta.controller._getValueScaleId() === scale.id && chart.isDatasetVisible(i)) {\n            ivalue = +scale.getRightValue(datasets[i].data[index]);\n\n            if (value < 0 && ivalue < 0 || value >= 0 && ivalue > 0) {\n              start += ivalue;\n            }\n          }\n        }\n      }\n\n      base = scale.getPixelForValue(start);\n      head = scale.getPixelForValue(start + value);\n      size = head - base;\n\n      if (minBarLength !== undefined && Math.abs(size) < minBarLength) {\n        size = minBarLength;\n\n        if (value >= 0 && !isHorizontal || value < 0 && isHorizontal) {\n          head = base - minBarLength;\n        } else {\n          head = base + minBarLength;\n        }\n      }\n\n      return {\n        size: size,\n        base: base,\n        head: head,\n        center: head + size / 2\n      };\n    },\n\n    /**\n     * @private\n     */\n    calculateBarIndexPixels: function calculateBarIndexPixels(datasetIndex, index, ruler) {\n      var me = this;\n      var options = ruler.scale.options;\n      var range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options) : computeFitCategoryTraits(index, ruler, options);\n      var stackIndex = me.getStackIndex(datasetIndex, me.getMeta().stack);\n      var center = range.start + range.chunk * stackIndex + range.chunk / 2;\n      var size = Math.min(helpers$1.valueOrDefault(options.maxBarThickness, Infinity), range.chunk * range.ratio);\n      return {\n        base: center - size / 2,\n        head: center + size / 2,\n        center: center,\n        size: size\n      };\n    },\n    draw: function draw() {\n      var me = this;\n      var chart = me.chart;\n\n      var scale = me._getValueScale();\n\n      var rects = me.getMeta().data;\n      var dataset = me.getDataset();\n      var ilen = rects.length;\n      var i = 0;\n      helpers$1.canvas.clipArea(chart.ctx, chart.chartArea);\n\n      for (; i < ilen; ++i) {\n        if (!isNaN(scale.getRightValue(dataset.data[i]))) {\n          rects[i].draw();\n        }\n      }\n\n      helpers$1.canvas.unclipArea(chart.ctx);\n    },\n\n    /**\n     * @private\n     */\n    _resolveElementOptions: function _resolveElementOptions(rectangle, index) {\n      var me = this;\n      var chart = me.chart;\n      var datasets = chart.data.datasets;\n      var dataset = datasets[me.index];\n      var custom = rectangle.custom || {};\n      var options = chart.options.elements.rectangle;\n      var values = {};\n      var i, ilen, key; // Scriptable options\n\n      var context = {\n        chart: chart,\n        dataIndex: index,\n        dataset: dataset,\n        datasetIndex: me.index\n      };\n      var keys = ['backgroundColor', 'borderColor', 'borderSkipped', 'borderWidth'];\n\n      for (i = 0, ilen = keys.length; i < ilen; ++i) {\n        key = keys[i];\n        values[key] = resolve$1([custom[key], dataset[key], options[key]], context, index);\n      }\n\n      return values;\n    }\n  });\n  var valueOrDefault$3 = helpers$1.valueOrDefault;\n  var resolve$2 = helpers$1.options.resolve;\n\n  core_defaults._set('bubble', {\n    hover: {\n      mode: 'single'\n    },\n    scales: {\n      xAxes: [{\n        type: 'linear',\n        // bubble should probably use a linear scale by default\n        position: 'bottom',\n        id: 'x-axis-0' // need an ID so datasets can reference the scale\n\n      }],\n      yAxes: [{\n        type: 'linear',\n        position: 'left',\n        id: 'y-axis-0'\n      }]\n    },\n    tooltips: {\n      callbacks: {\n        title: function title() {\n          // Title doesn't make sense for scatter since we format the data as a point\n          return '';\n        },\n        label: function label(item, data) {\n          var datasetLabel = data.datasets[item.datasetIndex].label || '';\n          var dataPoint = data.datasets[item.datasetIndex].data[item.index];\n          return datasetLabel + ': (' + item.xLabel + ', ' + item.yLabel + ', ' + dataPoint.r + ')';\n        }\n      }\n    }\n  });\n\n  var controller_bubble = core_datasetController.extend({\n    /**\n     * @protected\n     */\n    dataElementType: elements.Point,\n\n    /**\n     * @protected\n     */\n    update: function update(reset) {\n      var me = this;\n      var meta = me.getMeta();\n      var points = meta.data; // Update Points\n\n      helpers$1.each(points, function (point, index) {\n        me.updateElement(point, index, reset);\n      });\n    },\n\n    /**\n     * @protected\n     */\n    updateElement: function updateElement(point, index, reset) {\n      var me = this;\n      var meta = me.getMeta();\n      var custom = point.custom || {};\n      var xScale = me.getScaleForId(meta.xAxisID);\n      var yScale = me.getScaleForId(meta.yAxisID);\n\n      var options = me._resolveElementOptions(point, index);\n\n      var data = me.getDataset().data[index];\n      var dsIndex = me.index;\n      var x = reset ? xScale.getPixelForDecimal(0.5) : xScale.getPixelForValue(typeof data === 'object' ? data : NaN, index, dsIndex);\n      var y = reset ? yScale.getBasePixel() : yScale.getPixelForValue(data, index, dsIndex);\n      point._xScale = xScale;\n      point._yScale = yScale;\n      point._options = options;\n      point._datasetIndex = dsIndex;\n      point._index = index;\n      point._model = {\n        backgroundColor: options.backgroundColor,\n        borderColor: options.borderColor,\n        borderWidth: options.borderWidth,\n        hitRadius: options.hitRadius,\n        pointStyle: options.pointStyle,\n        rotation: options.rotation,\n        radius: reset ? 0 : options.radius,\n        skip: custom.skip || isNaN(x) || isNaN(y),\n        x: x,\n        y: y\n      };\n      point.pivot();\n    },\n\n    /**\n     * @protected\n     */\n    setHoverStyle: function setHoverStyle(point) {\n      var model = point._model;\n      var options = point._options;\n      var getHoverColor = helpers$1.getHoverColor;\n      point.$previousStyle = {\n        backgroundColor: model.backgroundColor,\n        borderColor: model.borderColor,\n        borderWidth: model.borderWidth,\n        radius: model.radius\n      };\n      model.backgroundColor = valueOrDefault$3(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n      model.borderColor = valueOrDefault$3(options.hoverBorderColor, getHoverColor(options.borderColor));\n      model.borderWidth = valueOrDefault$3(options.hoverBorderWidth, options.borderWidth);\n      model.radius = options.radius + options.hoverRadius;\n    },\n\n    /**\n     * @private\n     */\n    _resolveElementOptions: function _resolveElementOptions(point, index) {\n      var me = this;\n      var chart = me.chart;\n      var datasets = chart.data.datasets;\n      var dataset = datasets[me.index];\n      var custom = point.custom || {};\n      var options = chart.options.elements.point;\n      var data = dataset.data[index];\n      var values = {};\n      var i, ilen, key; // Scriptable options\n\n      var context = {\n        chart: chart,\n        dataIndex: index,\n        dataset: dataset,\n        datasetIndex: me.index\n      };\n      var keys = ['backgroundColor', 'borderColor', 'borderWidth', 'hoverBackgroundColor', 'hoverBorderColor', 'hoverBorderWidth', 'hoverRadius', 'hitRadius', 'pointStyle', 'rotation'];\n\n      for (i = 0, ilen = keys.length; i < ilen; ++i) {\n        key = keys[i];\n        values[key] = resolve$2([custom[key], dataset[key], options[key]], context, index);\n      } // Custom radius resolution\n\n\n      values.radius = resolve$2([custom.radius, data ? data.r : undefined, dataset.radius, options.radius], context, index);\n      return values;\n    }\n  });\n  var resolve$3 = helpers$1.options.resolve;\n  var valueOrDefault$4 = helpers$1.valueOrDefault;\n\n  core_defaults._set('doughnut', {\n    animation: {\n      // Boolean - Whether we animate the rotation of the Doughnut\n      animateRotate: true,\n      // Boolean - Whether we animate scaling the Doughnut from the centre\n      animateScale: false\n    },\n    hover: {\n      mode: 'single'\n    },\n    legendCallback: function legendCallback(chart) {\n      var text = [];\n      text.push('<ul class=\"' + chart.id + '-legend\">');\n      var data = chart.data;\n      var datasets = data.datasets;\n      var labels = data.labels;\n\n      if (datasets.length) {\n        for (var i = 0; i < datasets[0].data.length; ++i) {\n          text.push('<li><span style=\"background-color:' + datasets[0].backgroundColor[i] + '\"></span>');\n\n          if (labels[i]) {\n            text.push(labels[i]);\n          }\n\n          text.push('</li>');\n        }\n      }\n\n      text.push('</ul>');\n      return text.join('');\n    },\n    legend: {\n      labels: {\n        generateLabels: function generateLabels(chart) {\n          var data = chart.data;\n\n          if (data.labels.length && data.datasets.length) {\n            return data.labels.map(function (label, i) {\n              var meta = chart.getDatasetMeta(0);\n              var ds = data.datasets[0];\n              var arc = meta.data[i];\n              var custom = arc && arc.custom || {};\n              var arcOpts = chart.options.elements.arc;\n              var fill = resolve$3([custom.backgroundColor, ds.backgroundColor, arcOpts.backgroundColor], undefined, i);\n              var stroke = resolve$3([custom.borderColor, ds.borderColor, arcOpts.borderColor], undefined, i);\n              var bw = resolve$3([custom.borderWidth, ds.borderWidth, arcOpts.borderWidth], undefined, i);\n              return {\n                text: label,\n                fillStyle: fill,\n                strokeStyle: stroke,\n                lineWidth: bw,\n                hidden: isNaN(ds.data[i]) || meta.data[i].hidden,\n                // Extra data used for toggling the correct item\n                index: i\n              };\n            });\n          }\n\n          return [];\n        }\n      },\n      onClick: function onClick(e, legendItem) {\n        var index = legendItem.index;\n        var chart = this.chart;\n        var i, ilen, meta;\n\n        for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {\n          meta = chart.getDatasetMeta(i); // toggle visibility of index if exists\n\n          if (meta.data[index]) {\n            meta.data[index].hidden = !meta.data[index].hidden;\n          }\n        }\n\n        chart.update();\n      }\n    },\n    // The percentage of the chart that we cut out of the middle.\n    cutoutPercentage: 50,\n    // The rotation of the chart, where the first data arc begins.\n    rotation: Math.PI * -0.5,\n    // The total circumference of the chart.\n    circumference: Math.PI * 2.0,\n    // Need to override these to give a nice default\n    tooltips: {\n      callbacks: {\n        title: function title() {\n          return '';\n        },\n        label: function label(tooltipItem, data) {\n          var dataLabel = data.labels[tooltipItem.index];\n          var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\n\n          if (helpers$1.isArray(dataLabel)) {\n            // show value on first line of multiline label\n            // need to clone because we are changing the value\n            dataLabel = dataLabel.slice();\n            dataLabel[0] += value;\n          } else {\n            dataLabel += value;\n          }\n\n          return dataLabel;\n        }\n      }\n    }\n  });\n\n  var controller_doughnut = core_datasetController.extend({\n    dataElementType: elements.Arc,\n    linkScales: helpers$1.noop,\n    // Get index of the dataset in relation to the visible datasets. This allows determining the inner and outer radius correctly\n    getRingIndex: function getRingIndex(datasetIndex) {\n      var ringIndex = 0;\n\n      for (var j = 0; j < datasetIndex; ++j) {\n        if (this.chart.isDatasetVisible(j)) {\n          ++ringIndex;\n        }\n      }\n\n      return ringIndex;\n    },\n    update: function update(reset) {\n      var me = this;\n      var chart = me.chart;\n      var chartArea = chart.chartArea;\n      var opts = chart.options;\n      var availableWidth = chartArea.right - chartArea.left;\n      var availableHeight = chartArea.bottom - chartArea.top;\n      var minSize = Math.min(availableWidth, availableHeight);\n      var offset = {\n        x: 0,\n        y: 0\n      };\n      var meta = me.getMeta();\n      var arcs = meta.data;\n      var cutoutPercentage = opts.cutoutPercentage;\n      var circumference = opts.circumference;\n\n      var chartWeight = me._getRingWeight(me.index);\n\n      var i, ilen; // If the chart's circumference isn't a full circle, calculate minSize as a ratio of the width/height of the arc\n\n      if (circumference < Math.PI * 2.0) {\n        var startAngle = opts.rotation % (Math.PI * 2.0);\n        startAngle += Math.PI * 2.0 * (startAngle >= Math.PI ? -1 : startAngle < -Math.PI ? 1 : 0);\n        var endAngle = startAngle + circumference;\n        var start = {\n          x: Math.cos(startAngle),\n          y: Math.sin(startAngle)\n        };\n        var end = {\n          x: Math.cos(endAngle),\n          y: Math.sin(endAngle)\n        };\n        var contains0 = startAngle <= 0 && endAngle >= 0 || startAngle <= Math.PI * 2.0 && Math.PI * 2.0 <= endAngle;\n        var contains90 = startAngle <= Math.PI * 0.5 && Math.PI * 0.5 <= endAngle || startAngle <= Math.PI * 2.5 && Math.PI * 2.5 <= endAngle;\n        var contains180 = startAngle <= -Math.PI && -Math.PI <= endAngle || startAngle <= Math.PI && Math.PI <= endAngle;\n        var contains270 = startAngle <= -Math.PI * 0.5 && -Math.PI * 0.5 <= endAngle || startAngle <= Math.PI * 1.5 && Math.PI * 1.5 <= endAngle;\n        var cutout = cutoutPercentage / 100.0;\n        var min = {\n          x: contains180 ? -1 : Math.min(start.x * (start.x < 0 ? 1 : cutout), end.x * (end.x < 0 ? 1 : cutout)),\n          y: contains270 ? -1 : Math.min(start.y * (start.y < 0 ? 1 : cutout), end.y * (end.y < 0 ? 1 : cutout))\n        };\n        var max = {\n          x: contains0 ? 1 : Math.max(start.x * (start.x > 0 ? 1 : cutout), end.x * (end.x > 0 ? 1 : cutout)),\n          y: contains90 ? 1 : Math.max(start.y * (start.y > 0 ? 1 : cutout), end.y * (end.y > 0 ? 1 : cutout))\n        };\n        var size = {\n          width: (max.x - min.x) * 0.5,\n          height: (max.y - min.y) * 0.5\n        };\n        minSize = Math.min(availableWidth / size.width, availableHeight / size.height);\n        offset = {\n          x: (max.x + min.x) * -0.5,\n          y: (max.y + min.y) * -0.5\n        };\n      }\n\n      for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n        arcs[i]._options = me._resolveElementOptions(arcs[i], i);\n      }\n\n      chart.borderWidth = me.getMaxBorderWidth();\n      chart.outerRadius = Math.max((minSize - chart.borderWidth) / 2, 0);\n      chart.innerRadius = Math.max(cutoutPercentage ? chart.outerRadius / 100 * cutoutPercentage : 0, 0);\n      chart.radiusLength = (chart.outerRadius - chart.innerRadius) / (me._getVisibleDatasetWeightTotal() || 1);\n      chart.offsetX = offset.x * chart.outerRadius;\n      chart.offsetY = offset.y * chart.outerRadius;\n      meta.total = me.calculateTotal();\n      me.outerRadius = chart.outerRadius - chart.radiusLength * me._getRingWeightOffset(me.index);\n      me.innerRadius = Math.max(me.outerRadius - chart.radiusLength * chartWeight, 0);\n\n      for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n        me.updateElement(arcs[i], i, reset);\n      }\n    },\n    updateElement: function updateElement(arc, index, reset) {\n      var me = this;\n      var chart = me.chart;\n      var chartArea = chart.chartArea;\n      var opts = chart.options;\n      var animationOpts = opts.animation;\n      var centerX = (chartArea.left + chartArea.right) / 2;\n      var centerY = (chartArea.top + chartArea.bottom) / 2;\n      var startAngle = opts.rotation; // non reset case handled later\n\n      var endAngle = opts.rotation; // non reset case handled later\n\n      var dataset = me.getDataset();\n      var circumference = reset && animationOpts.animateRotate ? 0 : arc.hidden ? 0 : me.calculateCircumference(dataset.data[index]) * (opts.circumference / (2.0 * Math.PI));\n      var innerRadius = reset && animationOpts.animateScale ? 0 : me.innerRadius;\n      var outerRadius = reset && animationOpts.animateScale ? 0 : me.outerRadius;\n      var options = arc._options || {};\n      helpers$1.extend(arc, {\n        // Utility\n        _datasetIndex: me.index,\n        _index: index,\n        // Desired view properties\n        _model: {\n          backgroundColor: options.backgroundColor,\n          borderColor: options.borderColor,\n          borderWidth: options.borderWidth,\n          borderAlign: options.borderAlign,\n          x: centerX + chart.offsetX,\n          y: centerY + chart.offsetY,\n          startAngle: startAngle,\n          endAngle: endAngle,\n          circumference: circumference,\n          outerRadius: outerRadius,\n          innerRadius: innerRadius,\n          label: helpers$1.valueAtIndexOrDefault(dataset.label, index, chart.data.labels[index])\n        }\n      });\n      var model = arc._model; // Set correct angles if not resetting\n\n      if (!reset || !animationOpts.animateRotate) {\n        if (index === 0) {\n          model.startAngle = opts.rotation;\n        } else {\n          model.startAngle = me.getMeta().data[index - 1]._model.endAngle;\n        }\n\n        model.endAngle = model.startAngle + model.circumference;\n      }\n\n      arc.pivot();\n    },\n    calculateTotal: function calculateTotal() {\n      var dataset = this.getDataset();\n      var meta = this.getMeta();\n      var total = 0;\n      var value;\n      helpers$1.each(meta.data, function (element, index) {\n        value = dataset.data[index];\n\n        if (!isNaN(value) && !element.hidden) {\n          total += Math.abs(value);\n        }\n      });\n      /* if (total === 0) {\n      \ttotal = NaN;\n      }*/\n\n      return total;\n    },\n    calculateCircumference: function calculateCircumference(value) {\n      var total = this.getMeta().total;\n\n      if (total > 0 && !isNaN(value)) {\n        return Math.PI * 2.0 * (Math.abs(value) / total);\n      }\n\n      return 0;\n    },\n    // gets the max border or hover width to properly scale pie charts\n    getMaxBorderWidth: function getMaxBorderWidth(arcs) {\n      var me = this;\n      var max = 0;\n      var chart = me.chart;\n      var i, ilen, meta, arc, controller, options, borderWidth, hoverWidth;\n\n      if (!arcs) {\n        // Find the outmost visible dataset\n        for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n          if (chart.isDatasetVisible(i)) {\n            meta = chart.getDatasetMeta(i);\n            arcs = meta.data;\n\n            if (i !== me.index) {\n              controller = meta.controller;\n            }\n\n            break;\n          }\n        }\n      }\n\n      if (!arcs) {\n        return 0;\n      }\n\n      for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n        arc = arcs[i];\n        options = controller ? controller._resolveElementOptions(arc, i) : arc._options;\n\n        if (options.borderAlign !== 'inner') {\n          borderWidth = options.borderWidth;\n          hoverWidth = options.hoverBorderWidth;\n          max = borderWidth > max ? borderWidth : max;\n          max = hoverWidth > max ? hoverWidth : max;\n        }\n      }\n\n      return max;\n    },\n\n    /**\n     * @protected\n     */\n    setHoverStyle: function setHoverStyle(arc) {\n      var model = arc._model;\n      var options = arc._options;\n      var getHoverColor = helpers$1.getHoverColor;\n      arc.$previousStyle = {\n        backgroundColor: model.backgroundColor,\n        borderColor: model.borderColor,\n        borderWidth: model.borderWidth\n      };\n      model.backgroundColor = valueOrDefault$4(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n      model.borderColor = valueOrDefault$4(options.hoverBorderColor, getHoverColor(options.borderColor));\n      model.borderWidth = valueOrDefault$4(options.hoverBorderWidth, options.borderWidth);\n    },\n\n    /**\n     * @private\n     */\n    _resolveElementOptions: function _resolveElementOptions(arc, index) {\n      var me = this;\n      var chart = me.chart;\n      var dataset = me.getDataset();\n      var custom = arc.custom || {};\n      var options = chart.options.elements.arc;\n      var values = {};\n      var i, ilen, key; // Scriptable options\n\n      var context = {\n        chart: chart,\n        dataIndex: index,\n        dataset: dataset,\n        datasetIndex: me.index\n      };\n      var keys = ['backgroundColor', 'borderColor', 'borderWidth', 'borderAlign', 'hoverBackgroundColor', 'hoverBorderColor', 'hoverBorderWidth'];\n\n      for (i = 0, ilen = keys.length; i < ilen; ++i) {\n        key = keys[i];\n        values[key] = resolve$3([custom[key], dataset[key], options[key]], context, index);\n      }\n\n      return values;\n    },\n\n    /**\n     * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly\n     * @private\n     */\n    _getRingWeightOffset: function _getRingWeightOffset(datasetIndex) {\n      var ringWeightOffset = 0;\n\n      for (var i = 0; i < datasetIndex; ++i) {\n        if (this.chart.isDatasetVisible(i)) {\n          ringWeightOffset += this._getRingWeight(i);\n        }\n      }\n\n      return ringWeightOffset;\n    },\n\n    /**\n     * @private\n     */\n    _getRingWeight: function _getRingWeight(dataSetIndex) {\n      return Math.max(valueOrDefault$4(this.chart.data.datasets[dataSetIndex].weight, 1), 0);\n    },\n\n    /**\n     * Returns the sum of all visibile data set weights.  This value can be 0.\n     * @private\n     */\n    _getVisibleDatasetWeightTotal: function _getVisibleDatasetWeightTotal() {\n      return this._getRingWeightOffset(this.chart.data.datasets.length);\n    }\n  });\n\n  core_defaults._set('horizontalBar', {\n    hover: {\n      mode: 'index',\n      axis: 'y'\n    },\n    scales: {\n      xAxes: [{\n        type: 'linear',\n        position: 'bottom'\n      }],\n      yAxes: [{\n        type: 'category',\n        position: 'left',\n        categoryPercentage: 0.8,\n        barPercentage: 0.9,\n        offset: true,\n        gridLines: {\n          offsetGridLines: true\n        }\n      }]\n    },\n    elements: {\n      rectangle: {\n        borderSkipped: 'left'\n      }\n    },\n    tooltips: {\n      mode: 'index',\n      axis: 'y'\n    }\n  });\n\n  var controller_horizontalBar = controller_bar.extend({\n    /**\n     * @private\n     */\n    _getValueScaleId: function _getValueScaleId() {\n      return this.getMeta().xAxisID;\n    },\n\n    /**\n     * @private\n     */\n    _getIndexScaleId: function _getIndexScaleId() {\n      return this.getMeta().yAxisID;\n    }\n  });\n  var valueOrDefault$5 = helpers$1.valueOrDefault;\n  var resolve$4 = helpers$1.options.resolve;\n  var isPointInArea = helpers$1.canvas._isPointInArea;\n\n  core_defaults._set('line', {\n    showLines: true,\n    spanGaps: false,\n    hover: {\n      mode: 'label'\n    },\n    scales: {\n      xAxes: [{\n        type: 'category',\n        id: 'x-axis-0'\n      }],\n      yAxes: [{\n        type: 'linear',\n        id: 'y-axis-0'\n      }]\n    }\n  });\n\n  function lineEnabled(dataset, options) {\n    return valueOrDefault$5(dataset.showLine, options.showLines);\n  }\n\n  var controller_line = core_datasetController.extend({\n    datasetElementType: elements.Line,\n    dataElementType: elements.Point,\n    update: function update(reset) {\n      var me = this;\n      var meta = me.getMeta();\n      var line = meta.dataset;\n      var points = meta.data || [];\n      var scale = me.getScaleForId(meta.yAxisID);\n      var dataset = me.getDataset();\n      var showLine = lineEnabled(dataset, me.chart.options);\n      var i, ilen; // Update Line\n\n      if (showLine) {\n        // Compatibility: If the properties are defined with only the old name, use those values\n        if (dataset.tension !== undefined && dataset.lineTension === undefined) {\n          dataset.lineTension = dataset.tension;\n        } // Utility\n\n\n        line._scale = scale;\n        line._datasetIndex = me.index; // Data\n\n        line._children = points; // Model\n\n        line._model = me._resolveLineOptions(line);\n        line.pivot();\n      } // Update Points\n\n\n      for (i = 0, ilen = points.length; i < ilen; ++i) {\n        me.updateElement(points[i], i, reset);\n      }\n\n      if (showLine && line._model.tension !== 0) {\n        me.updateBezierControlPoints();\n      } // Now pivot the point for animation\n\n\n      for (i = 0, ilen = points.length; i < ilen; ++i) {\n        points[i].pivot();\n      }\n    },\n    updateElement: function updateElement(point, index, reset) {\n      var me = this;\n      var meta = me.getMeta();\n      var custom = point.custom || {};\n      var dataset = me.getDataset();\n      var datasetIndex = me.index;\n      var value = dataset.data[index];\n      var yScale = me.getScaleForId(meta.yAxisID);\n      var xScale = me.getScaleForId(meta.xAxisID);\n      var lineModel = meta.dataset._model;\n      var x, y;\n\n      var options = me._resolvePointOptions(point, index);\n\n      x = xScale.getPixelForValue(typeof value === 'object' ? value : NaN, index, datasetIndex);\n      y = reset ? yScale.getBasePixel() : me.calculatePointY(value, index, datasetIndex); // Utility\n\n      point._xScale = xScale;\n      point._yScale = yScale;\n      point._options = options;\n      point._datasetIndex = datasetIndex;\n      point._index = index; // Desired view properties\n\n      point._model = {\n        x: x,\n        y: y,\n        skip: custom.skip || isNaN(x) || isNaN(y),\n        // Appearance\n        radius: options.radius,\n        pointStyle: options.pointStyle,\n        rotation: options.rotation,\n        backgroundColor: options.backgroundColor,\n        borderColor: options.borderColor,\n        borderWidth: options.borderWidth,\n        tension: valueOrDefault$5(custom.tension, lineModel ? lineModel.tension : 0),\n        steppedLine: lineModel ? lineModel.steppedLine : false,\n        // Tooltip\n        hitRadius: options.hitRadius\n      };\n    },\n\n    /**\n     * @private\n     */\n    _resolvePointOptions: function _resolvePointOptions(element, index) {\n      var me = this;\n      var chart = me.chart;\n      var dataset = chart.data.datasets[me.index];\n      var custom = element.custom || {};\n      var options = chart.options.elements.point;\n      var values = {};\n      var i, ilen, key; // Scriptable options\n\n      var context = {\n        chart: chart,\n        dataIndex: index,\n        dataset: dataset,\n        datasetIndex: me.index\n      };\n      var ELEMENT_OPTIONS = {\n        backgroundColor: 'pointBackgroundColor',\n        borderColor: 'pointBorderColor',\n        borderWidth: 'pointBorderWidth',\n        hitRadius: 'pointHitRadius',\n        hoverBackgroundColor: 'pointHoverBackgroundColor',\n        hoverBorderColor: 'pointHoverBorderColor',\n        hoverBorderWidth: 'pointHoverBorderWidth',\n        hoverRadius: 'pointHoverRadius',\n        pointStyle: 'pointStyle',\n        radius: 'pointRadius',\n        rotation: 'pointRotation'\n      };\n      var keys = Object.keys(ELEMENT_OPTIONS);\n\n      for (i = 0, ilen = keys.length; i < ilen; ++i) {\n        key = keys[i];\n        values[key] = resolve$4([custom[key], dataset[ELEMENT_OPTIONS[key]], dataset[key], options[key]], context, index);\n      }\n\n      return values;\n    },\n\n    /**\n     * @private\n     */\n    _resolveLineOptions: function _resolveLineOptions(element) {\n      var me = this;\n      var chart = me.chart;\n      var dataset = chart.data.datasets[me.index];\n      var custom = element.custom || {};\n      var options = chart.options;\n      var elementOptions = options.elements.line;\n      var values = {};\n      var i, ilen, key;\n      var keys = ['backgroundColor', 'borderWidth', 'borderColor', 'borderCapStyle', 'borderDash', 'borderDashOffset', 'borderJoinStyle', 'fill', 'cubicInterpolationMode'];\n\n      for (i = 0, ilen = keys.length; i < ilen; ++i) {\n        key = keys[i];\n        values[key] = resolve$4([custom[key], dataset[key], elementOptions[key]]);\n      } // The default behavior of lines is to break at null values, according\n      // to https://github.com/chartjs/Chart.js/issues/2435#issuecomment-216718158\n      // This option gives lines the ability to span gaps\n\n\n      values.spanGaps = valueOrDefault$5(dataset.spanGaps, options.spanGaps);\n      values.tension = valueOrDefault$5(dataset.lineTension, elementOptions.tension);\n      values.steppedLine = resolve$4([custom.steppedLine, dataset.steppedLine, elementOptions.stepped]);\n      return values;\n    },\n    calculatePointY: function calculatePointY(value, index, datasetIndex) {\n      var me = this;\n      var chart = me.chart;\n      var meta = me.getMeta();\n      var yScale = me.getScaleForId(meta.yAxisID);\n      var sumPos = 0;\n      var sumNeg = 0;\n      var i, ds, dsMeta;\n\n      if (yScale.options.stacked) {\n        for (i = 0; i < datasetIndex; i++) {\n          ds = chart.data.datasets[i];\n          dsMeta = chart.getDatasetMeta(i);\n\n          if (dsMeta.type === 'line' && dsMeta.yAxisID === yScale.id && chart.isDatasetVisible(i)) {\n            var stackedRightValue = Number(yScale.getRightValue(ds.data[index]));\n\n            if (stackedRightValue < 0) {\n              sumNeg += stackedRightValue || 0;\n            } else {\n              sumPos += stackedRightValue || 0;\n            }\n          }\n        }\n\n        var rightValue = Number(yScale.getRightValue(value));\n\n        if (rightValue < 0) {\n          return yScale.getPixelForValue(sumNeg + rightValue);\n        }\n\n        return yScale.getPixelForValue(sumPos + rightValue);\n      }\n\n      return yScale.getPixelForValue(value);\n    },\n    updateBezierControlPoints: function updateBezierControlPoints() {\n      var me = this;\n      var chart = me.chart;\n      var meta = me.getMeta();\n      var lineModel = meta.dataset._model;\n      var area = chart.chartArea;\n      var points = meta.data || [];\n      var i, ilen, model, controlPoints; // Only consider points that are drawn in case the spanGaps option is used\n\n      if (lineModel.spanGaps) {\n        points = points.filter(function (pt) {\n          return !pt._model.skip;\n        });\n      }\n\n      function capControlPoint(pt, min, max) {\n        return Math.max(Math.min(pt, max), min);\n      }\n\n      if (lineModel.cubicInterpolationMode === 'monotone') {\n        helpers$1.splineCurveMonotone(points);\n      } else {\n        for (i = 0, ilen = points.length; i < ilen; ++i) {\n          model = points[i]._model;\n          controlPoints = helpers$1.splineCurve(helpers$1.previousItem(points, i)._model, model, helpers$1.nextItem(points, i)._model, lineModel.tension);\n          model.controlPointPreviousX = controlPoints.previous.x;\n          model.controlPointPreviousY = controlPoints.previous.y;\n          model.controlPointNextX = controlPoints.next.x;\n          model.controlPointNextY = controlPoints.next.y;\n        }\n      }\n\n      if (chart.options.elements.line.capBezierPoints) {\n        for (i = 0, ilen = points.length; i < ilen; ++i) {\n          model = points[i]._model;\n\n          if (isPointInArea(model, area)) {\n            if (i > 0 && isPointInArea(points[i - 1]._model, area)) {\n              model.controlPointPreviousX = capControlPoint(model.controlPointPreviousX, area.left, area.right);\n              model.controlPointPreviousY = capControlPoint(model.controlPointPreviousY, area.top, area.bottom);\n            }\n\n            if (i < points.length - 1 && isPointInArea(points[i + 1]._model, area)) {\n              model.controlPointNextX = capControlPoint(model.controlPointNextX, area.left, area.right);\n              model.controlPointNextY = capControlPoint(model.controlPointNextY, area.top, area.bottom);\n            }\n          }\n        }\n      }\n    },\n    draw: function draw() {\n      var me = this;\n      var chart = me.chart;\n      var meta = me.getMeta();\n      var points = meta.data || [];\n      var area = chart.chartArea;\n      var ilen = points.length;\n      var halfBorderWidth;\n      var i = 0;\n\n      if (lineEnabled(me.getDataset(), chart.options)) {\n        halfBorderWidth = (meta.dataset._model.borderWidth || 0) / 2;\n        helpers$1.canvas.clipArea(chart.ctx, {\n          left: area.left,\n          right: area.right,\n          top: area.top - halfBorderWidth,\n          bottom: area.bottom + halfBorderWidth\n        });\n        meta.dataset.draw();\n        helpers$1.canvas.unclipArea(chart.ctx);\n      } // Draw the points\n\n\n      for (; i < ilen; ++i) {\n        points[i].draw(area);\n      }\n    },\n\n    /**\n     * @protected\n     */\n    setHoverStyle: function setHoverStyle(point) {\n      var model = point._model;\n      var options = point._options;\n      var getHoverColor = helpers$1.getHoverColor;\n      point.$previousStyle = {\n        backgroundColor: model.backgroundColor,\n        borderColor: model.borderColor,\n        borderWidth: model.borderWidth,\n        radius: model.radius\n      };\n      model.backgroundColor = valueOrDefault$5(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n      model.borderColor = valueOrDefault$5(options.hoverBorderColor, getHoverColor(options.borderColor));\n      model.borderWidth = valueOrDefault$5(options.hoverBorderWidth, options.borderWidth);\n      model.radius = valueOrDefault$5(options.hoverRadius, options.radius);\n    }\n  });\n  var resolve$5 = helpers$1.options.resolve;\n\n  core_defaults._set('polarArea', {\n    scale: {\n      type: 'radialLinear',\n      angleLines: {\n        display: false\n      },\n      gridLines: {\n        circular: true\n      },\n      pointLabels: {\n        display: false\n      },\n      ticks: {\n        beginAtZero: true\n      }\n    },\n    // Boolean - Whether to animate the rotation of the chart\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    },\n    startAngle: -0.5 * Math.PI,\n    legendCallback: function legendCallback(chart) {\n      var text = [];\n      text.push('<ul class=\"' + chart.id + '-legend\">');\n      var data = chart.data;\n      var datasets = data.datasets;\n      var labels = data.labels;\n\n      if (datasets.length) {\n        for (var i = 0; i < datasets[0].data.length; ++i) {\n          text.push('<li><span style=\"background-color:' + datasets[0].backgroundColor[i] + '\"></span>');\n\n          if (labels[i]) {\n            text.push(labels[i]);\n          }\n\n          text.push('</li>');\n        }\n      }\n\n      text.push('</ul>');\n      return text.join('');\n    },\n    legend: {\n      labels: {\n        generateLabels: function generateLabels(chart) {\n          var data = chart.data;\n\n          if (data.labels.length && data.datasets.length) {\n            return data.labels.map(function (label, i) {\n              var meta = chart.getDatasetMeta(0);\n              var ds = data.datasets[0];\n              var arc = meta.data[i];\n              var custom = arc.custom || {};\n              var arcOpts = chart.options.elements.arc;\n              var fill = resolve$5([custom.backgroundColor, ds.backgroundColor, arcOpts.backgroundColor], undefined, i);\n              var stroke = resolve$5([custom.borderColor, ds.borderColor, arcOpts.borderColor], undefined, i);\n              var bw = resolve$5([custom.borderWidth, ds.borderWidth, arcOpts.borderWidth], undefined, i);\n              return {\n                text: label,\n                fillStyle: fill,\n                strokeStyle: stroke,\n                lineWidth: bw,\n                hidden: isNaN(ds.data[i]) || meta.data[i].hidden,\n                // Extra data used for toggling the correct item\n                index: i\n              };\n            });\n          }\n\n          return [];\n        }\n      },\n      onClick: function onClick(e, legendItem) {\n        var index = legendItem.index;\n        var chart = this.chart;\n        var i, ilen, meta;\n\n        for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {\n          meta = chart.getDatasetMeta(i);\n          meta.data[index].hidden = !meta.data[index].hidden;\n        }\n\n        chart.update();\n      }\n    },\n    // Need to override these to give a nice default\n    tooltips: {\n      callbacks: {\n        title: function title() {\n          return '';\n        },\n        label: function label(item, data) {\n          return data.labels[item.index] + ': ' + item.yLabel;\n        }\n      }\n    }\n  });\n\n  var controller_polarArea = core_datasetController.extend({\n    dataElementType: elements.Arc,\n    linkScales: helpers$1.noop,\n    update: function update(reset) {\n      var me = this;\n      var dataset = me.getDataset();\n      var meta = me.getMeta();\n      var start = me.chart.options.startAngle || 0;\n      var starts = me._starts = [];\n      var angles = me._angles = [];\n      var arcs = meta.data;\n      var i, ilen, angle;\n\n      me._updateRadius();\n\n      meta.count = me.countVisibleElements();\n\n      for (i = 0, ilen = dataset.data.length; i < ilen; i++) {\n        starts[i] = start;\n        angle = me._computeAngle(i);\n        angles[i] = angle;\n        start += angle;\n      }\n\n      for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n        arcs[i]._options = me._resolveElementOptions(arcs[i], i);\n        me.updateElement(arcs[i], i, reset);\n      }\n    },\n\n    /**\n     * @private\n     */\n    _updateRadius: function _updateRadius() {\n      var me = this;\n      var chart = me.chart;\n      var chartArea = chart.chartArea;\n      var opts = chart.options;\n      var minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n      chart.outerRadius = Math.max(minSize / 2, 0);\n      chart.innerRadius = Math.max(opts.cutoutPercentage ? chart.outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n      chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();\n      me.outerRadius = chart.outerRadius - chart.radiusLength * me.index;\n      me.innerRadius = me.outerRadius - chart.radiusLength;\n    },\n    updateElement: function updateElement(arc, index, reset) {\n      var me = this;\n      var chart = me.chart;\n      var dataset = me.getDataset();\n      var opts = chart.options;\n      var animationOpts = opts.animation;\n      var scale = chart.scale;\n      var labels = chart.data.labels;\n      var centerX = scale.xCenter;\n      var centerY = scale.yCenter; // var negHalfPI = -0.5 * Math.PI;\n\n      var datasetStartAngle = opts.startAngle;\n      var distance = arc.hidden ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);\n      var startAngle = me._starts[index];\n      var endAngle = startAngle + (arc.hidden ? 0 : me._angles[index]);\n      var resetRadius = animationOpts.animateScale ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);\n      var options = arc._options || {};\n      helpers$1.extend(arc, {\n        // Utility\n        _datasetIndex: me.index,\n        _index: index,\n        _scale: scale,\n        // Desired view properties\n        _model: {\n          backgroundColor: options.backgroundColor,\n          borderColor: options.borderColor,\n          borderWidth: options.borderWidth,\n          borderAlign: options.borderAlign,\n          x: centerX,\n          y: centerY,\n          innerRadius: 0,\n          outerRadius: reset ? resetRadius : distance,\n          startAngle: reset && animationOpts.animateRotate ? datasetStartAngle : startAngle,\n          endAngle: reset && animationOpts.animateRotate ? datasetStartAngle : endAngle,\n          label: helpers$1.valueAtIndexOrDefault(labels, index, labels[index])\n        }\n      });\n      arc.pivot();\n    },\n    countVisibleElements: function countVisibleElements() {\n      var dataset = this.getDataset();\n      var meta = this.getMeta();\n      var count = 0;\n      helpers$1.each(meta.data, function (element, index) {\n        if (!isNaN(dataset.data[index]) && !element.hidden) {\n          count++;\n        }\n      });\n      return count;\n    },\n\n    /**\n     * @protected\n     */\n    setHoverStyle: function setHoverStyle(arc) {\n      var model = arc._model;\n      var options = arc._options;\n      var getHoverColor = helpers$1.getHoverColor;\n      var valueOrDefault = helpers$1.valueOrDefault;\n      arc.$previousStyle = {\n        backgroundColor: model.backgroundColor,\n        borderColor: model.borderColor,\n        borderWidth: model.borderWidth\n      };\n      model.backgroundColor = valueOrDefault(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n      model.borderColor = valueOrDefault(options.hoverBorderColor, getHoverColor(options.borderColor));\n      model.borderWidth = valueOrDefault(options.hoverBorderWidth, options.borderWidth);\n    },\n\n    /**\n     * @private\n     */\n    _resolveElementOptions: function _resolveElementOptions(arc, index) {\n      var me = this;\n      var chart = me.chart;\n      var dataset = me.getDataset();\n      var custom = arc.custom || {};\n      var options = chart.options.elements.arc;\n      var values = {};\n      var i, ilen, key; // Scriptable options\n\n      var context = {\n        chart: chart,\n        dataIndex: index,\n        dataset: dataset,\n        datasetIndex: me.index\n      };\n      var keys = ['backgroundColor', 'borderColor', 'borderWidth', 'borderAlign', 'hoverBackgroundColor', 'hoverBorderColor', 'hoverBorderWidth'];\n\n      for (i = 0, ilen = keys.length; i < ilen; ++i) {\n        key = keys[i];\n        values[key] = resolve$5([custom[key], dataset[key], options[key]], context, index);\n      }\n\n      return values;\n    },\n\n    /**\n     * @private\n     */\n    _computeAngle: function _computeAngle(index) {\n      var me = this;\n      var count = this.getMeta().count;\n      var dataset = me.getDataset();\n      var meta = me.getMeta();\n\n      if (isNaN(dataset.data[index]) || meta.data[index].hidden) {\n        return 0;\n      } // Scriptable options\n\n\n      var context = {\n        chart: me.chart,\n        dataIndex: index,\n        dataset: dataset,\n        datasetIndex: me.index\n      };\n      return resolve$5([me.chart.options.elements.arc.angle, 2 * Math.PI / count], context, index);\n    }\n  });\n\n  core_defaults._set('pie', helpers$1.clone(core_defaults.doughnut));\n\n  core_defaults._set('pie', {\n    cutoutPercentage: 0\n  }); // Pie charts are Doughnut chart with different defaults\n\n\n  var controller_pie = controller_doughnut;\n  var valueOrDefault$6 = helpers$1.valueOrDefault;\n  var resolve$6 = helpers$1.options.resolve;\n\n  core_defaults._set('radar', {\n    scale: {\n      type: 'radialLinear'\n    },\n    elements: {\n      line: {\n        tension: 0 // no bezier in radar\n\n      }\n    }\n  });\n\n  var controller_radar = core_datasetController.extend({\n    datasetElementType: elements.Line,\n    dataElementType: elements.Point,\n    linkScales: helpers$1.noop,\n    update: function update(reset) {\n      var me = this;\n      var meta = me.getMeta();\n      var line = meta.dataset;\n      var points = meta.data || [];\n      var scale = me.chart.scale;\n      var dataset = me.getDataset();\n      var i, ilen; // Compatibility: If the properties are defined with only the old name, use those values\n\n      if (dataset.tension !== undefined && dataset.lineTension === undefined) {\n        dataset.lineTension = dataset.tension;\n      } // Utility\n\n\n      line._scale = scale;\n      line._datasetIndex = me.index; // Data\n\n      line._children = points;\n      line._loop = true; // Model\n\n      line._model = me._resolveLineOptions(line);\n      line.pivot(); // Update Points\n\n      for (i = 0, ilen = points.length; i < ilen; ++i) {\n        me.updateElement(points[i], i, reset);\n      } // Update bezier control points\n\n\n      me.updateBezierControlPoints(); // Now pivot the point for animation\n\n      for (i = 0, ilen = points.length; i < ilen; ++i) {\n        points[i].pivot();\n      }\n    },\n    updateElement: function updateElement(point, index, reset) {\n      var me = this;\n      var custom = point.custom || {};\n      var dataset = me.getDataset();\n      var scale = me.chart.scale;\n      var pointPosition = scale.getPointPositionForValue(index, dataset.data[index]);\n\n      var options = me._resolvePointOptions(point, index);\n\n      var lineModel = me.getMeta().dataset._model;\n\n      var x = reset ? scale.xCenter : pointPosition.x;\n      var y = reset ? scale.yCenter : pointPosition.y; // Utility\n\n      point._scale = scale;\n      point._options = options;\n      point._datasetIndex = me.index;\n      point._index = index; // Desired view properties\n\n      point._model = {\n        x: x,\n        // value not used in dataset scale, but we want a consistent API between scales\n        y: y,\n        skip: custom.skip || isNaN(x) || isNaN(y),\n        // Appearance\n        radius: options.radius,\n        pointStyle: options.pointStyle,\n        rotation: options.rotation,\n        backgroundColor: options.backgroundColor,\n        borderColor: options.borderColor,\n        borderWidth: options.borderWidth,\n        tension: valueOrDefault$6(custom.tension, lineModel ? lineModel.tension : 0),\n        // Tooltip\n        hitRadius: options.hitRadius\n      };\n    },\n\n    /**\n     * @private\n     */\n    _resolvePointOptions: function _resolvePointOptions(element, index) {\n      var me = this;\n      var chart = me.chart;\n      var dataset = chart.data.datasets[me.index];\n      var custom = element.custom || {};\n      var options = chart.options.elements.point;\n      var values = {};\n      var i, ilen, key; // Scriptable options\n\n      var context = {\n        chart: chart,\n        dataIndex: index,\n        dataset: dataset,\n        datasetIndex: me.index\n      };\n      var ELEMENT_OPTIONS = {\n        backgroundColor: 'pointBackgroundColor',\n        borderColor: 'pointBorderColor',\n        borderWidth: 'pointBorderWidth',\n        hitRadius: 'pointHitRadius',\n        hoverBackgroundColor: 'pointHoverBackgroundColor',\n        hoverBorderColor: 'pointHoverBorderColor',\n        hoverBorderWidth: 'pointHoverBorderWidth',\n        hoverRadius: 'pointHoverRadius',\n        pointStyle: 'pointStyle',\n        radius: 'pointRadius',\n        rotation: 'pointRotation'\n      };\n      var keys = Object.keys(ELEMENT_OPTIONS);\n\n      for (i = 0, ilen = keys.length; i < ilen; ++i) {\n        key = keys[i];\n        values[key] = resolve$6([custom[key], dataset[ELEMENT_OPTIONS[key]], dataset[key], options[key]], context, index);\n      }\n\n      return values;\n    },\n\n    /**\n     * @private\n     */\n    _resolveLineOptions: function _resolveLineOptions(element) {\n      var me = this;\n      var chart = me.chart;\n      var dataset = chart.data.datasets[me.index];\n      var custom = element.custom || {};\n      var options = chart.options.elements.line;\n      var values = {};\n      var i, ilen, key;\n      var keys = ['backgroundColor', 'borderWidth', 'borderColor', 'borderCapStyle', 'borderDash', 'borderDashOffset', 'borderJoinStyle', 'fill'];\n\n      for (i = 0, ilen = keys.length; i < ilen; ++i) {\n        key = keys[i];\n        values[key] = resolve$6([custom[key], dataset[key], options[key]]);\n      }\n\n      values.tension = valueOrDefault$6(dataset.lineTension, options.tension);\n      return values;\n    },\n    updateBezierControlPoints: function updateBezierControlPoints() {\n      var me = this;\n      var meta = me.getMeta();\n      var area = me.chart.chartArea;\n      var points = meta.data || [];\n      var i, ilen, model, controlPoints;\n\n      function capControlPoint(pt, min, max) {\n        return Math.max(Math.min(pt, max), min);\n      }\n\n      for (i = 0, ilen = points.length; i < ilen; ++i) {\n        model = points[i]._model;\n        controlPoints = helpers$1.splineCurve(helpers$1.previousItem(points, i, true)._model, model, helpers$1.nextItem(points, i, true)._model, model.tension); // Prevent the bezier going outside of the bounds of the graph\n\n        model.controlPointPreviousX = capControlPoint(controlPoints.previous.x, area.left, area.right);\n        model.controlPointPreviousY = capControlPoint(controlPoints.previous.y, area.top, area.bottom);\n        model.controlPointNextX = capControlPoint(controlPoints.next.x, area.left, area.right);\n        model.controlPointNextY = capControlPoint(controlPoints.next.y, area.top, area.bottom);\n      }\n    },\n    setHoverStyle: function setHoverStyle(point) {\n      var model = point._model;\n      var options = point._options;\n      var getHoverColor = helpers$1.getHoverColor;\n      point.$previousStyle = {\n        backgroundColor: model.backgroundColor,\n        borderColor: model.borderColor,\n        borderWidth: model.borderWidth,\n        radius: model.radius\n      };\n      model.backgroundColor = valueOrDefault$6(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n      model.borderColor = valueOrDefault$6(options.hoverBorderColor, getHoverColor(options.borderColor));\n      model.borderWidth = valueOrDefault$6(options.hoverBorderWidth, options.borderWidth);\n      model.radius = valueOrDefault$6(options.hoverRadius, options.radius);\n    }\n  });\n\n  core_defaults._set('scatter', {\n    hover: {\n      mode: 'single'\n    },\n    scales: {\n      xAxes: [{\n        id: 'x-axis-1',\n        // need an ID so datasets can reference the scale\n        type: 'linear',\n        // scatter should not use a category axis\n        position: 'bottom'\n      }],\n      yAxes: [{\n        id: 'y-axis-1',\n        type: 'linear',\n        position: 'left'\n      }]\n    },\n    showLines: false,\n    tooltips: {\n      callbacks: {\n        title: function title() {\n          return ''; // doesn't make sense for scatter since data are formatted as a point\n        },\n        label: function label(item) {\n          return '(' + item.xLabel + ', ' + item.yLabel + ')';\n        }\n      }\n    }\n  }); // Scatter charts use line controllers\n\n\n  var controller_scatter = controller_line; // NOTE export a map in which the key represents the controller type, not\n  // the class, and so must be CamelCase in order to be correctly retrieved\n  // by the controller in core.controller.js (`controllers[meta.type]`).\n\n  var controllers = {\n    bar: controller_bar,\n    bubble: controller_bubble,\n    doughnut: controller_doughnut,\n    horizontalBar: controller_horizontalBar,\n    line: controller_line,\n    polarArea: controller_polarArea,\n    pie: controller_pie,\n    radar: controller_radar,\n    scatter: controller_scatter\n  };\n  /**\n   * Helper function to get relative position for an event\n   * @param {Event|IEvent} event - The event to get the position for\n   * @param {Chart} chart - The chart\n   * @returns {object} the event position\n   */\n\n  function getRelativePosition(e, chart) {\n    if (e.native) {\n      return {\n        x: e.x,\n        y: e.y\n      };\n    }\n\n    return helpers$1.getRelativePosition(e, chart);\n  }\n  /**\n   * Helper function to traverse all of the visible elements in the chart\n   * @param {Chart} chart - the chart\n   * @param {function} handler - the callback to execute for each visible item\n   */\n\n\n  function parseVisibleItems(chart, handler) {\n    var datasets = chart.data.datasets;\n    var meta, i, j, ilen, jlen;\n\n    for (i = 0, ilen = datasets.length; i < ilen; ++i) {\n      if (!chart.isDatasetVisible(i)) {\n        continue;\n      }\n\n      meta = chart.getDatasetMeta(i);\n\n      for (j = 0, jlen = meta.data.length; j < jlen; ++j) {\n        var element = meta.data[j];\n\n        if (!element._view.skip) {\n          handler(element);\n        }\n      }\n    }\n  }\n  /**\n   * Helper function to get the items that intersect the event position\n   * @param {ChartElement[]} items - elements to filter\n   * @param {object} position - the point to be nearest to\n   * @return {ChartElement[]} the nearest items\n   */\n\n\n  function getIntersectItems(chart, position) {\n    var elements = [];\n    parseVisibleItems(chart, function (element) {\n      if (element.inRange(position.x, position.y)) {\n        elements.push(element);\n      }\n    });\n    return elements;\n  }\n  /**\n   * Helper function to get the items nearest to the event position considering all visible items in teh chart\n   * @param {Chart} chart - the chart to look at elements from\n   * @param {object} position - the point to be nearest to\n   * @param {boolean} intersect - if true, only consider items that intersect the position\n   * @param {function} distanceMetric - function to provide the distance between points\n   * @return {ChartElement[]} the nearest items\n   */\n\n\n  function getNearestItems(chart, position, intersect, distanceMetric) {\n    var minDistance = Number.POSITIVE_INFINITY;\n    var nearestItems = [];\n    parseVisibleItems(chart, function (element) {\n      if (intersect && !element.inRange(position.x, position.y)) {\n        return;\n      }\n\n      var center = element.getCenterPoint();\n      var distance = distanceMetric(position, center);\n\n      if (distance < minDistance) {\n        nearestItems = [element];\n        minDistance = distance;\n      } else if (distance === minDistance) {\n        // Can have multiple items at the same distance in which case we sort by size\n        nearestItems.push(element);\n      }\n    });\n    return nearestItems;\n  }\n  /**\n   * Get a distance metric function for two points based on the\n   * axis mode setting\n   * @param {string} axis - the axis mode. x|y|xy\n   */\n\n\n  function getDistanceMetricForAxis(axis) {\n    var useX = axis.indexOf('x') !== -1;\n    var useY = axis.indexOf('y') !== -1;\n    return function (pt1, pt2) {\n      var deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n      var deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n      return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n    };\n  }\n\n  function indexMode(chart, e, options) {\n    var position = getRelativePosition(e, chart); // Default axis for index mode is 'x' to match old behaviour\n\n    options.axis = options.axis || 'x';\n    var distanceMetric = getDistanceMetricForAxis(options.axis);\n    var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);\n    var elements = [];\n\n    if (!items.length) {\n      return [];\n    }\n\n    chart.data.datasets.forEach(function (dataset, datasetIndex) {\n      if (chart.isDatasetVisible(datasetIndex)) {\n        var meta = chart.getDatasetMeta(datasetIndex);\n        var element = meta.data[items[0]._index]; // don't count items that are skipped (null data)\n\n        if (element && !element._view.skip) {\n          elements.push(element);\n        }\n      }\n    });\n    return elements;\n  }\n  /**\n   * @interface IInteractionOptions\n   */\n\n  /**\n   * If true, only consider items that intersect the point\n   * @name IInterfaceOptions#boolean\n   * @type Boolean\n   */\n\n  /**\n   * Contains interaction related functions\n   * @namespace Chart.Interaction\n   */\n\n\n  var core_interaction = {\n    // Helper function for different modes\n    modes: {\n      single: function single(chart, e) {\n        var position = getRelativePosition(e, chart);\n        var elements = [];\n        parseVisibleItems(chart, function (element) {\n          if (element.inRange(position.x, position.y)) {\n            elements.push(element);\n            return elements;\n          }\n        });\n        return elements.slice(0, 1);\n      },\n\n      /**\n       * @function Chart.Interaction.modes.label\n       * @deprecated since version 2.4.0\n       * @todo remove at version 3\n       * @private\n       */\n      label: indexMode,\n\n      /**\n       * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something\n       * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item\n       * @function Chart.Interaction.modes.index\n       * @since v2.4.0\n       * @param {Chart} chart - the chart we are returning items from\n       * @param {Event} e - the event we are find things at\n       * @param {IInteractionOptions} options - options to use during interaction\n       * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n       */\n      index: indexMode,\n\n      /**\n       * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something\n       * If the options.intersect is false, we find the nearest item and return the items in that dataset\n       * @function Chart.Interaction.modes.dataset\n       * @param {Chart} chart - the chart we are returning items from\n       * @param {Event} e - the event we are find things at\n       * @param {IInteractionOptions} options - options to use during interaction\n       * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n       */\n      dataset: function dataset(chart, e, options) {\n        var position = getRelativePosition(e, chart);\n        options.axis = options.axis || 'xy';\n        var distanceMetric = getDistanceMetricForAxis(options.axis);\n        var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);\n\n        if (items.length > 0) {\n          items = chart.getDatasetMeta(items[0]._datasetIndex).data;\n        }\n\n        return items;\n      },\n\n      /**\n       * @function Chart.Interaction.modes.x-axis\n       * @deprecated since version 2.4.0. Use index mode and intersect == true\n       * @todo remove at version 3\n       * @private\n       */\n      'x-axis': function xAxis(chart, e) {\n        return indexMode(chart, e, {\n          intersect: false\n        });\n      },\n\n      /**\n       * Point mode returns all elements that hit test based on the event position\n       * of the event\n       * @function Chart.Interaction.modes.intersect\n       * @param {Chart} chart - the chart we are returning items from\n       * @param {Event} e - the event we are find things at\n       * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n       */\n      point: function point(chart, e) {\n        var position = getRelativePosition(e, chart);\n        return getIntersectItems(chart, position);\n      },\n\n      /**\n       * nearest mode returns the element closest to the point\n       * @function Chart.Interaction.modes.intersect\n       * @param {Chart} chart - the chart we are returning items from\n       * @param {Event} e - the event we are find things at\n       * @param {IInteractionOptions} options - options to use\n       * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n       */\n      nearest: function nearest(chart, e, options) {\n        var position = getRelativePosition(e, chart);\n        options.axis = options.axis || 'xy';\n        var distanceMetric = getDistanceMetricForAxis(options.axis);\n        return getNearestItems(chart, position, options.intersect, distanceMetric);\n      },\n\n      /**\n       * x mode returns the elements that hit-test at the current x coordinate\n       * @function Chart.Interaction.modes.x\n       * @param {Chart} chart - the chart we are returning items from\n       * @param {Event} e - the event we are find things at\n       * @param {IInteractionOptions} options - options to use\n       * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n       */\n      x: function x(chart, e, options) {\n        var position = getRelativePosition(e, chart);\n        var items = [];\n        var intersectsItem = false;\n        parseVisibleItems(chart, function (element) {\n          if (element.inXRange(position.x)) {\n            items.push(element);\n          }\n\n          if (element.inRange(position.x, position.y)) {\n            intersectsItem = true;\n          }\n        }); // If we want to trigger on an intersect and we don't have any items\n        // that intersect the position, return nothing\n\n        if (options.intersect && !intersectsItem) {\n          items = [];\n        }\n\n        return items;\n      },\n\n      /**\n       * y mode returns the elements that hit-test at the current y coordinate\n       * @function Chart.Interaction.modes.y\n       * @param {Chart} chart - the chart we are returning items from\n       * @param {Event} e - the event we are find things at\n       * @param {IInteractionOptions} options - options to use\n       * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n       */\n      y: function y(chart, e, options) {\n        var position = getRelativePosition(e, chart);\n        var items = [];\n        var intersectsItem = false;\n        parseVisibleItems(chart, function (element) {\n          if (element.inYRange(position.y)) {\n            items.push(element);\n          }\n\n          if (element.inRange(position.x, position.y)) {\n            intersectsItem = true;\n          }\n        }); // If we want to trigger on an intersect and we don't have any items\n        // that intersect the position, return nothing\n\n        if (options.intersect && !intersectsItem) {\n          items = [];\n        }\n\n        return items;\n      }\n    }\n  };\n\n  function filterByPosition(array, position) {\n    return helpers$1.where(array, function (v) {\n      return v.position === position;\n    });\n  }\n\n  function sortByWeight(array, reverse) {\n    array.forEach(function (v, i) {\n      v._tmpIndex_ = i;\n      return v;\n    });\n    array.sort(function (a, b) {\n      var v0 = reverse ? b : a;\n      var v1 = reverse ? a : b;\n      return v0.weight === v1.weight ? v0._tmpIndex_ - v1._tmpIndex_ : v0.weight - v1.weight;\n    });\n    array.forEach(function (v) {\n      delete v._tmpIndex_;\n    });\n  }\n\n  function findMaxPadding(boxes) {\n    var top = 0;\n    var left = 0;\n    var bottom = 0;\n    var right = 0;\n    helpers$1.each(boxes, function (box) {\n      if (box.getPadding) {\n        var boxPadding = box.getPadding();\n        top = Math.max(top, boxPadding.top);\n        left = Math.max(left, boxPadding.left);\n        bottom = Math.max(bottom, boxPadding.bottom);\n        right = Math.max(right, boxPadding.right);\n      }\n    });\n    return {\n      top: top,\n      left: left,\n      bottom: bottom,\n      right: right\n    };\n  }\n\n  function addSizeByPosition(boxes, size) {\n    helpers$1.each(boxes, function (box) {\n      size[box.position] += box.isHorizontal() ? box.height : box.width;\n    });\n  }\n\n  core_defaults._set('global', {\n    layout: {\n      padding: {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n      }\n    }\n  });\n  /**\n   * @interface ILayoutItem\n   * @prop {string} position - The position of the item in the chart layout. Possible values are\n   * 'left', 'top', 'right', 'bottom', and 'chartArea'\n   * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area\n   * @prop {boolean} fullWidth - if true, and the item is horizontal, then push vertical boxes down\n   * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)\n   * @prop {function} update - Takes two parameters: width and height. Returns size of item\n   * @prop {function} getPadding -  Returns an object with padding on the edges\n   * @prop {number} width - Width of item. Must be valid after update()\n   * @prop {number} height - Height of item. Must be valid after update()\n   * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update\n   * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update\n   * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update\n   * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update\n   */\n  // The layout service is very self explanatory.  It's responsible for the layout within a chart.\n  // Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need\n  // It is this service's responsibility of carrying out that layout.\n\n\n  var core_layouts = {\n    defaults: {},\n\n    /**\n     * Register a box to a chart.\n     * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.\n     * @param {Chart} chart - the chart to use\n     * @param {ILayoutItem} item - the item to add to be layed out\n     */\n    addBox: function addBox(chart, item) {\n      if (!chart.boxes) {\n        chart.boxes = [];\n      } // initialize item with default values\n\n\n      item.fullWidth = item.fullWidth || false;\n      item.position = item.position || 'top';\n      item.weight = item.weight || 0;\n      chart.boxes.push(item);\n    },\n\n    /**\n     * Remove a layoutItem from a chart\n     * @param {Chart} chart - the chart to remove the box from\n     * @param {ILayoutItem} layoutItem - the item to remove from the layout\n     */\n    removeBox: function removeBox(chart, layoutItem) {\n      var index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n\n      if (index !== -1) {\n        chart.boxes.splice(index, 1);\n      }\n    },\n\n    /**\n     * Sets (or updates) options on the given `item`.\n     * @param {Chart} chart - the chart in which the item lives (or will be added to)\n     * @param {ILayoutItem} item - the item to configure with the given options\n     * @param {object} options - the new item options.\n     */\n    configure: function configure(chart, item, options) {\n      var props = ['fullWidth', 'position', 'weight'];\n      var ilen = props.length;\n      var i = 0;\n      var prop;\n\n      for (; i < ilen; ++i) {\n        prop = props[i];\n\n        if (options.hasOwnProperty(prop)) {\n          item[prop] = options[prop];\n        }\n      }\n    },\n\n    /**\n     * Fits boxes of the given chart into the given size by having each box measure itself\n     * then running a fitting algorithm\n     * @param {Chart} chart - the chart\n     * @param {number} width - the width to fit into\n     * @param {number} height - the height to fit into\n     */\n    update: function update(chart, width, height) {\n      if (!chart) {\n        return;\n      }\n\n      var layoutOptions = chart.options.layout || {};\n      var padding = helpers$1.options.toPadding(layoutOptions.padding);\n      var leftPadding = padding.left;\n      var rightPadding = padding.right;\n      var topPadding = padding.top;\n      var bottomPadding = padding.bottom;\n      var leftBoxes = filterByPosition(chart.boxes, 'left');\n      var rightBoxes = filterByPosition(chart.boxes, 'right');\n      var topBoxes = filterByPosition(chart.boxes, 'top');\n      var bottomBoxes = filterByPosition(chart.boxes, 'bottom');\n      var chartAreaBoxes = filterByPosition(chart.boxes, 'chartArea'); // Sort boxes by weight. A higher weight is further away from the chart area\n\n      sortByWeight(leftBoxes, true);\n      sortByWeight(rightBoxes, false);\n      sortByWeight(topBoxes, true);\n      sortByWeight(bottomBoxes, false);\n      var verticalBoxes = leftBoxes.concat(rightBoxes);\n      var horizontalBoxes = topBoxes.concat(bottomBoxes);\n      var outerBoxes = verticalBoxes.concat(horizontalBoxes); // Essentially we now have any number of boxes on each of the 4 sides.\n      // Our canvas looks like the following.\n      // The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and\n      // B1 is the bottom axis\n      // There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays\n      // These locations are single-box locations only, when trying to register a chartArea location that is already taken,\n      // an error will be thrown.\n      //\n      // |----------------------------------------------------|\n      // |                  T1 (Full Width)                   |\n      // |----------------------------------------------------|\n      // |    |    |                 T2                  |    |\n      // |    |----|-------------------------------------|----|\n      // |    |    | C1 |                           | C2 |    |\n      // |    |    |----|                           |----|    |\n      // |    |    |                                     |    |\n      // | L1 | L2 |           ChartArea (C0)            | R1 |\n      // |    |    |                                     |    |\n      // |    |    |----|                           |----|    |\n      // |    |    | C3 |                           | C4 |    |\n      // |    |----|-------------------------------------|----|\n      // |    |    |                 B1                  |    |\n      // |----------------------------------------------------|\n      // |                  B2 (Full Width)                   |\n      // |----------------------------------------------------|\n      //\n      // What we do to find the best sizing, we do the following\n      // 1. Determine the minimum size of the chart area.\n      // 2. Split the remaining width equally between each vertical axis\n      // 3. Split the remaining height equally between each horizontal axis\n      // 4. Give each layout the maximum size it can be. The layout will return it's minimum size\n      // 5. Adjust the sizes of each axis based on it's minimum reported size.\n      // 6. Refit each axis\n      // 7. Position each axis in the final location\n      // 8. Tell the chart the final location of the chart area\n      // 9. Tell any axes that overlay the chart area the positions of the chart area\n      // Step 1\n\n      var chartWidth = width - leftPadding - rightPadding;\n      var chartHeight = height - topPadding - bottomPadding;\n      var chartAreaWidth = chartWidth / 2; // min 50%\n      // Step 2\n\n      var verticalBoxWidth = (width - chartAreaWidth) / verticalBoxes.length; // Step 3\n      // TODO re-limit horizontal axis height (this limit has affected only padding calculation since PR 1837)\n      // var horizontalBoxHeight = (height - chartAreaHeight) / horizontalBoxes.length;\n      // Step 4\n\n      var maxChartAreaWidth = chartWidth;\n      var maxChartAreaHeight = chartHeight;\n      var outerBoxSizes = {\n        top: topPadding,\n        left: leftPadding,\n        bottom: bottomPadding,\n        right: rightPadding\n      };\n      var minBoxSizes = [];\n      var maxPadding;\n\n      function getMinimumBoxSize(box) {\n        var minSize;\n        var isHorizontal = box.isHorizontal();\n\n        if (isHorizontal) {\n          minSize = box.update(box.fullWidth ? chartWidth : maxChartAreaWidth, chartHeight / 2);\n          maxChartAreaHeight -= minSize.height;\n        } else {\n          minSize = box.update(verticalBoxWidth, maxChartAreaHeight);\n          maxChartAreaWidth -= minSize.width;\n        }\n\n        minBoxSizes.push({\n          horizontal: isHorizontal,\n          width: minSize.width,\n          box: box\n        });\n      }\n\n      helpers$1.each(outerBoxes, getMinimumBoxSize); // If a horizontal box has padding, we move the left boxes over to avoid ugly charts (see issue #2478)\n\n      maxPadding = findMaxPadding(outerBoxes); // At this point, maxChartAreaHeight and maxChartAreaWidth are the size the chart area could\n      // be if the axes are drawn at their minimum sizes.\n      // Steps 5 & 6\n      // Function to fit a box\n\n      function fitBox(box) {\n        var minBoxSize = helpers$1.findNextWhere(minBoxSizes, function (minBox) {\n          return minBox.box === box;\n        });\n\n        if (minBoxSize) {\n          if (minBoxSize.horizontal) {\n            var scaleMargin = {\n              left: Math.max(outerBoxSizes.left, maxPadding.left),\n              right: Math.max(outerBoxSizes.right, maxPadding.right),\n              top: 0,\n              bottom: 0\n            }; // Don't use min size here because of label rotation. When the labels are rotated, their rotation highly depends\n            // on the margin. Sometimes they need to increase in size slightly\n\n            box.update(box.fullWidth ? chartWidth : maxChartAreaWidth, chartHeight / 2, scaleMargin);\n          } else {\n            box.update(minBoxSize.width, maxChartAreaHeight);\n          }\n        }\n      } // Update, and calculate the left and right margins for the horizontal boxes\n\n\n      helpers$1.each(verticalBoxes, fitBox);\n      addSizeByPosition(verticalBoxes, outerBoxSizes); // Set the Left and Right margins for the horizontal boxes\n\n      helpers$1.each(horizontalBoxes, fitBox);\n      addSizeByPosition(horizontalBoxes, outerBoxSizes);\n\n      function finalFitVerticalBox(box) {\n        var minBoxSize = helpers$1.findNextWhere(minBoxSizes, function (minSize) {\n          return minSize.box === box;\n        });\n        var scaleMargin = {\n          left: 0,\n          right: 0,\n          top: outerBoxSizes.top,\n          bottom: outerBoxSizes.bottom\n        };\n\n        if (minBoxSize) {\n          box.update(minBoxSize.width, maxChartAreaHeight, scaleMargin);\n        }\n      } // Let the left layout know the final margin\n\n\n      helpers$1.each(verticalBoxes, finalFitVerticalBox); // Recalculate because the size of each layout might have changed slightly due to the margins (label rotation for instance)\n\n      outerBoxSizes = {\n        top: topPadding,\n        left: leftPadding,\n        bottom: bottomPadding,\n        right: rightPadding\n      };\n      addSizeByPosition(outerBoxes, outerBoxSizes); // We may be adding some padding to account for rotated x axis labels\n\n      var leftPaddingAddition = Math.max(maxPadding.left - outerBoxSizes.left, 0);\n      outerBoxSizes.left += leftPaddingAddition;\n      outerBoxSizes.right += Math.max(maxPadding.right - outerBoxSizes.right, 0);\n      var topPaddingAddition = Math.max(maxPadding.top - outerBoxSizes.top, 0);\n      outerBoxSizes.top += topPaddingAddition;\n      outerBoxSizes.bottom += Math.max(maxPadding.bottom - outerBoxSizes.bottom, 0); // Figure out if our chart area changed. This would occur if the dataset layout label rotation\n      // changed due to the application of the margins in step 6. Since we can only get bigger, this is safe to do\n      // without calling `fit` again\n\n      var newMaxChartAreaHeight = height - outerBoxSizes.top - outerBoxSizes.bottom;\n      var newMaxChartAreaWidth = width - outerBoxSizes.left - outerBoxSizes.right;\n\n      if (newMaxChartAreaWidth !== maxChartAreaWidth || newMaxChartAreaHeight !== maxChartAreaHeight) {\n        helpers$1.each(verticalBoxes, function (box) {\n          box.height = newMaxChartAreaHeight;\n        });\n        helpers$1.each(horizontalBoxes, function (box) {\n          if (!box.fullWidth) {\n            box.width = newMaxChartAreaWidth;\n          }\n        });\n        maxChartAreaHeight = newMaxChartAreaHeight;\n        maxChartAreaWidth = newMaxChartAreaWidth;\n      } // Step 7 - Position the boxes\n\n\n      var left = leftPadding + leftPaddingAddition;\n      var top = topPadding + topPaddingAddition;\n\n      function placeBox(box) {\n        if (box.isHorizontal()) {\n          box.left = box.fullWidth ? leftPadding : outerBoxSizes.left;\n          box.right = box.fullWidth ? width - rightPadding : outerBoxSizes.left + maxChartAreaWidth;\n          box.top = top;\n          box.bottom = top + box.height; // Move to next point\n\n          top = box.bottom;\n        } else {\n          box.left = left;\n          box.right = left + box.width;\n          box.top = outerBoxSizes.top;\n          box.bottom = outerBoxSizes.top + maxChartAreaHeight; // Move to next point\n\n          left = box.right;\n        }\n      }\n\n      helpers$1.each(leftBoxes.concat(topBoxes), placeBox); // Account for chart width and height\n\n      left += maxChartAreaWidth;\n      top += maxChartAreaHeight;\n      helpers$1.each(rightBoxes, placeBox);\n      helpers$1.each(bottomBoxes, placeBox); // Step 8\n\n      chart.chartArea = {\n        left: outerBoxSizes.left,\n        top: outerBoxSizes.top,\n        right: outerBoxSizes.left + maxChartAreaWidth,\n        bottom: outerBoxSizes.top + maxChartAreaHeight\n      }; // Step 9\n\n      helpers$1.each(chartAreaBoxes, function (box) {\n        box.left = chart.chartArea.left;\n        box.top = chart.chartArea.top;\n        box.right = chart.chartArea.right;\n        box.bottom = chart.chartArea.bottom;\n        box.update(maxChartAreaWidth, maxChartAreaHeight);\n      });\n    }\n  };\n  /**\n   * Platform fallback implementation (minimal).\n   * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939\n   */\n\n  var platform_basic = {\n    acquireContext: function acquireContext(item) {\n      if (item && item.canvas) {\n        // Support for any object associated to a canvas (including a context2d)\n        item = item.canvas;\n      }\n\n      return item && item.getContext('2d') || null;\n    }\n  };\n  var platform_dom = \"/*\\n * DOM element rendering detection\\n * https://davidwalsh.name/detect-node-insertion\\n */\\n@keyframes chartjs-render-animation {\\n\\tfrom { opacity: 0.99; }\\n\\tto { opacity: 1; }\\n}\\n\\n.chartjs-render-monitor {\\n\\tanimation: chartjs-render-animation 0.001s;\\n}\\n\\n/*\\n * DOM element resizing detection\\n * https://github.com/marcj/css-element-queries\\n */\\n.chartjs-size-monitor,\\n.chartjs-size-monitor-expand,\\n.chartjs-size-monitor-shrink {\\n\\tposition: absolute;\\n\\tdirection: ltr;\\n\\tleft: 0;\\n\\ttop: 0;\\n\\tright: 0;\\n\\tbottom: 0;\\n\\toverflow: hidden;\\n\\tpointer-events: none;\\n\\tvisibility: hidden;\\n\\tz-index: -1;\\n}\\n\\n.chartjs-size-monitor-expand > div {\\n\\tposition: absolute;\\n\\twidth: 1000000px;\\n\\theight: 1000000px;\\n\\tleft: 0;\\n\\ttop: 0;\\n}\\n\\n.chartjs-size-monitor-shrink > div {\\n\\tposition: absolute;\\n\\twidth: 200%;\\n\\theight: 200%;\\n\\tleft: 0;\\n\\ttop: 0;\\n}\\n\";\n  var platform_dom$1 =\n  /*#__PURE__*/\n  Object.freeze({\n    default: platform_dom\n  });\n\n  function getCjsExportFromNamespace(n) {\n    return n && n.default || n;\n  }\n\n  var stylesheet = getCjsExportFromNamespace(platform_dom$1);\n  var EXPANDO_KEY = '$chartjs';\n  var CSS_PREFIX = 'chartjs-';\n  var CSS_SIZE_MONITOR = CSS_PREFIX + 'size-monitor';\n  var CSS_RENDER_MONITOR = CSS_PREFIX + 'render-monitor';\n  var CSS_RENDER_ANIMATION = CSS_PREFIX + 'render-animation';\n  var ANIMATION_START_EVENTS = ['animationstart', 'webkitAnimationStart'];\n  /**\n   * DOM event types -> Chart.js event types.\n   * Note: only events with different types are mapped.\n   * @see https://developer.mozilla.org/en-US/docs/Web/Events\n   */\n\n  var EVENT_TYPES = {\n    touchstart: 'mousedown',\n    touchmove: 'mousemove',\n    touchend: 'mouseup',\n    pointerenter: 'mouseenter',\n    pointerdown: 'mousedown',\n    pointermove: 'mousemove',\n    pointerup: 'mouseup',\n    pointerleave: 'mouseout',\n    pointerout: 'mouseout'\n  };\n  /**\n   * The \"used\" size is the final value of a dimension property after all calculations have\n   * been performed. This method uses the computed style of `element` but returns undefined\n   * if the computed style is not expressed in pixels. That can happen in some cases where\n   * `element` has a size relative to its parent and this last one is not yet displayed,\n   * for example because of `display: none` on a parent node.\n   * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value\n   * @returns {number} Size in pixels or undefined if unknown.\n   */\n\n  function readUsedSize(element, property) {\n    var value = helpers$1.getStyle(element, property);\n    var matches = value && value.match(/^(\\d+)(\\.\\d+)?px$/);\n    return matches ? Number(matches[1]) : undefined;\n  }\n  /**\n   * Initializes the canvas style and render size without modifying the canvas display size,\n   * since responsiveness is handled by the controller.resize() method. The config is used\n   * to determine the aspect ratio to apply in case no explicit height has been specified.\n   */\n\n\n  function initCanvas(canvas, config) {\n    var style = canvas.style; // NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it\n    // returns null or '' if no explicit value has been set to the canvas attribute.\n\n    var renderHeight = canvas.getAttribute('height');\n    var renderWidth = canvas.getAttribute('width'); // Chart.js modifies some canvas values that we want to restore on destroy\n\n    canvas[EXPANDO_KEY] = {\n      initial: {\n        height: renderHeight,\n        width: renderWidth,\n        style: {\n          display: style.display,\n          height: style.height,\n          width: style.width\n        }\n      }\n    }; // Force canvas to display as block to avoid extra space caused by inline\n    // elements, which would interfere with the responsive resize process.\n    // https://github.com/chartjs/Chart.js/issues/2538\n\n    style.display = style.display || 'block';\n\n    if (renderWidth === null || renderWidth === '') {\n      var displayWidth = readUsedSize(canvas, 'width');\n\n      if (displayWidth !== undefined) {\n        canvas.width = displayWidth;\n      }\n    }\n\n    if (renderHeight === null || renderHeight === '') {\n      if (canvas.style.height === '') {\n        // If no explicit render height and style height, let's apply the aspect ratio,\n        // which one can be specified by the user but also by charts as default option\n        // (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.\n        canvas.height = canvas.width / (config.options.aspectRatio || 2);\n      } else {\n        var displayHeight = readUsedSize(canvas, 'height');\n\n        if (displayWidth !== undefined) {\n          canvas.height = displayHeight;\n        }\n      }\n    }\n\n    return canvas;\n  }\n  /**\n   * Detects support for options object argument in addEventListener.\n   * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support\n   * @private\n   */\n\n\n  var supportsEventListenerOptions = function () {\n    var supports = false;\n\n    try {\n      var options = Object.defineProperty({}, 'passive', {\n        // eslint-disable-next-line getter-return\n        get: function get() {\n          supports = true;\n        }\n      });\n      window.addEventListener('e', null, options);\n    } catch (e) {// continue regardless of error\n    }\n\n    return supports;\n  }(); // Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.\n  // https://github.com/chartjs/Chart.js/issues/4287\n\n\n  var eventListenerOptions = supportsEventListenerOptions ? {\n    passive: true\n  } : false;\n\n  function addListener(node, type, listener) {\n    node.addEventListener(type, listener, eventListenerOptions);\n  }\n\n  function removeListener(node, type, listener) {\n    node.removeEventListener(type, listener, eventListenerOptions);\n  }\n\n  function createEvent(type, chart, x, y, nativeEvent) {\n    return {\n      type: type,\n      chart: chart,\n      native: nativeEvent || null,\n      x: x !== undefined ? x : null,\n      y: y !== undefined ? y : null\n    };\n  }\n\n  function fromNativeEvent(event, chart) {\n    var type = EVENT_TYPES[event.type] || event.type;\n    var pos = helpers$1.getRelativePosition(event, chart);\n    return createEvent(type, chart, pos.x, pos.y, event);\n  }\n\n  function throttled(fn, thisArg) {\n    var ticking = false;\n    var args = [];\n    return function () {\n      args = Array.prototype.slice.call(arguments);\n      thisArg = thisArg || this;\n\n      if (!ticking) {\n        ticking = true;\n        helpers$1.requestAnimFrame.call(window, function () {\n          ticking = false;\n          fn.apply(thisArg, args);\n        });\n      }\n    };\n  }\n\n  function createDiv(cls) {\n    var el = document.createElement('div');\n    el.className = cls || '';\n    return el;\n  } // Implementation based on https://github.com/marcj/css-element-queries\n\n\n  function createResizer(handler) {\n    var maxSize = 1000000; // NOTE(SB) Don't use innerHTML because it could be considered unsafe.\n    // https://github.com/chartjs/Chart.js/issues/5902\n\n    var resizer = createDiv(CSS_SIZE_MONITOR);\n    var expand = createDiv(CSS_SIZE_MONITOR + '-expand');\n    var shrink = createDiv(CSS_SIZE_MONITOR + '-shrink');\n    expand.appendChild(createDiv());\n    shrink.appendChild(createDiv());\n    resizer.appendChild(expand);\n    resizer.appendChild(shrink);\n\n    resizer._reset = function () {\n      expand.scrollLeft = maxSize;\n      expand.scrollTop = maxSize;\n      shrink.scrollLeft = maxSize;\n      shrink.scrollTop = maxSize;\n    };\n\n    var onScroll = function onScroll() {\n      resizer._reset();\n\n      handler();\n    };\n\n    addListener(expand, 'scroll', onScroll.bind(expand, 'expand'));\n    addListener(shrink, 'scroll', onScroll.bind(shrink, 'shrink'));\n    return resizer;\n  } // https://davidwalsh.name/detect-node-insertion\n\n\n  function watchForRender(node, handler) {\n    var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});\n\n    var proxy = expando.renderProxy = function (e) {\n      if (e.animationName === CSS_RENDER_ANIMATION) {\n        handler();\n      }\n    };\n\n    helpers$1.each(ANIMATION_START_EVENTS, function (type) {\n      addListener(node, type, proxy);\n    }); // #4737: Chrome might skip the CSS animation when the CSS_RENDER_MONITOR class\n    // is removed then added back immediately (same animation frame?). Accessing the\n    // `offsetParent` property will force a reflow and re-evaluate the CSS animation.\n    // https://gist.github.com/paulirish/5d52fb081b3570c81e3a#box-metrics\n    // https://github.com/chartjs/Chart.js/issues/4737\n\n    expando.reflow = !!node.offsetParent;\n    node.classList.add(CSS_RENDER_MONITOR);\n  }\n\n  function unwatchForRender(node) {\n    var expando = node[EXPANDO_KEY] || {};\n    var proxy = expando.renderProxy;\n\n    if (proxy) {\n      helpers$1.each(ANIMATION_START_EVENTS, function (type) {\n        removeListener(node, type, proxy);\n      });\n      delete expando.renderProxy;\n    }\n\n    node.classList.remove(CSS_RENDER_MONITOR);\n  }\n\n  function addResizeListener(node, listener, chart) {\n    var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {}); // Let's keep track of this added resizer and thus avoid DOM query when removing it.\n\n    var resizer = expando.resizer = createResizer(throttled(function () {\n      if (expando.resizer) {\n        var container = chart.options.maintainAspectRatio && node.parentNode;\n        var w = container ? container.clientWidth : 0;\n        listener(createEvent('resize', chart));\n\n        if (container && container.clientWidth < w && chart.canvas) {\n          // If the container size shrank during chart resize, let's assume\n          // scrollbar appeared. So we resize again with the scrollbar visible -\n          // effectively making chart smaller and the scrollbar hidden again.\n          // Because we are inside `throttled`, and currently `ticking`, scroll\n          // events are ignored during this whole 2 resize process.\n          // If we assumed wrong and something else happened, we are resizing\n          // twice in a frame (potential performance issue)\n          listener(createEvent('resize', chart));\n        }\n      }\n    })); // The resizer needs to be attached to the node parent, so we first need to be\n    // sure that `node` is attached to the DOM before injecting the resizer element.\n\n    watchForRender(node, function () {\n      if (expando.resizer) {\n        var container = node.parentNode;\n\n        if (container && container !== resizer.parentNode) {\n          container.insertBefore(resizer, container.firstChild);\n        } // The container size might have changed, let's reset the resizer state.\n\n\n        resizer._reset();\n      }\n    });\n  }\n\n  function removeResizeListener(node) {\n    var expando = node[EXPANDO_KEY] || {};\n    var resizer = expando.resizer;\n    delete expando.resizer;\n    unwatchForRender(node);\n\n    if (resizer && resizer.parentNode) {\n      resizer.parentNode.removeChild(resizer);\n    }\n  }\n\n  function injectCSS(platform, css) {\n    // https://stackoverflow.com/q/3922139\n    var style = platform._style || document.createElement('style');\n\n    if (!platform._style) {\n      platform._style = style;\n      css = '/* Chart.js */\\n' + css;\n      style.setAttribute('type', 'text/css');\n      document.getElementsByTagName('head')[0].appendChild(style);\n    }\n\n    style.appendChild(document.createTextNode(css));\n  }\n\n  var platform_dom$2 = {\n    /**\n     * When `true`, prevents the automatic injection of the stylesheet required to\n     * correctly detect when the chart is added to the DOM and then resized. This\n     * switch has been added to allow external stylesheet (`dist/Chart(.min)?.js`)\n     * to be manually imported to make this library compatible with any CSP.\n     * See https://github.com/chartjs/Chart.js/issues/5208\n     */\n    disableCSSInjection: false,\n\n    /**\n     * This property holds whether this platform is enabled for the current environment.\n     * Currently used by platform.js to select the proper implementation.\n     * @private\n     */\n    _enabled: typeof window !== 'undefined' && typeof document !== 'undefined',\n\n    /**\n     * @private\n     */\n    _ensureLoaded: function _ensureLoaded() {\n      if (this._loaded) {\n        return;\n      }\n\n      this._loaded = true; // https://github.com/chartjs/Chart.js/issues/5208\n\n      if (!this.disableCSSInjection) {\n        injectCSS(this, stylesheet);\n      }\n    },\n    acquireContext: function acquireContext(item, config) {\n      if (typeof item === 'string') {\n        item = document.getElementById(item);\n      } else if (item.length) {\n        // Support for array based queries (such as jQuery)\n        item = item[0];\n      }\n\n      if (item && item.canvas) {\n        // Support for any object associated to a canvas (including a context2d)\n        item = item.canvas;\n      } // To prevent canvas fingerprinting, some add-ons undefine the getContext\n      // method, for example: https://github.com/kkapsner/CanvasBlocker\n      // https://github.com/chartjs/Chart.js/issues/2807\n\n\n      var context = item && item.getContext && item.getContext('2d'); // Load platform resources on first chart creation, to make possible to change\n      // platform options after importing the library (e.g. `disableCSSInjection`).\n\n      this._ensureLoaded(); // `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the item is\n      // inside an iframe or when running in a protected environment. We could guess the\n      // types from their toString() value but let's keep things flexible and assume it's\n      // a sufficient condition if the item has a context2D which has item as `canvas`.\n      // https://github.com/chartjs/Chart.js/issues/3887\n      // https://github.com/chartjs/Chart.js/issues/4102\n      // https://github.com/chartjs/Chart.js/issues/4152\n\n\n      if (context && context.canvas === item) {\n        initCanvas(item, config);\n        return context;\n      }\n\n      return null;\n    },\n    releaseContext: function releaseContext(context) {\n      var canvas = context.canvas;\n\n      if (!canvas[EXPANDO_KEY]) {\n        return;\n      }\n\n      var initial = canvas[EXPANDO_KEY].initial;\n      ['height', 'width'].forEach(function (prop) {\n        var value = initial[prop];\n\n        if (helpers$1.isNullOrUndef(value)) {\n          canvas.removeAttribute(prop);\n        } else {\n          canvas.setAttribute(prop, value);\n        }\n      });\n      helpers$1.each(initial.style || {}, function (value, key) {\n        canvas.style[key] = value;\n      }); // The canvas render size might have been changed (and thus the state stack discarded),\n      // we can't use save() and restore() to restore the initial state. So make sure that at\n      // least the canvas context is reset to the default state by setting the canvas width.\n      // https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html\n      // eslint-disable-next-line no-self-assign\n\n      canvas.width = canvas.width;\n      delete canvas[EXPANDO_KEY];\n    },\n    addEventListener: function addEventListener(chart, type, listener) {\n      var canvas = chart.canvas;\n\n      if (type === 'resize') {\n        // Note: the resize event is not supported on all browsers.\n        addResizeListener(canvas, listener, chart);\n        return;\n      }\n\n      var expando = listener[EXPANDO_KEY] || (listener[EXPANDO_KEY] = {});\n      var proxies = expando.proxies || (expando.proxies = {});\n\n      var proxy = proxies[chart.id + '_' + type] = function (event) {\n        listener(fromNativeEvent(event, chart));\n      };\n\n      addListener(canvas, type, proxy);\n    },\n    removeEventListener: function removeEventListener(chart, type, listener) {\n      var canvas = chart.canvas;\n\n      if (type === 'resize') {\n        // Note: the resize event is not supported on all browsers.\n        removeResizeListener(canvas);\n        return;\n      }\n\n      var expando = listener[EXPANDO_KEY] || {};\n      var proxies = expando.proxies || {};\n      var proxy = proxies[chart.id + '_' + type];\n\n      if (!proxy) {\n        return;\n      }\n\n      removeListener(canvas, type, proxy);\n    }\n  }; // DEPRECATIONS\n\n  /**\n   * Provided for backward compatibility, use EventTarget.addEventListener instead.\n   * EventTarget.addEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\n   * @function Chart.helpers.addEvent\n   * @deprecated since version 2.7.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers$1.addEvent = addListener;\n  /**\n   * Provided for backward compatibility, use EventTarget.removeEventListener instead.\n   * EventTarget.removeEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener\n   * @function Chart.helpers.removeEvent\n   * @deprecated since version 2.7.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers$1.removeEvent = removeListener; // @TODO Make possible to select another platform at build time.\n\n  var implementation = platform_dom$2._enabled ? platform_dom$2 : platform_basic;\n  /**\n   * @namespace Chart.platform\n   * @see https://chartjs.gitbooks.io/proposals/content/Platform.html\n   * @since 2.4.0\n   */\n\n  var platform = helpers$1.extend({\n    /**\n     * @since 2.7.0\n     */\n    initialize: function initialize() {},\n\n    /**\n     * Called at chart construction time, returns a context2d instance implementing\n     * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.\n     * @param {*} item - The native item from which to acquire context (platform specific)\n     * @param {object} options - The chart options\n     * @returns {CanvasRenderingContext2D} context2d instance\n     */\n    acquireContext: function acquireContext() {},\n\n    /**\n     * Called at chart destruction time, releases any resources associated to the context\n     * previously returned by the acquireContext() method.\n     * @param {CanvasRenderingContext2D} context - The context2d instance\n     * @returns {boolean} true if the method succeeded, else false\n     */\n    releaseContext: function releaseContext() {},\n\n    /**\n     * Registers the specified listener on the given chart.\n     * @param {Chart} chart - Chart from which to listen for event\n     * @param {string} type - The ({@link IEvent}) type to listen for\n     * @param {function} listener - Receives a notification (an object that implements\n     * the {@link IEvent} interface) when an event of the specified type occurs.\n     */\n    addEventListener: function addEventListener() {},\n\n    /**\n     * Removes the specified listener previously registered with addEventListener.\n     * @param {Chart} chart - Chart from which to remove the listener\n     * @param {string} type - The ({@link IEvent}) type to remove\n     * @param {function} listener - The listener function to remove from the event target.\n     */\n    removeEventListener: function removeEventListener() {}\n  }, implementation);\n\n  core_defaults._set('global', {\n    plugins: {}\n  });\n  /**\n   * The plugin service singleton\n   * @namespace Chart.plugins\n   * @since 2.1.0\n   */\n\n\n  var core_plugins = {\n    /**\n     * Globally registered plugins.\n     * @private\n     */\n    _plugins: [],\n\n    /**\n     * This identifier is used to invalidate the descriptors cache attached to each chart\n     * when a global plugin is registered or unregistered. In this case, the cache ID is\n     * incremented and descriptors are regenerated during following API calls.\n     * @private\n     */\n    _cacheId: 0,\n\n    /**\n     * Registers the given plugin(s) if not already registered.\n     * @param {IPlugin[]|IPlugin} plugins plugin instance(s).\n     */\n    register: function register(plugins) {\n      var p = this._plugins;\n      [].concat(plugins).forEach(function (plugin) {\n        if (p.indexOf(plugin) === -1) {\n          p.push(plugin);\n        }\n      });\n      this._cacheId++;\n    },\n\n    /**\n     * Unregisters the given plugin(s) only if registered.\n     * @param {IPlugin[]|IPlugin} plugins plugin instance(s).\n     */\n    unregister: function unregister(plugins) {\n      var p = this._plugins;\n      [].concat(plugins).forEach(function (plugin) {\n        var idx = p.indexOf(plugin);\n\n        if (idx !== -1) {\n          p.splice(idx, 1);\n        }\n      });\n      this._cacheId++;\n    },\n\n    /**\n     * Remove all registered plugins.\n     * @since 2.1.5\n     */\n    clear: function clear() {\n      this._plugins = [];\n      this._cacheId++;\n    },\n\n    /**\n     * Returns the number of registered plugins?\n     * @returns {number}\n     * @since 2.1.5\n     */\n    count: function count() {\n      return this._plugins.length;\n    },\n\n    /**\n     * Returns all registered plugin instances.\n     * @returns {IPlugin[]} array of plugin objects.\n     * @since 2.1.5\n     */\n    getAll: function getAll() {\n      return this._plugins;\n    },\n\n    /**\n     * Calls enabled plugins for `chart` on the specified hook and with the given args.\n     * This method immediately returns as soon as a plugin explicitly returns false. The\n     * returned value can be used, for instance, to interrupt the current action.\n     * @param {Chart} chart - The chart instance for which plugins should be called.\n     * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n     * @param {Array} [args] - Extra arguments to apply to the hook call.\n     * @returns {boolean} false if any of the plugins return false, else returns true.\n     */\n    notify: function notify(chart, hook, args) {\n      var descriptors = this.descriptors(chart);\n      var ilen = descriptors.length;\n      var i, descriptor, plugin, params, method;\n\n      for (i = 0; i < ilen; ++i) {\n        descriptor = descriptors[i];\n        plugin = descriptor.plugin;\n        method = plugin[hook];\n\n        if (typeof method === 'function') {\n          params = [chart].concat(args || []);\n          params.push(descriptor.options);\n\n          if (method.apply(plugin, params) === false) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    },\n\n    /**\n     * Returns descriptors of enabled plugins for the given chart.\n     * @returns {object[]} [{ plugin, options }]\n     * @private\n     */\n    descriptors: function descriptors(chart) {\n      var cache = chart.$plugins || (chart.$plugins = {});\n\n      if (cache.id === this._cacheId) {\n        return cache.descriptors;\n      }\n\n      var plugins = [];\n      var descriptors = [];\n      var config = chart && chart.config || {};\n      var options = config.options && config.options.plugins || {};\n\n      this._plugins.concat(config.plugins || []).forEach(function (plugin) {\n        var idx = plugins.indexOf(plugin);\n\n        if (idx !== -1) {\n          return;\n        }\n\n        var id = plugin.id;\n        var opts = options[id];\n\n        if (opts === false) {\n          return;\n        }\n\n        if (opts === true) {\n          opts = helpers$1.clone(core_defaults.global.plugins[id]);\n        }\n\n        plugins.push(plugin);\n        descriptors.push({\n          plugin: plugin,\n          options: opts || {}\n        });\n      });\n\n      cache.descriptors = descriptors;\n      cache.id = this._cacheId;\n      return descriptors;\n    },\n\n    /**\n     * Invalidates cache for the given chart: descriptors hold a reference on plugin option,\n     * but in some cases, this reference can be changed by the user when updating options.\n     * https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\n     * @private\n     */\n    _invalidate: function _invalidate(chart) {\n      delete chart.$plugins;\n    }\n  };\n  var core_scaleService = {\n    // Scale registration object. Extensions can register new scale types (such as log or DB scales) and then\n    // use the new chart options to grab the correct scale\n    constructors: {},\n    // Use a registration function so that we can move to an ES6 map when we no longer need to support\n    // old browsers\n    // Scale config defaults\n    defaults: {},\n    registerScaleType: function registerScaleType(type, scaleConstructor, scaleDefaults) {\n      this.constructors[type] = scaleConstructor;\n      this.defaults[type] = helpers$1.clone(scaleDefaults);\n    },\n    getScaleConstructor: function getScaleConstructor(type) {\n      return this.constructors.hasOwnProperty(type) ? this.constructors[type] : undefined;\n    },\n    getScaleDefaults: function getScaleDefaults(type) {\n      // Return the scale defaults merged with the global settings so that we always use the latest ones\n      return this.defaults.hasOwnProperty(type) ? helpers$1.merge({}, [core_defaults.scale, this.defaults[type]]) : {};\n    },\n    updateScaleDefaults: function updateScaleDefaults(type, additions) {\n      var me = this;\n\n      if (me.defaults.hasOwnProperty(type)) {\n        me.defaults[type] = helpers$1.extend(me.defaults[type], additions);\n      }\n    },\n    addScalesToLayout: function addScalesToLayout(chart) {\n      // Adds each scale to the chart.boxes array to be sized accordingly\n      helpers$1.each(chart.scales, function (scale) {\n        // Set ILayoutItem parameters for backwards compatibility\n        scale.fullWidth = scale.options.fullWidth;\n        scale.position = scale.options.position;\n        scale.weight = scale.options.weight;\n        core_layouts.addBox(chart, scale);\n      });\n    }\n  };\n  var valueOrDefault$7 = helpers$1.valueOrDefault;\n\n  core_defaults._set('global', {\n    tooltips: {\n      enabled: true,\n      custom: null,\n      mode: 'nearest',\n      position: 'average',\n      intersect: true,\n      backgroundColor: 'rgba(0,0,0,0.8)',\n      titleFontStyle: 'bold',\n      titleSpacing: 2,\n      titleMarginBottom: 6,\n      titleFontColor: '#fff',\n      titleAlign: 'left',\n      bodySpacing: 2,\n      bodyFontColor: '#fff',\n      bodyAlign: 'left',\n      footerFontStyle: 'bold',\n      footerSpacing: 2,\n      footerMarginTop: 6,\n      footerFontColor: '#fff',\n      footerAlign: 'left',\n      yPadding: 6,\n      xPadding: 6,\n      caretPadding: 2,\n      caretSize: 5,\n      cornerRadius: 6,\n      multiKeyBackground: '#fff',\n      displayColors: true,\n      borderColor: 'rgba(0,0,0,0)',\n      borderWidth: 0,\n      callbacks: {\n        // Args are: (tooltipItems, data)\n        beforeTitle: helpers$1.noop,\n        title: function title(tooltipItems, data) {\n          var title = '';\n          var labels = data.labels;\n          var labelCount = labels ? labels.length : 0;\n\n          if (tooltipItems.length > 0) {\n            var item = tooltipItems[0];\n\n            if (item.label) {\n              title = item.label;\n            } else if (item.xLabel) {\n              title = item.xLabel;\n            } else if (labelCount > 0 && item.index < labelCount) {\n              title = labels[item.index];\n            }\n          }\n\n          return title;\n        },\n        afterTitle: helpers$1.noop,\n        // Args are: (tooltipItems, data)\n        beforeBody: helpers$1.noop,\n        // Args are: (tooltipItem, data)\n        beforeLabel: helpers$1.noop,\n        label: function label(tooltipItem, data) {\n          var label = data.datasets[tooltipItem.datasetIndex].label || '';\n\n          if (label) {\n            label += ': ';\n          }\n\n          if (!helpers$1.isNullOrUndef(tooltipItem.value)) {\n            label += tooltipItem.value;\n          } else {\n            label += tooltipItem.yLabel;\n          }\n\n          return label;\n        },\n        labelColor: function labelColor(tooltipItem, chart) {\n          var meta = chart.getDatasetMeta(tooltipItem.datasetIndex);\n          var activeElement = meta.data[tooltipItem.index];\n          var view = activeElement._view;\n          return {\n            borderColor: view.borderColor,\n            backgroundColor: view.backgroundColor\n          };\n        },\n        labelTextColor: function labelTextColor() {\n          return this._options.bodyFontColor;\n        },\n        afterLabel: helpers$1.noop,\n        // Args are: (tooltipItems, data)\n        afterBody: helpers$1.noop,\n        // Args are: (tooltipItems, data)\n        beforeFooter: helpers$1.noop,\n        footer: helpers$1.noop,\n        afterFooter: helpers$1.noop\n      }\n    }\n  });\n\n  var positioners = {\n    /**\n     * Average mode places the tooltip at the average position of the elements shown\n     * @function Chart.Tooltip.positioners.average\n     * @param elements {ChartElement[]} the elements being displayed in the tooltip\n     * @returns {object} tooltip position\n     */\n    average: function average(elements) {\n      if (!elements.length) {\n        return false;\n      }\n\n      var i, len;\n      var x = 0;\n      var y = 0;\n      var count = 0;\n\n      for (i = 0, len = elements.length; i < len; ++i) {\n        var el = elements[i];\n\n        if (el && el.hasValue()) {\n          var pos = el.tooltipPosition();\n          x += pos.x;\n          y += pos.y;\n          ++count;\n        }\n      }\n\n      return {\n        x: x / count,\n        y: y / count\n      };\n    },\n\n    /**\n     * Gets the tooltip position nearest of the item nearest to the event position\n     * @function Chart.Tooltip.positioners.nearest\n     * @param elements {Chart.Element[]} the tooltip elements\n     * @param eventPosition {object} the position of the event in canvas coordinates\n     * @returns {object} the tooltip position\n     */\n    nearest: function nearest(elements, eventPosition) {\n      var x = eventPosition.x;\n      var y = eventPosition.y;\n      var minDistance = Number.POSITIVE_INFINITY;\n      var i, len, nearestElement;\n\n      for (i = 0, len = elements.length; i < len; ++i) {\n        var el = elements[i];\n\n        if (el && el.hasValue()) {\n          var center = el.getCenterPoint();\n          var d = helpers$1.distanceBetweenPoints(eventPosition, center);\n\n          if (d < minDistance) {\n            minDistance = d;\n            nearestElement = el;\n          }\n        }\n      }\n\n      if (nearestElement) {\n        var tp = nearestElement.tooltipPosition();\n        x = tp.x;\n        y = tp.y;\n      }\n\n      return {\n        x: x,\n        y: y\n      };\n    }\n  }; // Helper to push or concat based on if the 2nd parameter is an array or not\n\n  function pushOrConcat(base, toPush) {\n    if (toPush) {\n      if (helpers$1.isArray(toPush)) {\n        // base = base.concat(toPush);\n        Array.prototype.push.apply(base, toPush);\n      } else {\n        base.push(toPush);\n      }\n    }\n\n    return base;\n  }\n  /**\n   * Returns array of strings split by newline\n   * @param {string} value - The value to split by newline.\n   * @returns {string[]} value if newline present - Returned from String split() method\n   * @function\n   */\n\n\n  function splitNewlines(str) {\n    if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n      return str.split('\\n');\n    }\n\n    return str;\n  }\n  /**\n   * Private helper to create a tooltip item model\n   * @param element - the chart element (point, arc, bar) to create the tooltip item for\n   * @return new tooltip item\n   */\n\n\n  function createTooltipItem(element) {\n    var xScale = element._xScale;\n    var yScale = element._yScale || element._scale; // handle radar || polarArea charts\n\n    var index = element._index;\n    var datasetIndex = element._datasetIndex;\n\n    var controller = element._chart.getDatasetMeta(datasetIndex).controller;\n\n    var indexScale = controller._getIndexScale();\n\n    var valueScale = controller._getValueScale();\n\n    return {\n      xLabel: xScale ? xScale.getLabelForIndex(index, datasetIndex) : '',\n      yLabel: yScale ? yScale.getLabelForIndex(index, datasetIndex) : '',\n      label: indexScale ? '' + indexScale.getLabelForIndex(index, datasetIndex) : '',\n      value: valueScale ? '' + valueScale.getLabelForIndex(index, datasetIndex) : '',\n      index: index,\n      datasetIndex: datasetIndex,\n      x: element._model.x,\n      y: element._model.y\n    };\n  }\n  /**\n   * Helper to get the reset model for the tooltip\n   * @param tooltipOpts {object} the tooltip options\n   */\n\n\n  function getBaseModel(tooltipOpts) {\n    var globalDefaults = core_defaults.global;\n    return {\n      // Positioning\n      xPadding: tooltipOpts.xPadding,\n      yPadding: tooltipOpts.yPadding,\n      xAlign: tooltipOpts.xAlign,\n      yAlign: tooltipOpts.yAlign,\n      // Body\n      bodyFontColor: tooltipOpts.bodyFontColor,\n      _bodyFontFamily: valueOrDefault$7(tooltipOpts.bodyFontFamily, globalDefaults.defaultFontFamily),\n      _bodyFontStyle: valueOrDefault$7(tooltipOpts.bodyFontStyle, globalDefaults.defaultFontStyle),\n      _bodyAlign: tooltipOpts.bodyAlign,\n      bodyFontSize: valueOrDefault$7(tooltipOpts.bodyFontSize, globalDefaults.defaultFontSize),\n      bodySpacing: tooltipOpts.bodySpacing,\n      // Title\n      titleFontColor: tooltipOpts.titleFontColor,\n      _titleFontFamily: valueOrDefault$7(tooltipOpts.titleFontFamily, globalDefaults.defaultFontFamily),\n      _titleFontStyle: valueOrDefault$7(tooltipOpts.titleFontStyle, globalDefaults.defaultFontStyle),\n      titleFontSize: valueOrDefault$7(tooltipOpts.titleFontSize, globalDefaults.defaultFontSize),\n      _titleAlign: tooltipOpts.titleAlign,\n      titleSpacing: tooltipOpts.titleSpacing,\n      titleMarginBottom: tooltipOpts.titleMarginBottom,\n      // Footer\n      footerFontColor: tooltipOpts.footerFontColor,\n      _footerFontFamily: valueOrDefault$7(tooltipOpts.footerFontFamily, globalDefaults.defaultFontFamily),\n      _footerFontStyle: valueOrDefault$7(tooltipOpts.footerFontStyle, globalDefaults.defaultFontStyle),\n      footerFontSize: valueOrDefault$7(tooltipOpts.footerFontSize, globalDefaults.defaultFontSize),\n      _footerAlign: tooltipOpts.footerAlign,\n      footerSpacing: tooltipOpts.footerSpacing,\n      footerMarginTop: tooltipOpts.footerMarginTop,\n      // Appearance\n      caretSize: tooltipOpts.caretSize,\n      cornerRadius: tooltipOpts.cornerRadius,\n      backgroundColor: tooltipOpts.backgroundColor,\n      opacity: 0,\n      legendColorBackground: tooltipOpts.multiKeyBackground,\n      displayColors: tooltipOpts.displayColors,\n      borderColor: tooltipOpts.borderColor,\n      borderWidth: tooltipOpts.borderWidth\n    };\n  }\n  /**\n   * Get the size of the tooltip\n   */\n\n\n  function getTooltipSize(tooltip, model) {\n    var ctx = tooltip._chart.ctx;\n    var height = model.yPadding * 2; // Tooltip Padding\n\n    var width = 0; // Count of all lines in the body\n\n    var body = model.body;\n    var combinedBodyLength = body.reduce(function (count, bodyItem) {\n      return count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;\n    }, 0);\n    combinedBodyLength += model.beforeBody.length + model.afterBody.length;\n    var titleLineCount = model.title.length;\n    var footerLineCount = model.footer.length;\n    var titleFontSize = model.titleFontSize;\n    var bodyFontSize = model.bodyFontSize;\n    var footerFontSize = model.footerFontSize;\n    height += titleLineCount * titleFontSize; // Title Lines\n\n    height += titleLineCount ? (titleLineCount - 1) * model.titleSpacing : 0; // Title Line Spacing\n\n    height += titleLineCount ? model.titleMarginBottom : 0; // Title's bottom Margin\n\n    height += combinedBodyLength * bodyFontSize; // Body Lines\n\n    height += combinedBodyLength ? (combinedBodyLength - 1) * model.bodySpacing : 0; // Body Line Spacing\n\n    height += footerLineCount ? model.footerMarginTop : 0; // Footer Margin\n\n    height += footerLineCount * footerFontSize; // Footer Lines\n\n    height += footerLineCount ? (footerLineCount - 1) * model.footerSpacing : 0; // Footer Line Spacing\n    // Title width\n\n    var widthPadding = 0;\n\n    var maxLineWidth = function maxLineWidth(line) {\n      width = Math.max(width, ctx.measureText(line).width + widthPadding);\n    };\n\n    ctx.font = helpers$1.fontString(titleFontSize, model._titleFontStyle, model._titleFontFamily);\n    helpers$1.each(model.title, maxLineWidth); // Body width\n\n    ctx.font = helpers$1.fontString(bodyFontSize, model._bodyFontStyle, model._bodyFontFamily);\n    helpers$1.each(model.beforeBody.concat(model.afterBody), maxLineWidth); // Body lines may include some extra width due to the color box\n\n    widthPadding = model.displayColors ? bodyFontSize + 2 : 0;\n    helpers$1.each(body, function (bodyItem) {\n      helpers$1.each(bodyItem.before, maxLineWidth);\n      helpers$1.each(bodyItem.lines, maxLineWidth);\n      helpers$1.each(bodyItem.after, maxLineWidth);\n    }); // Reset back to 0\n\n    widthPadding = 0; // Footer width\n\n    ctx.font = helpers$1.fontString(footerFontSize, model._footerFontStyle, model._footerFontFamily);\n    helpers$1.each(model.footer, maxLineWidth); // Add padding\n\n    width += 2 * model.xPadding;\n    return {\n      width: width,\n      height: height\n    };\n  }\n  /**\n   * Helper to get the alignment of a tooltip given the size\n   */\n\n\n  function determineAlignment(tooltip, size) {\n    var model = tooltip._model;\n    var chart = tooltip._chart;\n    var chartArea = tooltip._chart.chartArea;\n    var xAlign = 'center';\n    var yAlign = 'center';\n\n    if (model.y < size.height) {\n      yAlign = 'top';\n    } else if (model.y > chart.height - size.height) {\n      yAlign = 'bottom';\n    }\n\n    var lf, rf; // functions to determine left, right alignment\n\n    var olf, orf; // functions to determine if left/right alignment causes tooltip to go outside chart\n\n    var yf; // function to get the y alignment if the tooltip goes outside of the left or right edges\n\n    var midX = (chartArea.left + chartArea.right) / 2;\n    var midY = (chartArea.top + chartArea.bottom) / 2;\n\n    if (yAlign === 'center') {\n      lf = function lf(x) {\n        return x <= midX;\n      };\n\n      rf = function rf(x) {\n        return x > midX;\n      };\n    } else {\n      lf = function lf(x) {\n        return x <= size.width / 2;\n      };\n\n      rf = function rf(x) {\n        return x >= chart.width - size.width / 2;\n      };\n    }\n\n    olf = function olf(x) {\n      return x + size.width + model.caretSize + model.caretPadding > chart.width;\n    };\n\n    orf = function orf(x) {\n      return x - size.width - model.caretSize - model.caretPadding < 0;\n    };\n\n    yf = function yf(y) {\n      return y <= midY ? 'top' : 'bottom';\n    };\n\n    if (lf(model.x)) {\n      xAlign = 'left'; // Is tooltip too wide and goes over the right side of the chart.?\n\n      if (olf(model.x)) {\n        xAlign = 'center';\n        yAlign = yf(model.y);\n      }\n    } else if (rf(model.x)) {\n      xAlign = 'right'; // Is tooltip too wide and goes outside left edge of canvas?\n\n      if (orf(model.x)) {\n        xAlign = 'center';\n        yAlign = yf(model.y);\n      }\n    }\n\n    var opts = tooltip._options;\n    return {\n      xAlign: opts.xAlign ? opts.xAlign : xAlign,\n      yAlign: opts.yAlign ? opts.yAlign : yAlign\n    };\n  }\n  /**\n   * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment\n   */\n\n\n  function getBackgroundPoint(vm, size, alignment, chart) {\n    // Background Position\n    var x = vm.x;\n    var y = vm.y;\n    var caretSize = vm.caretSize;\n    var caretPadding = vm.caretPadding;\n    var cornerRadius = vm.cornerRadius;\n    var xAlign = alignment.xAlign;\n    var yAlign = alignment.yAlign;\n    var paddingAndSize = caretSize + caretPadding;\n    var radiusAndPadding = cornerRadius + caretPadding;\n\n    if (xAlign === 'right') {\n      x -= size.width;\n    } else if (xAlign === 'center') {\n      x -= size.width / 2;\n\n      if (x + size.width > chart.width) {\n        x = chart.width - size.width;\n      }\n\n      if (x < 0) {\n        x = 0;\n      }\n    }\n\n    if (yAlign === 'top') {\n      y += paddingAndSize;\n    } else if (yAlign === 'bottom') {\n      y -= size.height + paddingAndSize;\n    } else {\n      y -= size.height / 2;\n    }\n\n    if (yAlign === 'center') {\n      if (xAlign === 'left') {\n        x += paddingAndSize;\n      } else if (xAlign === 'right') {\n        x -= paddingAndSize;\n      }\n    } else if (xAlign === 'left') {\n      x -= radiusAndPadding;\n    } else if (xAlign === 'right') {\n      x += radiusAndPadding;\n    }\n\n    return {\n      x: x,\n      y: y\n    };\n  }\n\n  function getAlignedX(vm, align) {\n    return align === 'center' ? vm.x + vm.width / 2 : align === 'right' ? vm.x + vm.width - vm.xPadding : vm.x + vm.xPadding;\n  }\n  /**\n   * Helper to build before and after body lines\n   */\n\n\n  function getBeforeAfterBodyLines(callback) {\n    return pushOrConcat([], splitNewlines(callback));\n  }\n\n  var exports$3 = core_element.extend({\n    initialize: function initialize() {\n      this._model = getBaseModel(this._options);\n      this._lastActive = [];\n    },\n    // Get the title\n    // Args are: (tooltipItem, data)\n    getTitle: function getTitle() {\n      var me = this;\n      var opts = me._options;\n      var callbacks = opts.callbacks;\n      var beforeTitle = callbacks.beforeTitle.apply(me, arguments);\n      var title = callbacks.title.apply(me, arguments);\n      var afterTitle = callbacks.afterTitle.apply(me, arguments);\n      var lines = [];\n      lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n      lines = pushOrConcat(lines, splitNewlines(title));\n      lines = pushOrConcat(lines, splitNewlines(afterTitle));\n      return lines;\n    },\n    // Args are: (tooltipItem, data)\n    getBeforeBody: function getBeforeBody() {\n      return getBeforeAfterBodyLines(this._options.callbacks.beforeBody.apply(this, arguments));\n    },\n    // Args are: (tooltipItem, data)\n    getBody: function getBody(tooltipItems, data) {\n      var me = this;\n      var callbacks = me._options.callbacks;\n      var bodyItems = [];\n      helpers$1.each(tooltipItems, function (tooltipItem) {\n        var bodyItem = {\n          before: [],\n          lines: [],\n          after: []\n        };\n        pushOrConcat(bodyItem.before, splitNewlines(callbacks.beforeLabel.call(me, tooltipItem, data)));\n        pushOrConcat(bodyItem.lines, callbacks.label.call(me, tooltipItem, data));\n        pushOrConcat(bodyItem.after, splitNewlines(callbacks.afterLabel.call(me, tooltipItem, data)));\n        bodyItems.push(bodyItem);\n      });\n      return bodyItems;\n    },\n    // Args are: (tooltipItem, data)\n    getAfterBody: function getAfterBody() {\n      return getBeforeAfterBodyLines(this._options.callbacks.afterBody.apply(this, arguments));\n    },\n    // Get the footer and beforeFooter and afterFooter lines\n    // Args are: (tooltipItem, data)\n    getFooter: function getFooter() {\n      var me = this;\n      var callbacks = me._options.callbacks;\n      var beforeFooter = callbacks.beforeFooter.apply(me, arguments);\n      var footer = callbacks.footer.apply(me, arguments);\n      var afterFooter = callbacks.afterFooter.apply(me, arguments);\n      var lines = [];\n      lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n      lines = pushOrConcat(lines, splitNewlines(footer));\n      lines = pushOrConcat(lines, splitNewlines(afterFooter));\n      return lines;\n    },\n    update: function update(changed) {\n      var me = this;\n      var opts = me._options; // Need to regenerate the model because its faster than using extend and it is necessary due to the optimization in Chart.Element.transition\n      // that does _view = _model if ease === 1. This causes the 2nd tooltip update to set properties in both the view and model at the same time\n      // which breaks any animations.\n\n      var existingModel = me._model;\n      var model = me._model = getBaseModel(opts);\n      var active = me._active;\n      var data = me._data; // In the case where active.length === 0 we need to keep these at existing values for good animations\n\n      var alignment = {\n        xAlign: existingModel.xAlign,\n        yAlign: existingModel.yAlign\n      };\n      var backgroundPoint = {\n        x: existingModel.x,\n        y: existingModel.y\n      };\n      var tooltipSize = {\n        width: existingModel.width,\n        height: existingModel.height\n      };\n      var tooltipPosition = {\n        x: existingModel.caretX,\n        y: existingModel.caretY\n      };\n      var i, len;\n\n      if (active.length) {\n        model.opacity = 1;\n        var labelColors = [];\n        var labelTextColors = [];\n        tooltipPosition = positioners[opts.position].call(me, active, me._eventPosition);\n        var tooltipItems = [];\n\n        for (i = 0, len = active.length; i < len; ++i) {\n          tooltipItems.push(createTooltipItem(active[i]));\n        } // If the user provided a filter function, use it to modify the tooltip items\n\n\n        if (opts.filter) {\n          tooltipItems = tooltipItems.filter(function (a) {\n            return opts.filter(a, data);\n          });\n        } // If the user provided a sorting function, use it to modify the tooltip items\n\n\n        if (opts.itemSort) {\n          tooltipItems = tooltipItems.sort(function (a, b) {\n            return opts.itemSort(a, b, data);\n          });\n        } // Determine colors for boxes\n\n\n        helpers$1.each(tooltipItems, function (tooltipItem) {\n          labelColors.push(opts.callbacks.labelColor.call(me, tooltipItem, me._chart));\n          labelTextColors.push(opts.callbacks.labelTextColor.call(me, tooltipItem, me._chart));\n        }); // Build the Text Lines\n\n        model.title = me.getTitle(tooltipItems, data);\n        model.beforeBody = me.getBeforeBody(tooltipItems, data);\n        model.body = me.getBody(tooltipItems, data);\n        model.afterBody = me.getAfterBody(tooltipItems, data);\n        model.footer = me.getFooter(tooltipItems, data); // Initial positioning and colors\n\n        model.x = tooltipPosition.x;\n        model.y = tooltipPosition.y;\n        model.caretPadding = opts.caretPadding;\n        model.labelColors = labelColors;\n        model.labelTextColors = labelTextColors; // data points\n\n        model.dataPoints = tooltipItems; // We need to determine alignment of the tooltip\n\n        tooltipSize = getTooltipSize(this, model);\n        alignment = determineAlignment(this, tooltipSize); // Final Size and Position\n\n        backgroundPoint = getBackgroundPoint(model, tooltipSize, alignment, me._chart);\n      } else {\n        model.opacity = 0;\n      }\n\n      model.xAlign = alignment.xAlign;\n      model.yAlign = alignment.yAlign;\n      model.x = backgroundPoint.x;\n      model.y = backgroundPoint.y;\n      model.width = tooltipSize.width;\n      model.height = tooltipSize.height; // Point where the caret on the tooltip points to\n\n      model.caretX = tooltipPosition.x;\n      model.caretY = tooltipPosition.y;\n      me._model = model;\n\n      if (changed && opts.custom) {\n        opts.custom.call(me, model);\n      }\n\n      return me;\n    },\n    drawCaret: function drawCaret(tooltipPoint, size) {\n      var ctx = this._chart.ctx;\n      var vm = this._view;\n      var caretPosition = this.getCaretPosition(tooltipPoint, size, vm);\n      ctx.lineTo(caretPosition.x1, caretPosition.y1);\n      ctx.lineTo(caretPosition.x2, caretPosition.y2);\n      ctx.lineTo(caretPosition.x3, caretPosition.y3);\n    },\n    getCaretPosition: function getCaretPosition(tooltipPoint, size, vm) {\n      var x1, x2, x3, y1, y2, y3;\n      var caretSize = vm.caretSize;\n      var cornerRadius = vm.cornerRadius;\n      var xAlign = vm.xAlign;\n      var yAlign = vm.yAlign;\n      var ptX = tooltipPoint.x;\n      var ptY = tooltipPoint.y;\n      var width = size.width;\n      var height = size.height;\n\n      if (yAlign === 'center') {\n        y2 = ptY + height / 2;\n\n        if (xAlign === 'left') {\n          x1 = ptX;\n          x2 = x1 - caretSize;\n          x3 = x1;\n          y1 = y2 + caretSize;\n          y3 = y2 - caretSize;\n        } else {\n          x1 = ptX + width;\n          x2 = x1 + caretSize;\n          x3 = x1;\n          y1 = y2 - caretSize;\n          y3 = y2 + caretSize;\n        }\n      } else {\n        if (xAlign === 'left') {\n          x2 = ptX + cornerRadius + caretSize;\n          x1 = x2 - caretSize;\n          x3 = x2 + caretSize;\n        } else if (xAlign === 'right') {\n          x2 = ptX + width - cornerRadius - caretSize;\n          x1 = x2 - caretSize;\n          x3 = x2 + caretSize;\n        } else {\n          x2 = vm.caretX;\n          x1 = x2 - caretSize;\n          x3 = x2 + caretSize;\n        }\n\n        if (yAlign === 'top') {\n          y1 = ptY;\n          y2 = y1 - caretSize;\n          y3 = y1;\n        } else {\n          y1 = ptY + height;\n          y2 = y1 + caretSize;\n          y3 = y1; // invert drawing order\n\n          var tmp = x3;\n          x3 = x1;\n          x1 = tmp;\n        }\n      }\n\n      return {\n        x1: x1,\n        x2: x2,\n        x3: x3,\n        y1: y1,\n        y2: y2,\n        y3: y3\n      };\n    },\n    drawTitle: function drawTitle(pt, vm, ctx) {\n      var title = vm.title;\n\n      if (title.length) {\n        pt.x = getAlignedX(vm, vm._titleAlign);\n        ctx.textAlign = vm._titleAlign;\n        ctx.textBaseline = 'top';\n        var titleFontSize = vm.titleFontSize;\n        var titleSpacing = vm.titleSpacing;\n        ctx.fillStyle = vm.titleFontColor;\n        ctx.font = helpers$1.fontString(titleFontSize, vm._titleFontStyle, vm._titleFontFamily);\n        var i, len;\n\n        for (i = 0, len = title.length; i < len; ++i) {\n          ctx.fillText(title[i], pt.x, pt.y);\n          pt.y += titleFontSize + titleSpacing; // Line Height and spacing\n\n          if (i + 1 === title.length) {\n            pt.y += vm.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing\n          }\n        }\n      }\n    },\n    drawBody: function drawBody(pt, vm, ctx) {\n      var bodyFontSize = vm.bodyFontSize;\n      var bodySpacing = vm.bodySpacing;\n      var bodyAlign = vm._bodyAlign;\n      var body = vm.body;\n      var drawColorBoxes = vm.displayColors;\n      var labelColors = vm.labelColors;\n      var xLinePadding = 0;\n      var colorX = drawColorBoxes ? getAlignedX(vm, 'left') : 0;\n      var textColor;\n      ctx.textAlign = bodyAlign;\n      ctx.textBaseline = 'top';\n      ctx.font = helpers$1.fontString(bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily);\n      pt.x = getAlignedX(vm, bodyAlign); // Before Body\n\n      var fillLineOfText = function fillLineOfText(line) {\n        ctx.fillText(line, pt.x + xLinePadding, pt.y);\n        pt.y += bodyFontSize + bodySpacing;\n      }; // Before body lines\n\n\n      ctx.fillStyle = vm.bodyFontColor;\n      helpers$1.each(vm.beforeBody, fillLineOfText);\n      xLinePadding = drawColorBoxes && bodyAlign !== 'right' ? bodyAlign === 'center' ? bodyFontSize / 2 + 1 : bodyFontSize + 2 : 0; // Draw body lines now\n\n      helpers$1.each(body, function (bodyItem, i) {\n        textColor = vm.labelTextColors[i];\n        ctx.fillStyle = textColor;\n        helpers$1.each(bodyItem.before, fillLineOfText);\n        helpers$1.each(bodyItem.lines, function (line) {\n          // Draw Legend-like boxes if needed\n          if (drawColorBoxes) {\n            // Fill a white rect so that colours merge nicely if the opacity is < 1\n            ctx.fillStyle = vm.legendColorBackground;\n            ctx.fillRect(colorX, pt.y, bodyFontSize, bodyFontSize); // Border\n\n            ctx.lineWidth = 1;\n            ctx.strokeStyle = labelColors[i].borderColor;\n            ctx.strokeRect(colorX, pt.y, bodyFontSize, bodyFontSize); // Inner square\n\n            ctx.fillStyle = labelColors[i].backgroundColor;\n            ctx.fillRect(colorX + 1, pt.y + 1, bodyFontSize - 2, bodyFontSize - 2);\n            ctx.fillStyle = textColor;\n          }\n\n          fillLineOfText(line);\n        });\n        helpers$1.each(bodyItem.after, fillLineOfText);\n      }); // Reset back to 0 for after body\n\n      xLinePadding = 0; // After body lines\n\n      helpers$1.each(vm.afterBody, fillLineOfText);\n      pt.y -= bodySpacing; // Remove last body spacing\n    },\n    drawFooter: function drawFooter(pt, vm, ctx) {\n      var footer = vm.footer;\n\n      if (footer.length) {\n        pt.x = getAlignedX(vm, vm._footerAlign);\n        pt.y += vm.footerMarginTop;\n        ctx.textAlign = vm._footerAlign;\n        ctx.textBaseline = 'top';\n        ctx.fillStyle = vm.footerFontColor;\n        ctx.font = helpers$1.fontString(vm.footerFontSize, vm._footerFontStyle, vm._footerFontFamily);\n        helpers$1.each(footer, function (line) {\n          ctx.fillText(line, pt.x, pt.y);\n          pt.y += vm.footerFontSize + vm.footerSpacing;\n        });\n      }\n    },\n    drawBackground: function drawBackground(pt, vm, ctx, tooltipSize) {\n      ctx.fillStyle = vm.backgroundColor;\n      ctx.strokeStyle = vm.borderColor;\n      ctx.lineWidth = vm.borderWidth;\n      var xAlign = vm.xAlign;\n      var yAlign = vm.yAlign;\n      var x = pt.x;\n      var y = pt.y;\n      var width = tooltipSize.width;\n      var height = tooltipSize.height;\n      var radius = vm.cornerRadius;\n      ctx.beginPath();\n      ctx.moveTo(x + radius, y);\n\n      if (yAlign === 'top') {\n        this.drawCaret(pt, tooltipSize);\n      }\n\n      ctx.lineTo(x + width - radius, y);\n      ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n\n      if (yAlign === 'center' && xAlign === 'right') {\n        this.drawCaret(pt, tooltipSize);\n      }\n\n      ctx.lineTo(x + width, y + height - radius);\n      ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n\n      if (yAlign === 'bottom') {\n        this.drawCaret(pt, tooltipSize);\n      }\n\n      ctx.lineTo(x + radius, y + height);\n      ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n\n      if (yAlign === 'center' && xAlign === 'left') {\n        this.drawCaret(pt, tooltipSize);\n      }\n\n      ctx.lineTo(x, y + radius);\n      ctx.quadraticCurveTo(x, y, x + radius, y);\n      ctx.closePath();\n      ctx.fill();\n\n      if (vm.borderWidth > 0) {\n        ctx.stroke();\n      }\n    },\n    draw: function draw() {\n      var ctx = this._chart.ctx;\n      var vm = this._view;\n\n      if (vm.opacity === 0) {\n        return;\n      }\n\n      var tooltipSize = {\n        width: vm.width,\n        height: vm.height\n      };\n      var pt = {\n        x: vm.x,\n        y: vm.y\n      }; // IE11/Edge does not like very small opacities, so snap to 0\n\n      var opacity = Math.abs(vm.opacity < 1e-3) ? 0 : vm.opacity; // Truthy/falsey value for empty tooltip\n\n      var hasTooltipContent = vm.title.length || vm.beforeBody.length || vm.body.length || vm.afterBody.length || vm.footer.length;\n\n      if (this._options.enabled && hasTooltipContent) {\n        ctx.save();\n        ctx.globalAlpha = opacity; // Draw Background\n\n        this.drawBackground(pt, vm, ctx, tooltipSize); // Draw Title, Body, and Footer\n\n        pt.y += vm.yPadding; // Titles\n\n        this.drawTitle(pt, vm, ctx); // Body\n\n        this.drawBody(pt, vm, ctx); // Footer\n\n        this.drawFooter(pt, vm, ctx);\n        ctx.restore();\n      }\n    },\n\n    /**\n     * Handle an event\n     * @private\n     * @param {IEvent} event - The event to handle\n     * @returns {boolean} true if the tooltip changed\n     */\n    handleEvent: function handleEvent(e) {\n      var me = this;\n      var options = me._options;\n      var changed = false;\n      me._lastActive = me._lastActive || []; // Find Active Elements for tooltips\n\n      if (e.type === 'mouseout') {\n        me._active = [];\n      } else {\n        me._active = me._chart.getElementsAtEventForMode(e, options.mode, options);\n      } // Remember Last Actives\n\n\n      changed = !helpers$1.arrayEquals(me._active, me._lastActive); // Only handle target event on tooltip change\n\n      if (changed) {\n        me._lastActive = me._active;\n\n        if (options.enabled || options.custom) {\n          me._eventPosition = {\n            x: e.x,\n            y: e.y\n          };\n          me.update(true);\n          me.pivot();\n        }\n      }\n\n      return changed;\n    }\n  });\n  /**\n   * @namespace Chart.Tooltip.positioners\n   */\n\n  var positioners_1 = positioners;\n  var core_tooltip = exports$3;\n  core_tooltip.positioners = positioners_1;\n  var valueOrDefault$8 = helpers$1.valueOrDefault;\n\n  core_defaults._set('global', {\n    elements: {},\n    events: ['mousemove', 'mouseout', 'click', 'touchstart', 'touchmove'],\n    hover: {\n      onHover: null,\n      mode: 'nearest',\n      intersect: true,\n      animationDuration: 400\n    },\n    onClick: null,\n    maintainAspectRatio: true,\n    responsive: true,\n    responsiveAnimationDuration: 0\n  });\n  /**\n   * Recursively merge the given config objects representing the `scales` option\n   * by incorporating scale defaults in `xAxes` and `yAxes` array items, then\n   * returns a deep copy of the result, thus doesn't alter inputs.\n   */\n\n\n  function mergeScaleConfig()\n  /* config objects ... */\n  {\n    return helpers$1.merge({}, [].slice.call(arguments), {\n      merger: function merger(key, target, source, options) {\n        if (key === 'xAxes' || key === 'yAxes') {\n          var slen = source[key].length;\n          var i, type, scale;\n\n          if (!target[key]) {\n            target[key] = [];\n          }\n\n          for (i = 0; i < slen; ++i) {\n            scale = source[key][i];\n            type = valueOrDefault$8(scale.type, key === 'xAxes' ? 'category' : 'linear');\n\n            if (i >= target[key].length) {\n              target[key].push({});\n            }\n\n            if (!target[key][i].type || scale.type && scale.type !== target[key][i].type) {\n              // new/untyped scale or type changed: let's apply the new defaults\n              // then merge source scale to correctly overwrite the defaults.\n              helpers$1.merge(target[key][i], [core_scaleService.getScaleDefaults(type), scale]);\n            } else {\n              // scales type are the same\n              helpers$1.merge(target[key][i], scale);\n            }\n          }\n        } else {\n          helpers$1._merger(key, target, source, options);\n        }\n      }\n    });\n  }\n  /**\n   * Recursively merge the given config objects as the root options by handling\n   * default scale options for the `scales` and `scale` properties, then returns\n   * a deep copy of the result, thus doesn't alter inputs.\n   */\n\n\n  function mergeConfig()\n  /* config objects ... */\n  {\n    return helpers$1.merge({}, [].slice.call(arguments), {\n      merger: function merger(key, target, source, options) {\n        var tval = target[key] || {};\n        var sval = source[key];\n\n        if (key === 'scales') {\n          // scale config merging is complex. Add our own function here for that\n          target[key] = mergeScaleConfig(tval, sval);\n        } else if (key === 'scale') {\n          // used in polar area & radar charts since there is only one scale\n          target[key] = helpers$1.merge(tval, [core_scaleService.getScaleDefaults(sval.type), sval]);\n        } else {\n          helpers$1._merger(key, target, source, options);\n        }\n      }\n    });\n  }\n\n  function initConfig(config) {\n    config = config || {}; // Do NOT use mergeConfig for the data object because this method merges arrays\n    // and so would change references to labels and datasets, preventing data updates.\n\n    var data = config.data = config.data || {};\n    data.datasets = data.datasets || [];\n    data.labels = data.labels || [];\n    config.options = mergeConfig(core_defaults.global, core_defaults[config.type], config.options || {});\n    return config;\n  }\n\n  function updateConfig(chart) {\n    var newOptions = chart.options;\n    helpers$1.each(chart.scales, function (scale) {\n      core_layouts.removeBox(chart, scale);\n    });\n    newOptions = mergeConfig(core_defaults.global, core_defaults[chart.config.type], newOptions);\n    chart.options = chart.config.options = newOptions;\n    chart.ensureScalesHaveIDs();\n    chart.buildOrUpdateScales(); // Tooltip\n\n    chart.tooltip._options = newOptions.tooltips;\n    chart.tooltip.initialize();\n  }\n\n  function positionIsHorizontal(position) {\n    return position === 'top' || position === 'bottom';\n  }\n\n  var Chart = function Chart(item, config) {\n    this.construct(item, config);\n    return this;\n  };\n\n  helpers$1.extend(Chart.prototype,\n  /** @lends Chart */\n  {\n    /**\n     * @private\n     */\n    construct: function construct(item, config) {\n      var me = this;\n      config = initConfig(config);\n      var context = platform.acquireContext(item, config);\n      var canvas = context && context.canvas;\n      var height = canvas && canvas.height;\n      var width = canvas && canvas.width;\n      me.id = helpers$1.uid();\n      me.ctx = context;\n      me.canvas = canvas;\n      me.config = config;\n      me.width = width;\n      me.height = height;\n      me.aspectRatio = height ? width / height : null;\n      me.options = config.options;\n      me._bufferedRender = false;\n      /**\n       * Provided for backward compatibility, Chart and Chart.Controller have been merged,\n       * the \"instance\" still need to be defined since it might be called from plugins.\n       * @prop Chart#chart\n       * @deprecated since version 2.6.0\n       * @todo remove at version 3\n       * @private\n       */\n\n      me.chart = me;\n      me.controller = me; // chart.chart.controller #inception\n      // Add the chart instance to the global namespace\n\n      Chart.instances[me.id] = me; // Define alias to the config data: `chart.data === chart.config.data`\n\n      Object.defineProperty(me, 'data', {\n        get: function get() {\n          return me.config.data;\n        },\n        set: function set(value) {\n          me.config.data = value;\n        }\n      });\n\n      if (!context || !canvas) {\n        // The given item is not a compatible context2d element, let's return before finalizing\n        // the chart initialization but after setting basic chart / controller properties that\n        // can help to figure out that the chart is not valid (e.g chart.canvas !== null);\n        // https://github.com/chartjs/Chart.js/issues/2807\n        console.error(\"Failed to create chart: can't acquire context from the given item\");\n        return;\n      }\n\n      me.initialize();\n      me.update();\n    },\n\n    /**\n     * @private\n     */\n    initialize: function initialize() {\n      var me = this; // Before init plugin notification\n\n      core_plugins.notify(me, 'beforeInit');\n      helpers$1.retinaScale(me, me.options.devicePixelRatio);\n      me.bindEvents();\n\n      if (me.options.responsive) {\n        // Initial resize before chart draws (must be silent to preserve initial animations).\n        me.resize(true);\n      } // Make sure scales have IDs and are built before we build any controllers.\n\n\n      me.ensureScalesHaveIDs();\n      me.buildOrUpdateScales();\n      me.initToolTip(); // After init plugin notification\n\n      core_plugins.notify(me, 'afterInit');\n      return me;\n    },\n    clear: function clear() {\n      helpers$1.canvas.clear(this);\n      return this;\n    },\n    stop: function stop() {\n      // Stops any current animation loop occurring\n      core_animations.cancelAnimation(this);\n      return this;\n    },\n    resize: function resize(silent) {\n      var me = this;\n      var options = me.options;\n      var canvas = me.canvas;\n      var aspectRatio = options.maintainAspectRatio && me.aspectRatio || null; // the canvas render width and height will be casted to integers so make sure that\n      // the canvas display style uses the same integer values to avoid blurring effect.\n      // Set to 0 instead of canvas.size because the size defaults to 300x150 if the element is collapsed\n\n      var newWidth = Math.max(0, Math.floor(helpers$1.getMaximumWidth(canvas)));\n      var newHeight = Math.max(0, Math.floor(aspectRatio ? newWidth / aspectRatio : helpers$1.getMaximumHeight(canvas)));\n\n      if (me.width === newWidth && me.height === newHeight) {\n        return;\n      }\n\n      canvas.width = me.width = newWidth;\n      canvas.height = me.height = newHeight;\n      canvas.style.width = newWidth + 'px';\n      canvas.style.height = newHeight + 'px';\n      helpers$1.retinaScale(me, options.devicePixelRatio);\n\n      if (!silent) {\n        // Notify any plugins about the resize\n        var newSize = {\n          width: newWidth,\n          height: newHeight\n        };\n        core_plugins.notify(me, 'resize', [newSize]); // Notify of resize\n\n        if (options.onResize) {\n          options.onResize(me, newSize);\n        }\n\n        me.stop();\n        me.update({\n          duration: options.responsiveAnimationDuration\n        });\n      }\n    },\n    ensureScalesHaveIDs: function ensureScalesHaveIDs() {\n      var options = this.options;\n      var scalesOptions = options.scales || {};\n      var scaleOptions = options.scale;\n      helpers$1.each(scalesOptions.xAxes, function (xAxisOptions, index) {\n        xAxisOptions.id = xAxisOptions.id || 'x-axis-' + index;\n      });\n      helpers$1.each(scalesOptions.yAxes, function (yAxisOptions, index) {\n        yAxisOptions.id = yAxisOptions.id || 'y-axis-' + index;\n      });\n\n      if (scaleOptions) {\n        scaleOptions.id = scaleOptions.id || 'scale';\n      }\n    },\n\n    /**\n     * Builds a map of scale ID to scale object for future lookup.\n     */\n    buildOrUpdateScales: function buildOrUpdateScales() {\n      var me = this;\n      var options = me.options;\n      var scales = me.scales || {};\n      var items = [];\n      var updated = Object.keys(scales).reduce(function (obj, id) {\n        obj[id] = false;\n        return obj;\n      }, {});\n\n      if (options.scales) {\n        items = items.concat((options.scales.xAxes || []).map(function (xAxisOptions) {\n          return {\n            options: xAxisOptions,\n            dtype: 'category',\n            dposition: 'bottom'\n          };\n        }), (options.scales.yAxes || []).map(function (yAxisOptions) {\n          return {\n            options: yAxisOptions,\n            dtype: 'linear',\n            dposition: 'left'\n          };\n        }));\n      }\n\n      if (options.scale) {\n        items.push({\n          options: options.scale,\n          dtype: 'radialLinear',\n          isDefault: true,\n          dposition: 'chartArea'\n        });\n      }\n\n      helpers$1.each(items, function (item) {\n        var scaleOptions = item.options;\n        var id = scaleOptions.id;\n        var scaleType = valueOrDefault$8(scaleOptions.type, item.dtype);\n\n        if (positionIsHorizontal(scaleOptions.position) !== positionIsHorizontal(item.dposition)) {\n          scaleOptions.position = item.dposition;\n        }\n\n        updated[id] = true;\n        var scale = null;\n\n        if (id in scales && scales[id].type === scaleType) {\n          scale = scales[id];\n          scale.options = scaleOptions;\n          scale.ctx = me.ctx;\n          scale.chart = me;\n        } else {\n          var scaleClass = core_scaleService.getScaleConstructor(scaleType);\n\n          if (!scaleClass) {\n            return;\n          }\n\n          scale = new scaleClass({\n            id: id,\n            type: scaleType,\n            options: scaleOptions,\n            ctx: me.ctx,\n            chart: me\n          });\n          scales[scale.id] = scale;\n        }\n\n        scale.mergeTicksOptions(); // TODO(SB): I think we should be able to remove this custom case (options.scale)\n        // and consider it as a regular scale part of the \"scales\"\" map only! This would\n        // make the logic easier and remove some useless? custom code.\n\n        if (item.isDefault) {\n          me.scale = scale;\n        }\n      }); // clear up discarded scales\n\n      helpers$1.each(updated, function (hasUpdated, id) {\n        if (!hasUpdated) {\n          delete scales[id];\n        }\n      });\n      me.scales = scales;\n      core_scaleService.addScalesToLayout(this);\n    },\n    buildOrUpdateControllers: function buildOrUpdateControllers() {\n      var me = this;\n      var newControllers = [];\n      helpers$1.each(me.data.datasets, function (dataset, datasetIndex) {\n        var meta = me.getDatasetMeta(datasetIndex);\n        var type = dataset.type || me.config.type;\n\n        if (meta.type && meta.type !== type) {\n          me.destroyDatasetMeta(datasetIndex);\n          meta = me.getDatasetMeta(datasetIndex);\n        }\n\n        meta.type = type;\n\n        if (meta.controller) {\n          meta.controller.updateIndex(datasetIndex);\n          meta.controller.linkScales();\n        } else {\n          var ControllerClass = controllers[meta.type];\n\n          if (ControllerClass === undefined) {\n            throw new Error('\"' + meta.type + '\" is not a chart type.');\n          }\n\n          meta.controller = new ControllerClass(me, datasetIndex);\n          newControllers.push(meta.controller);\n        }\n      }, me);\n      return newControllers;\n    },\n\n    /**\n     * Reset the elements of all datasets\n     * @private\n     */\n    resetElements: function resetElements() {\n      var me = this;\n      helpers$1.each(me.data.datasets, function (dataset, datasetIndex) {\n        me.getDatasetMeta(datasetIndex).controller.reset();\n      }, me);\n    },\n\n    /**\n    * Resets the chart back to it's state before the initial animation\n    */\n    reset: function reset() {\n      this.resetElements();\n      this.tooltip.initialize();\n    },\n    update: function update(config) {\n      var me = this;\n\n      if (!config || typeof config !== 'object') {\n        // backwards compatibility\n        config = {\n          duration: config,\n          lazy: arguments[1]\n        };\n      }\n\n      updateConfig(me); // plugins options references might have change, let's invalidate the cache\n      // https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\n\n      core_plugins._invalidate(me);\n\n      if (core_plugins.notify(me, 'beforeUpdate') === false) {\n        return;\n      } // In case the entire data object changed\n\n\n      me.tooltip._data = me.data; // Make sure dataset controllers are updated and new controllers are reset\n\n      var newControllers = me.buildOrUpdateControllers(); // Make sure all dataset controllers have correct meta data counts\n\n      helpers$1.each(me.data.datasets, function (dataset, datasetIndex) {\n        me.getDatasetMeta(datasetIndex).controller.buildOrUpdateElements();\n      }, me);\n      me.updateLayout(); // Can only reset the new controllers after the scales have been updated\n\n      if (me.options.animation && me.options.animation.duration) {\n        helpers$1.each(newControllers, function (controller) {\n          controller.reset();\n        });\n      }\n\n      me.updateDatasets(); // Need to reset tooltip in case it is displayed with elements that are removed\n      // after update.\n\n      me.tooltip.initialize(); // Last active contains items that were previously in the tooltip.\n      // When we reset the tooltip, we need to clear it\n\n      me.lastActive = []; // Do this before render so that any plugins that need final scale updates can use it\n\n      core_plugins.notify(me, 'afterUpdate');\n\n      if (me._bufferedRender) {\n        me._bufferedRequest = {\n          duration: config.duration,\n          easing: config.easing,\n          lazy: config.lazy\n        };\n      } else {\n        me.render(config);\n      }\n    },\n\n    /**\n     * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`\n     * hook, in which case, plugins will not be called on `afterLayout`.\n     * @private\n     */\n    updateLayout: function updateLayout() {\n      var me = this;\n\n      if (core_plugins.notify(me, 'beforeLayout') === false) {\n        return;\n      }\n\n      core_layouts.update(this, this.width, this.height);\n      /**\n       * Provided for backward compatibility, use `afterLayout` instead.\n       * @method IPlugin#afterScaleUpdate\n       * @deprecated since version 2.5.0\n       * @todo remove at version 3\n       * @private\n       */\n\n      core_plugins.notify(me, 'afterScaleUpdate');\n      core_plugins.notify(me, 'afterLayout');\n    },\n\n    /**\n     * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`\n     * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.\n     * @private\n     */\n    updateDatasets: function updateDatasets() {\n      var me = this;\n\n      if (core_plugins.notify(me, 'beforeDatasetsUpdate') === false) {\n        return;\n      }\n\n      for (var i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {\n        me.updateDataset(i);\n      }\n\n      core_plugins.notify(me, 'afterDatasetsUpdate');\n    },\n\n    /**\n     * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`\n     * hook, in which case, plugins will not be called on `afterDatasetUpdate`.\n     * @private\n     */\n    updateDataset: function updateDataset(index) {\n      var me = this;\n      var meta = me.getDatasetMeta(index);\n      var args = {\n        meta: meta,\n        index: index\n      };\n\n      if (core_plugins.notify(me, 'beforeDatasetUpdate', [args]) === false) {\n        return;\n      }\n\n      meta.controller.update();\n      core_plugins.notify(me, 'afterDatasetUpdate', [args]);\n    },\n    render: function render(config) {\n      var me = this;\n\n      if (!config || typeof config !== 'object') {\n        // backwards compatibility\n        config = {\n          duration: config,\n          lazy: arguments[1]\n        };\n      }\n\n      var animationOptions = me.options.animation;\n      var duration = valueOrDefault$8(config.duration, animationOptions && animationOptions.duration);\n      var lazy = config.lazy;\n\n      if (core_plugins.notify(me, 'beforeRender') === false) {\n        return;\n      }\n\n      var onComplete = function onComplete(animation) {\n        core_plugins.notify(me, 'afterRender');\n        helpers$1.callback(animationOptions && animationOptions.onComplete, [animation], me);\n      };\n\n      if (animationOptions && duration) {\n        var animation = new core_animation({\n          numSteps: duration / 16.66,\n          // 60 fps\n          easing: config.easing || animationOptions.easing,\n          render: function render(chart, animationObject) {\n            var easingFunction = helpers$1.easing.effects[animationObject.easing];\n            var currentStep = animationObject.currentStep;\n            var stepDecimal = currentStep / animationObject.numSteps;\n            chart.draw(easingFunction(stepDecimal), stepDecimal, currentStep);\n          },\n          onAnimationProgress: animationOptions.onProgress,\n          onAnimationComplete: onComplete\n        });\n        core_animations.addAnimation(me, animation, duration, lazy);\n      } else {\n        me.draw(); // See https://github.com/chartjs/Chart.js/issues/3781\n\n        onComplete(new core_animation({\n          numSteps: 0,\n          chart: me\n        }));\n      }\n\n      return me;\n    },\n    draw: function draw(easingValue) {\n      var me = this;\n      me.clear();\n\n      if (helpers$1.isNullOrUndef(easingValue)) {\n        easingValue = 1;\n      }\n\n      me.transition(easingValue);\n\n      if (me.width <= 0 || me.height <= 0) {\n        return;\n      }\n\n      if (core_plugins.notify(me, 'beforeDraw', [easingValue]) === false) {\n        return;\n      } // Draw all the scales\n\n\n      helpers$1.each(me.boxes, function (box) {\n        box.draw(me.chartArea);\n      }, me);\n      me.drawDatasets(easingValue);\n\n      me._drawTooltip(easingValue);\n\n      core_plugins.notify(me, 'afterDraw', [easingValue]);\n    },\n\n    /**\n     * @private\n     */\n    transition: function transition(easingValue) {\n      var me = this;\n\n      for (var i = 0, ilen = (me.data.datasets || []).length; i < ilen; ++i) {\n        if (me.isDatasetVisible(i)) {\n          me.getDatasetMeta(i).controller.transition(easingValue);\n        }\n      }\n\n      me.tooltip.transition(easingValue);\n    },\n\n    /**\n     * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`\n     * hook, in which case, plugins will not be called on `afterDatasetsDraw`.\n     * @private\n     */\n    drawDatasets: function drawDatasets(easingValue) {\n      var me = this;\n\n      if (core_plugins.notify(me, 'beforeDatasetsDraw', [easingValue]) === false) {\n        return;\n      } // Draw datasets reversed to support proper line stacking\n\n\n      for (var i = (me.data.datasets || []).length - 1; i >= 0; --i) {\n        if (me.isDatasetVisible(i)) {\n          me.drawDataset(i, easingValue);\n        }\n      }\n\n      core_plugins.notify(me, 'afterDatasetsDraw', [easingValue]);\n    },\n\n    /**\n     * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`\n     * hook, in which case, plugins will not be called on `afterDatasetDraw`.\n     * @private\n     */\n    drawDataset: function drawDataset(index, easingValue) {\n      var me = this;\n      var meta = me.getDatasetMeta(index);\n      var args = {\n        meta: meta,\n        index: index,\n        easingValue: easingValue\n      };\n\n      if (core_plugins.notify(me, 'beforeDatasetDraw', [args]) === false) {\n        return;\n      }\n\n      meta.controller.draw(easingValue);\n      core_plugins.notify(me, 'afterDatasetDraw', [args]);\n    },\n\n    /**\n     * Draws tooltip unless a plugin returns `false` to the `beforeTooltipDraw`\n     * hook, in which case, plugins will not be called on `afterTooltipDraw`.\n     * @private\n     */\n    _drawTooltip: function _drawTooltip(easingValue) {\n      var me = this;\n      var tooltip = me.tooltip;\n      var args = {\n        tooltip: tooltip,\n        easingValue: easingValue\n      };\n\n      if (core_plugins.notify(me, 'beforeTooltipDraw', [args]) === false) {\n        return;\n      }\n\n      tooltip.draw();\n      core_plugins.notify(me, 'afterTooltipDraw', [args]);\n    },\n\n    /**\n     * Get the single element that was clicked on\n     * @return An object containing the dataset index and element index of the matching element. Also contains the rectangle that was draw\n     */\n    getElementAtEvent: function getElementAtEvent(e) {\n      return core_interaction.modes.single(this, e);\n    },\n    getElementsAtEvent: function getElementsAtEvent(e) {\n      return core_interaction.modes.label(this, e, {\n        intersect: true\n      });\n    },\n    getElementsAtXAxis: function getElementsAtXAxis(e) {\n      return core_interaction.modes['x-axis'](this, e, {\n        intersect: true\n      });\n    },\n    getElementsAtEventForMode: function getElementsAtEventForMode(e, mode, options) {\n      var method = core_interaction.modes[mode];\n\n      if (typeof method === 'function') {\n        return method(this, e, options);\n      }\n\n      return [];\n    },\n    getDatasetAtEvent: function getDatasetAtEvent(e) {\n      return core_interaction.modes.dataset(this, e, {\n        intersect: true\n      });\n    },\n    getDatasetMeta: function getDatasetMeta(datasetIndex) {\n      var me = this;\n      var dataset = me.data.datasets[datasetIndex];\n\n      if (!dataset._meta) {\n        dataset._meta = {};\n      }\n\n      var meta = dataset._meta[me.id];\n\n      if (!meta) {\n        meta = dataset._meta[me.id] = {\n          type: null,\n          data: [],\n          dataset: null,\n          controller: null,\n          hidden: null,\n          // See isDatasetVisible() comment\n          xAxisID: null,\n          yAxisID: null\n        };\n      }\n\n      return meta;\n    },\n    getVisibleDatasetCount: function getVisibleDatasetCount() {\n      var count = 0;\n\n      for (var i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n        if (this.isDatasetVisible(i)) {\n          count++;\n        }\n      }\n\n      return count;\n    },\n    isDatasetVisible: function isDatasetVisible(datasetIndex) {\n      var meta = this.getDatasetMeta(datasetIndex); // meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,\n      // the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.\n\n      return typeof meta.hidden === 'boolean' ? !meta.hidden : !this.data.datasets[datasetIndex].hidden;\n    },\n    generateLegend: function generateLegend() {\n      return this.options.legendCallback(this);\n    },\n\n    /**\n     * @private\n     */\n    destroyDatasetMeta: function destroyDatasetMeta(datasetIndex) {\n      var id = this.id;\n      var dataset = this.data.datasets[datasetIndex];\n      var meta = dataset._meta && dataset._meta[id];\n\n      if (meta) {\n        meta.controller.destroy();\n        delete dataset._meta[id];\n      }\n    },\n    destroy: function destroy() {\n      var me = this;\n      var canvas = me.canvas;\n      var i, ilen;\n      me.stop(); // dataset controllers need to cleanup associated data\n\n      for (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {\n        me.destroyDatasetMeta(i);\n      }\n\n      if (canvas) {\n        me.unbindEvents();\n        helpers$1.canvas.clear(me);\n        platform.releaseContext(me.ctx);\n        me.canvas = null;\n        me.ctx = null;\n      }\n\n      core_plugins.notify(me, 'destroy');\n      delete Chart.instances[me.id];\n    },\n    toBase64Image: function toBase64Image() {\n      return this.canvas.toDataURL.apply(this.canvas, arguments);\n    },\n    initToolTip: function initToolTip() {\n      var me = this;\n      me.tooltip = new core_tooltip({\n        _chart: me,\n        _chartInstance: me,\n        // deprecated, backward compatibility\n        _data: me.data,\n        _options: me.options.tooltips\n      }, me);\n    },\n\n    /**\n     * @private\n     */\n    bindEvents: function bindEvents() {\n      var me = this;\n      var listeners = me._listeners = {};\n\n      var listener = function listener() {\n        me.eventHandler.apply(me, arguments);\n      };\n\n      helpers$1.each(me.options.events, function (type) {\n        platform.addEventListener(me, type, listener);\n        listeners[type] = listener;\n      }); // Elements used to detect size change should not be injected for non responsive charts.\n      // See https://github.com/chartjs/Chart.js/issues/2210\n\n      if (me.options.responsive) {\n        listener = function listener() {\n          me.resize();\n        };\n\n        platform.addEventListener(me, 'resize', listener);\n        listeners.resize = listener;\n      }\n    },\n\n    /**\n     * @private\n     */\n    unbindEvents: function unbindEvents() {\n      var me = this;\n      var listeners = me._listeners;\n\n      if (!listeners) {\n        return;\n      }\n\n      delete me._listeners;\n      helpers$1.each(listeners, function (listener, type) {\n        platform.removeEventListener(me, type, listener);\n      });\n    },\n    updateHoverStyle: function updateHoverStyle(elements, mode, enabled) {\n      var method = enabled ? 'setHoverStyle' : 'removeHoverStyle';\n      var element, i, ilen;\n\n      for (i = 0, ilen = elements.length; i < ilen; ++i) {\n        element = elements[i];\n\n        if (element) {\n          this.getDatasetMeta(element._datasetIndex).controller[method](element);\n        }\n      }\n    },\n\n    /**\n     * @private\n     */\n    eventHandler: function eventHandler(e) {\n      var me = this;\n      var tooltip = me.tooltip;\n\n      if (core_plugins.notify(me, 'beforeEvent', [e]) === false) {\n        return;\n      } // Buffer any update calls so that renders do not occur\n\n\n      me._bufferedRender = true;\n      me._bufferedRequest = null;\n      var changed = me.handleEvent(e); // for smooth tooltip animations issue #4989\n      // the tooltip should be the source of change\n      // Animation check workaround:\n      // tooltip._start will be null when tooltip isn't animating\n\n      if (tooltip) {\n        changed = tooltip._start ? tooltip.handleEvent(e) : changed | tooltip.handleEvent(e);\n      }\n\n      core_plugins.notify(me, 'afterEvent', [e]);\n      var bufferedRequest = me._bufferedRequest;\n\n      if (bufferedRequest) {\n        // If we have an update that was triggered, we need to do a normal render\n        me.render(bufferedRequest);\n      } else if (changed && !me.animating) {\n        // If entering, leaving, or changing elements, animate the change via pivot\n        me.stop(); // We only need to render at this point. Updating will cause scales to be\n        // recomputed generating flicker & using more memory than necessary.\n\n        me.render({\n          duration: me.options.hover.animationDuration,\n          lazy: true\n        });\n      }\n\n      me._bufferedRender = false;\n      me._bufferedRequest = null;\n      return me;\n    },\n\n    /**\n     * Handle an event\n     * @private\n     * @param {IEvent} event the event to handle\n     * @return {boolean} true if the chart needs to re-render\n     */\n    handleEvent: function handleEvent(e) {\n      var me = this;\n      var options = me.options || {};\n      var hoverOptions = options.hover;\n      var changed = false;\n      me.lastActive = me.lastActive || []; // Find Active Elements for hover and tooltips\n\n      if (e.type === 'mouseout') {\n        me.active = [];\n      } else {\n        me.active = me.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions);\n      } // Invoke onHover hook\n      // Need to call with native event here to not break backwards compatibility\n\n\n      helpers$1.callback(options.onHover || options.hover.onHover, [e.native, me.active], me);\n\n      if (e.type === 'mouseup' || e.type === 'click') {\n        if (options.onClick) {\n          // Use e.native here for backwards compatibility\n          options.onClick.call(me, e.native, me.active);\n        }\n      } // Remove styling for last active (even if it may still be active)\n\n\n      if (me.lastActive.length) {\n        me.updateHoverStyle(me.lastActive, hoverOptions.mode, false);\n      } // Built in hover styling\n\n\n      if (me.active.length && hoverOptions.mode) {\n        me.updateHoverStyle(me.active, hoverOptions.mode, true);\n      }\n\n      changed = !helpers$1.arrayEquals(me.active, me.lastActive); // Remember Last Actives\n\n      me.lastActive = me.active;\n      return changed;\n    }\n  });\n  /**\n   * NOTE(SB) We actually don't use this container anymore but we need to keep it\n   * for backward compatibility. Though, it can still be useful for plugins that\n   * would need to work on multiple charts?!\n   */\n\n  Chart.instances = {};\n  var core_controller = Chart; // DEPRECATIONS\n\n  /**\n   * Provided for backward compatibility, use Chart instead.\n   * @class Chart.Controller\n   * @deprecated since version 2.6\n   * @todo remove at version 3\n   * @private\n   */\n\n  Chart.Controller = Chart;\n  /**\n   * Provided for backward compatibility, not available anymore.\n   * @namespace Chart\n   * @deprecated since version 2.8\n   * @todo remove at version 3\n   * @private\n   */\n\n  Chart.types = {};\n  /**\n   * Provided for backward compatibility, not available anymore.\n   * @namespace Chart.helpers.configMerge\n   * @deprecated since version 2.8.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers$1.configMerge = mergeConfig;\n  /**\n   * Provided for backward compatibility, not available anymore.\n   * @namespace Chart.helpers.scaleMerge\n   * @deprecated since version 2.8.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers$1.scaleMerge = mergeScaleConfig;\n\n  var core_helpers = function core_helpers() {\n    // -- Basic js utility methods\n    helpers$1.where = function (collection, filterCallback) {\n      if (helpers$1.isArray(collection) && Array.prototype.filter) {\n        return collection.filter(filterCallback);\n      }\n\n      var filtered = [];\n      helpers$1.each(collection, function (item) {\n        if (filterCallback(item)) {\n          filtered.push(item);\n        }\n      });\n      return filtered;\n    };\n\n    helpers$1.findIndex = Array.prototype.findIndex ? function (array, callback, scope) {\n      return array.findIndex(callback, scope);\n    } : function (array, callback, scope) {\n      scope = scope === undefined ? array : scope;\n\n      for (var i = 0, ilen = array.length; i < ilen; ++i) {\n        if (callback.call(scope, array[i], i, array)) {\n          return i;\n        }\n      }\n\n      return -1;\n    };\n\n    helpers$1.findNextWhere = function (arrayToSearch, filterCallback, startIndex) {\n      // Default to start of the array\n      if (helpers$1.isNullOrUndef(startIndex)) {\n        startIndex = -1;\n      }\n\n      for (var i = startIndex + 1; i < arrayToSearch.length; i++) {\n        var currentItem = arrayToSearch[i];\n\n        if (filterCallback(currentItem)) {\n          return currentItem;\n        }\n      }\n    };\n\n    helpers$1.findPreviousWhere = function (arrayToSearch, filterCallback, startIndex) {\n      // Default to end of the array\n      if (helpers$1.isNullOrUndef(startIndex)) {\n        startIndex = arrayToSearch.length;\n      }\n\n      for (var i = startIndex - 1; i >= 0; i--) {\n        var currentItem = arrayToSearch[i];\n\n        if (filterCallback(currentItem)) {\n          return currentItem;\n        }\n      }\n    }; // -- Math methods\n\n\n    helpers$1.isNumber = function (n) {\n      return !isNaN(parseFloat(n)) && isFinite(n);\n    };\n\n    helpers$1.almostEquals = function (x, y, epsilon) {\n      return Math.abs(x - y) < epsilon;\n    };\n\n    helpers$1.almostWhole = function (x, epsilon) {\n      var rounded = Math.round(x);\n      return rounded - epsilon < x && rounded + epsilon > x;\n    };\n\n    helpers$1.max = function (array) {\n      return array.reduce(function (max, value) {\n        if (!isNaN(value)) {\n          return Math.max(max, value);\n        }\n\n        return max;\n      }, Number.NEGATIVE_INFINITY);\n    };\n\n    helpers$1.min = function (array) {\n      return array.reduce(function (min, value) {\n        if (!isNaN(value)) {\n          return Math.min(min, value);\n        }\n\n        return min;\n      }, Number.POSITIVE_INFINITY);\n    };\n\n    helpers$1.sign = Math.sign ? function (x) {\n      return Math.sign(x);\n    } : function (x) {\n      x = +x; // convert to a number\n\n      if (x === 0 || isNaN(x)) {\n        return x;\n      }\n\n      return x > 0 ? 1 : -1;\n    };\n    helpers$1.log10 = Math.log10 ? function (x) {\n      return Math.log10(x);\n    } : function (x) {\n      var exponent = Math.log(x) * Math.LOG10E; // Math.LOG10E = 1 / Math.LN10.\n      // Check for whole powers of 10,\n      // which due to floating point rounding error should be corrected.\n\n      var powerOf10 = Math.round(exponent);\n      var isPowerOf10 = x === Math.pow(10, powerOf10);\n      return isPowerOf10 ? powerOf10 : exponent;\n    };\n\n    helpers$1.toRadians = function (degrees) {\n      return degrees * (Math.PI / 180);\n    };\n\n    helpers$1.toDegrees = function (radians) {\n      return radians * (180 / Math.PI);\n    };\n    /**\n     * Returns the number of decimal places\n     * i.e. the number of digits after the decimal point, of the value of this Number.\n     * @param {number} x - A number.\n     * @returns {number} The number of decimal places.\n     * @private\n     */\n\n\n    helpers$1._decimalPlaces = function (x) {\n      if (!helpers$1.isFinite(x)) {\n        return;\n      }\n\n      var e = 1;\n      var p = 0;\n\n      while (Math.round(x * e) / e !== x) {\n        e *= 10;\n        p++;\n      }\n\n      return p;\n    }; // Gets the angle from vertical upright to the point about a centre.\n\n\n    helpers$1.getAngleFromPoint = function (centrePoint, anglePoint) {\n      var distanceFromXCenter = anglePoint.x - centrePoint.x;\n      var distanceFromYCenter = anglePoint.y - centrePoint.y;\n      var radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n      var angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);\n\n      if (angle < -0.5 * Math.PI) {\n        angle += 2.0 * Math.PI; // make sure the returned angle is in the range of (-PI/2, 3PI/2]\n      }\n\n      return {\n        angle: angle,\n        distance: radialDistanceFromCenter\n      };\n    };\n\n    helpers$1.distanceBetweenPoints = function (pt1, pt2) {\n      return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\n    };\n    /**\n     * Provided for backward compatibility, not available anymore\n     * @function Chart.helpers.aliasPixel\n     * @deprecated since version 2.8.0\n     * @todo remove at version 3\n     */\n\n\n    helpers$1.aliasPixel = function (pixelWidth) {\n      return pixelWidth % 2 === 0 ? 0 : 0.5;\n    };\n    /**\n     * Returns the aligned pixel value to avoid anti-aliasing blur\n     * @param {Chart} chart - The chart instance.\n     * @param {number} pixel - A pixel value.\n     * @param {number} width - The width of the element.\n     * @returns {number} The aligned pixel value.\n     * @private\n     */\n\n\n    helpers$1._alignPixel = function (chart, pixel, width) {\n      var devicePixelRatio = chart.currentDevicePixelRatio;\n      var halfWidth = width / 2;\n      return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;\n    };\n\n    helpers$1.splineCurve = function (firstPoint, middlePoint, afterPoint, t) {\n      // Props to Rob Spencer at scaled innovation for his post on splining between points\n      // http://scaledinnovation.com/analytics/splines/aboutSplines.html\n      // This function must also respect \"skipped\" points\n      var previous = firstPoint.skip ? middlePoint : firstPoint;\n      var current = middlePoint;\n      var next = afterPoint.skip ? middlePoint : afterPoint;\n      var d01 = Math.sqrt(Math.pow(current.x - previous.x, 2) + Math.pow(current.y - previous.y, 2));\n      var d12 = Math.sqrt(Math.pow(next.x - current.x, 2) + Math.pow(next.y - current.y, 2));\n      var s01 = d01 / (d01 + d12);\n      var s12 = d12 / (d01 + d12); // If all points are the same, s01 & s02 will be inf\n\n      s01 = isNaN(s01) ? 0 : s01;\n      s12 = isNaN(s12) ? 0 : s12;\n      var fa = t * s01; // scaling factor for triangle Ta\n\n      var fb = t * s12;\n      return {\n        previous: {\n          x: current.x - fa * (next.x - previous.x),\n          y: current.y - fa * (next.y - previous.y)\n        },\n        next: {\n          x: current.x + fb * (next.x - previous.x),\n          y: current.y + fb * (next.y - previous.y)\n        }\n      };\n    };\n\n    helpers$1.EPSILON = Number.EPSILON || 1e-14;\n\n    helpers$1.splineCurveMonotone = function (points) {\n      // This function calculates Bézier control points in a similar way than |splineCurve|,\n      // but preserves monotonicity of the provided data and ensures no local extremums are added\n      // between the dataset discrete points due to the interpolation.\n      // See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation\n      var pointsWithTangents = (points || []).map(function (point) {\n        return {\n          model: point._model,\n          deltaK: 0,\n          mK: 0\n        };\n      }); // Calculate slopes (deltaK) and initialize tangents (mK)\n\n      var pointsLen = pointsWithTangents.length;\n      var i, pointBefore, pointCurrent, pointAfter;\n\n      for (i = 0; i < pointsLen; ++i) {\n        pointCurrent = pointsWithTangents[i];\n\n        if (pointCurrent.model.skip) {\n          continue;\n        }\n\n        pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;\n        pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;\n\n        if (pointAfter && !pointAfter.model.skip) {\n          var slopeDeltaX = pointAfter.model.x - pointCurrent.model.x; // In the case of two points that appear at the same x pixel, slopeDeltaX is 0\n\n          pointCurrent.deltaK = slopeDeltaX !== 0 ? (pointAfter.model.y - pointCurrent.model.y) / slopeDeltaX : 0;\n        }\n\n        if (!pointBefore || pointBefore.model.skip) {\n          pointCurrent.mK = pointCurrent.deltaK;\n        } else if (!pointAfter || pointAfter.model.skip) {\n          pointCurrent.mK = pointBefore.deltaK;\n        } else if (this.sign(pointBefore.deltaK) !== this.sign(pointCurrent.deltaK)) {\n          pointCurrent.mK = 0;\n        } else {\n          pointCurrent.mK = (pointBefore.deltaK + pointCurrent.deltaK) / 2;\n        }\n      } // Adjust tangents to ensure monotonic properties\n\n\n      var alphaK, betaK, tauK, squaredMagnitude;\n\n      for (i = 0; i < pointsLen - 1; ++i) {\n        pointCurrent = pointsWithTangents[i];\n        pointAfter = pointsWithTangents[i + 1];\n\n        if (pointCurrent.model.skip || pointAfter.model.skip) {\n          continue;\n        }\n\n        if (helpers$1.almostEquals(pointCurrent.deltaK, 0, this.EPSILON)) {\n          pointCurrent.mK = pointAfter.mK = 0;\n          continue;\n        }\n\n        alphaK = pointCurrent.mK / pointCurrent.deltaK;\n        betaK = pointAfter.mK / pointCurrent.deltaK;\n        squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);\n\n        if (squaredMagnitude <= 9) {\n          continue;\n        }\n\n        tauK = 3 / Math.sqrt(squaredMagnitude);\n        pointCurrent.mK = alphaK * tauK * pointCurrent.deltaK;\n        pointAfter.mK = betaK * tauK * pointCurrent.deltaK;\n      } // Compute control points\n\n\n      var deltaX;\n\n      for (i = 0; i < pointsLen; ++i) {\n        pointCurrent = pointsWithTangents[i];\n\n        if (pointCurrent.model.skip) {\n          continue;\n        }\n\n        pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;\n        pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;\n\n        if (pointBefore && !pointBefore.model.skip) {\n          deltaX = (pointCurrent.model.x - pointBefore.model.x) / 3;\n          pointCurrent.model.controlPointPreviousX = pointCurrent.model.x - deltaX;\n          pointCurrent.model.controlPointPreviousY = pointCurrent.model.y - deltaX * pointCurrent.mK;\n        }\n\n        if (pointAfter && !pointAfter.model.skip) {\n          deltaX = (pointAfter.model.x - pointCurrent.model.x) / 3;\n          pointCurrent.model.controlPointNextX = pointCurrent.model.x + deltaX;\n          pointCurrent.model.controlPointNextY = pointCurrent.model.y + deltaX * pointCurrent.mK;\n        }\n      }\n    };\n\n    helpers$1.nextItem = function (collection, index, loop) {\n      if (loop) {\n        return index >= collection.length - 1 ? collection[0] : collection[index + 1];\n      }\n\n      return index >= collection.length - 1 ? collection[collection.length - 1] : collection[index + 1];\n    };\n\n    helpers$1.previousItem = function (collection, index, loop) {\n      if (loop) {\n        return index <= 0 ? collection[collection.length - 1] : collection[index - 1];\n      }\n\n      return index <= 0 ? collection[0] : collection[index - 1];\n    }; // Implementation of the nice number algorithm used in determining where axis labels will go\n\n\n    helpers$1.niceNum = function (range, round) {\n      var exponent = Math.floor(helpers$1.log10(range));\n      var fraction = range / Math.pow(10, exponent);\n      var niceFraction;\n\n      if (round) {\n        if (fraction < 1.5) {\n          niceFraction = 1;\n        } else if (fraction < 3) {\n          niceFraction = 2;\n        } else if (fraction < 7) {\n          niceFraction = 5;\n        } else {\n          niceFraction = 10;\n        }\n      } else if (fraction <= 1.0) {\n        niceFraction = 1;\n      } else if (fraction <= 2) {\n        niceFraction = 2;\n      } else if (fraction <= 5) {\n        niceFraction = 5;\n      } else {\n        niceFraction = 10;\n      }\n\n      return niceFraction * Math.pow(10, exponent);\n    }; // Request animation polyfill - https://www.paulirish.com/2011/requestanimationframe-for-smart-animating/\n\n\n    helpers$1.requestAnimFrame = function () {\n      if (typeof window === 'undefined') {\n        return function (callback) {\n          callback();\n        };\n      }\n\n      return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n        return window.setTimeout(callback, 1000 / 60);\n      };\n    }(); // -- DOM methods\n\n\n    helpers$1.getRelativePosition = function (evt, chart) {\n      var mouseX, mouseY;\n      var e = evt.originalEvent || evt;\n      var canvas = evt.target || evt.srcElement;\n      var boundingRect = canvas.getBoundingClientRect();\n      var touches = e.touches;\n\n      if (touches && touches.length > 0) {\n        mouseX = touches[0].clientX;\n        mouseY = touches[0].clientY;\n      } else {\n        mouseX = e.clientX;\n        mouseY = e.clientY;\n      } // Scale mouse coordinates into canvas coordinates\n      // by following the pattern laid out by 'jerryj' in the comments of\n      // https://www.html5canvastutorials.com/advanced/html5-canvas-mouse-coordinates/\n\n\n      var paddingLeft = parseFloat(helpers$1.getStyle(canvas, 'padding-left'));\n      var paddingTop = parseFloat(helpers$1.getStyle(canvas, 'padding-top'));\n      var paddingRight = parseFloat(helpers$1.getStyle(canvas, 'padding-right'));\n      var paddingBottom = parseFloat(helpers$1.getStyle(canvas, 'padding-bottom'));\n      var width = boundingRect.right - boundingRect.left - paddingLeft - paddingRight;\n      var height = boundingRect.bottom - boundingRect.top - paddingTop - paddingBottom; // We divide by the current device pixel ratio, because the canvas is scaled up by that amount in each direction. However\n      // the backend model is in unscaled coordinates. Since we are going to deal with our model coordinates, we go back here\n\n      mouseX = Math.round((mouseX - boundingRect.left - paddingLeft) / width * canvas.width / chart.currentDevicePixelRatio);\n      mouseY = Math.round((mouseY - boundingRect.top - paddingTop) / height * canvas.height / chart.currentDevicePixelRatio);\n      return {\n        x: mouseX,\n        y: mouseY\n      };\n    }; // Private helper function to convert max-width/max-height values that may be percentages into a number\n\n\n    function parseMaxStyle(styleValue, node, parentProperty) {\n      var valueInPixels;\n\n      if (typeof styleValue === 'string') {\n        valueInPixels = parseInt(styleValue, 10);\n\n        if (styleValue.indexOf('%') !== -1) {\n          // percentage * size in dimension\n          valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];\n        }\n      } else {\n        valueInPixels = styleValue;\n      }\n\n      return valueInPixels;\n    }\n    /**\n     * Returns if the given value contains an effective constraint.\n     * @private\n     */\n\n\n    function isConstrainedValue(value) {\n      return value !== undefined && value !== null && value !== 'none';\n    }\n    /**\n     * Returns the max width or height of the given DOM node in a cross-browser compatible fashion\n     * @param {HTMLElement} domNode - the node to check the constraint on\n     * @param {string} maxStyle - the style that defines the maximum for the direction we are using ('max-width' / 'max-height')\n     * @param {string} percentageProperty - property of parent to use when calculating width as a percentage\n     * @see {@link https://www.nathanaeljones.com/blog/2013/reading-max-width-cross-browser}\n     */\n\n\n    function getConstraintDimension(domNode, maxStyle, percentageProperty) {\n      var view = document.defaultView;\n\n      var parentNode = helpers$1._getParentNode(domNode);\n\n      var constrainedNode = view.getComputedStyle(domNode)[maxStyle];\n      var constrainedContainer = view.getComputedStyle(parentNode)[maxStyle];\n      var hasCNode = isConstrainedValue(constrainedNode);\n      var hasCContainer = isConstrainedValue(constrainedContainer);\n      var infinity = Number.POSITIVE_INFINITY;\n\n      if (hasCNode || hasCContainer) {\n        return Math.min(hasCNode ? parseMaxStyle(constrainedNode, domNode, percentageProperty) : infinity, hasCContainer ? parseMaxStyle(constrainedContainer, parentNode, percentageProperty) : infinity);\n      }\n\n      return 'none';\n    } // returns Number or undefined if no constraint\n\n\n    helpers$1.getConstraintWidth = function (domNode) {\n      return getConstraintDimension(domNode, 'max-width', 'clientWidth');\n    }; // returns Number or undefined if no constraint\n\n\n    helpers$1.getConstraintHeight = function (domNode) {\n      return getConstraintDimension(domNode, 'max-height', 'clientHeight');\n    };\n    /**\n     * @private\n    \t */\n\n\n    helpers$1._calculatePadding = function (container, padding, parentDimension) {\n      padding = helpers$1.getStyle(container, padding);\n      return padding.indexOf('%') > -1 ? parentDimension * parseInt(padding, 10) / 100 : parseInt(padding, 10);\n    };\n    /**\n     * @private\n     */\n\n\n    helpers$1._getParentNode = function (domNode) {\n      var parent = domNode.parentNode;\n\n      if (parent && parent.toString() === '[object ShadowRoot]') {\n        parent = parent.host;\n      }\n\n      return parent;\n    };\n\n    helpers$1.getMaximumWidth = function (domNode) {\n      var container = helpers$1._getParentNode(domNode);\n\n      if (!container) {\n        return domNode.clientWidth;\n      }\n\n      var clientWidth = container.clientWidth;\n\n      var paddingLeft = helpers$1._calculatePadding(container, 'padding-left', clientWidth);\n\n      var paddingRight = helpers$1._calculatePadding(container, 'padding-right', clientWidth);\n\n      var w = clientWidth - paddingLeft - paddingRight;\n      var cw = helpers$1.getConstraintWidth(domNode);\n      return isNaN(cw) ? w : Math.min(w, cw);\n    };\n\n    helpers$1.getMaximumHeight = function (domNode) {\n      var container = helpers$1._getParentNode(domNode);\n\n      if (!container) {\n        return domNode.clientHeight;\n      }\n\n      var clientHeight = container.clientHeight;\n\n      var paddingTop = helpers$1._calculatePadding(container, 'padding-top', clientHeight);\n\n      var paddingBottom = helpers$1._calculatePadding(container, 'padding-bottom', clientHeight);\n\n      var h = clientHeight - paddingTop - paddingBottom;\n      var ch = helpers$1.getConstraintHeight(domNode);\n      return isNaN(ch) ? h : Math.min(h, ch);\n    };\n\n    helpers$1.getStyle = function (el, property) {\n      return el.currentStyle ? el.currentStyle[property] : document.defaultView.getComputedStyle(el, null).getPropertyValue(property);\n    };\n\n    helpers$1.retinaScale = function (chart, forceRatio) {\n      var pixelRatio = chart.currentDevicePixelRatio = forceRatio || typeof window !== 'undefined' && window.devicePixelRatio || 1;\n\n      if (pixelRatio === 1) {\n        return;\n      }\n\n      var canvas = chart.canvas;\n      var height = chart.height;\n      var width = chart.width;\n      canvas.height = height * pixelRatio;\n      canvas.width = width * pixelRatio;\n      chart.ctx.scale(pixelRatio, pixelRatio); // If no style has been set on the canvas, the render size is used as display size,\n      // making the chart visually bigger, so let's enforce it to the \"correct\" values.\n      // See https://github.com/chartjs/Chart.js/issues/3575\n\n      if (!canvas.style.height && !canvas.style.width) {\n        canvas.style.height = height + 'px';\n        canvas.style.width = width + 'px';\n      }\n    }; // -- Canvas methods\n\n\n    helpers$1.fontString = function (pixelSize, fontStyle, fontFamily) {\n      return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;\n    };\n\n    helpers$1.longestText = function (ctx, font, arrayOfThings, cache) {\n      cache = cache || {};\n      var data = cache.data = cache.data || {};\n      var gc = cache.garbageCollect = cache.garbageCollect || [];\n\n      if (cache.font !== font) {\n        data = cache.data = {};\n        gc = cache.garbageCollect = [];\n        cache.font = font;\n      }\n\n      ctx.font = font;\n      var longest = 0;\n      helpers$1.each(arrayOfThings, function (thing) {\n        // Undefined strings and arrays should not be measured\n        if (thing !== undefined && thing !== null && helpers$1.isArray(thing) !== true) {\n          longest = helpers$1.measureText(ctx, data, gc, longest, thing);\n        } else if (helpers$1.isArray(thing)) {\n          // if it is an array lets measure each element\n          // to do maybe simplify this function a bit so we can do this more recursively?\n          helpers$1.each(thing, function (nestedThing) {\n            // Undefined strings and arrays should not be measured\n            if (nestedThing !== undefined && nestedThing !== null && !helpers$1.isArray(nestedThing)) {\n              longest = helpers$1.measureText(ctx, data, gc, longest, nestedThing);\n            }\n          });\n        }\n      });\n      var gcLen = gc.length / 2;\n\n      if (gcLen > arrayOfThings.length) {\n        for (var i = 0; i < gcLen; i++) {\n          delete data[gc[i]];\n        }\n\n        gc.splice(0, gcLen);\n      }\n\n      return longest;\n    };\n\n    helpers$1.measureText = function (ctx, data, gc, longest, string) {\n      var textWidth = data[string];\n\n      if (!textWidth) {\n        textWidth = data[string] = ctx.measureText(string).width;\n        gc.push(string);\n      }\n\n      if (textWidth > longest) {\n        longest = textWidth;\n      }\n\n      return longest;\n    };\n\n    helpers$1.numberOfLabelLines = function (arrayOfThings) {\n      var numberOfLines = 1;\n      helpers$1.each(arrayOfThings, function (thing) {\n        if (helpers$1.isArray(thing)) {\n          if (thing.length > numberOfLines) {\n            numberOfLines = thing.length;\n          }\n        }\n      });\n      return numberOfLines;\n    };\n\n    helpers$1.color = !chartjsColor ? function (value) {\n      console.error('Color.js not found!');\n      return value;\n    } : function (value) {\n      /* global CanvasGradient */\n      if (value instanceof CanvasGradient) {\n        value = core_defaults.global.defaultColor;\n      }\n\n      return chartjsColor(value);\n    };\n\n    helpers$1.getHoverColor = function (colorValue) {\n      /* global CanvasPattern */\n      return colorValue instanceof CanvasPattern || colorValue instanceof CanvasGradient ? colorValue : helpers$1.color(colorValue).saturate(0.5).darken(0.1).rgbString();\n    };\n  };\n\n  function abstract() {\n    throw new Error('This method is not implemented: either no adapter can ' + 'be found or an incomplete integration was provided.');\n  }\n  /**\n   * Date adapter (current used by the time scale)\n   * @namespace Chart._adapters._date\n   * @memberof Chart._adapters\n   * @private\n   */\n\n  /**\n   * Currently supported unit string values.\n   * @typedef {('millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year')}\n   * @memberof Chart._adapters._date\n   * @name Unit\n   */\n\n  /**\n   * @class\n   */\n\n\n  function DateAdapter(options) {\n    this.options = options || {};\n  }\n\n  helpers$1.extend(DateAdapter.prototype,\n  /** @lends DateAdapter */\n  {\n    /**\n     * Returns a map of time formats for the supported formatting units defined\n     * in Unit as well as 'datetime' representing a detailed date/time string.\n     * @returns {{string: string}}\n     */\n    formats: abstract,\n\n    /**\n     * Parses the given `value` and return the associated timestamp.\n     * @param {any} value - the value to parse (usually comes from the data)\n     * @param {string} [format] - the expected data format\n     * @returns {(number|null)}\n     * @function\n     */\n    parse: abstract,\n\n    /**\n     * Returns the formatted date in the specified `format` for a given `timestamp`.\n     * @param {number} timestamp - the timestamp to format\n     * @param {string} format - the date/time token\n     * @return {string}\n     * @function\n     */\n    format: abstract,\n\n    /**\n     * Adds the specified `amount` of `unit` to the given `timestamp`.\n     * @param {number} timestamp - the input timestamp\n     * @param {number} amount - the amount to add\n     * @param {Unit} unit - the unit as string\n     * @return {number}\n     * @function\n     */\n    add: abstract,\n\n    /**\n     * Returns the number of `unit` between the given timestamps.\n     * @param {number} max - the input timestamp (reference)\n     * @param {number} min - the timestamp to substract\n     * @param {Unit} unit - the unit as string\n     * @return {number}\n     * @function\n     */\n    diff: abstract,\n\n    /**\n     * Returns start of `unit` for the given `timestamp`.\n     * @param {number} timestamp - the input timestamp\n     * @param {Unit} unit - the unit as string\n     * @param {number} [weekday] - the ISO day of the week with 1 being Monday\n     * and 7 being Sunday (only needed if param *unit* is `isoWeek`).\n     * @function\n     */\n    startOf: abstract,\n\n    /**\n     * Returns end of `unit` for the given `timestamp`.\n     * @param {number} timestamp - the input timestamp\n     * @param {Unit} unit - the unit as string\n     * @function\n     */\n    endOf: abstract,\n    // DEPRECATIONS\n\n    /**\n     * Provided for backward compatibility for scale.getValueForPixel(),\n     * this method should be overridden only by the moment adapter.\n     * @deprecated since version 2.8.0\n     * @todo remove at version 3\n     * @private\n     */\n    _create: function _create(value) {\n      return value;\n    }\n  });\n\n  DateAdapter.override = function (members) {\n    helpers$1.extend(DateAdapter.prototype, members);\n  };\n\n  var _date = DateAdapter;\n  var core_adapters = {\n    _date: _date\n  };\n  /**\n   * Namespace to hold static tick generation functions\n   * @namespace Chart.Ticks\n   */\n\n  var core_ticks = {\n    /**\n     * Namespace to hold formatters for different types of ticks\n     * @namespace Chart.Ticks.formatters\n     */\n    formatters: {\n      /**\n       * Formatter for value labels\n       * @method Chart.Ticks.formatters.values\n       * @param value the value to display\n       * @return {string|string[]} the label to display\n       */\n      values: function values(value) {\n        return helpers$1.isArray(value) ? value : '' + value;\n      },\n\n      /**\n       * Formatter for linear numeric ticks\n       * @method Chart.Ticks.formatters.linear\n       * @param tickValue {number} the value to be formatted\n       * @param index {number} the position of the tickValue parameter in the ticks array\n       * @param ticks {number[]} the list of ticks being converted\n       * @return {string} string representation of the tickValue parameter\n       */\n      linear: function linear(tickValue, index, ticks) {\n        // If we have lots of ticks, don't use the ones\n        var delta = ticks.length > 3 ? ticks[2] - ticks[1] : ticks[1] - ticks[0]; // If we have a number like 2.5 as the delta, figure out how many decimal places we need\n\n        if (Math.abs(delta) > 1) {\n          if (tickValue !== Math.floor(tickValue)) {\n            // not an integer\n            delta = tickValue - Math.floor(tickValue);\n          }\n        }\n\n        var logDelta = helpers$1.log10(Math.abs(delta));\n        var tickString = '';\n\n        if (tickValue !== 0) {\n          var maxTick = Math.max(Math.abs(ticks[0]), Math.abs(ticks[ticks.length - 1]));\n\n          if (maxTick < 1e-4) {\n            // all ticks are small numbers; use scientific notation\n            var logTick = helpers$1.log10(Math.abs(tickValue));\n            tickString = tickValue.toExponential(Math.floor(logTick) - Math.floor(logDelta));\n          } else {\n            var numDecimal = -1 * Math.floor(logDelta);\n            numDecimal = Math.max(Math.min(numDecimal, 20), 0); // toFixed has a max of 20 decimal places\n\n            tickString = tickValue.toFixed(numDecimal);\n          }\n        } else {\n          tickString = '0'; // never show decimal places for 0\n        }\n\n        return tickString;\n      },\n      logarithmic: function logarithmic(tickValue, index, ticks) {\n        var remain = tickValue / Math.pow(10, Math.floor(helpers$1.log10(tickValue)));\n\n        if (tickValue === 0) {\n          return '0';\n        } else if (remain === 1 || remain === 2 || remain === 5 || index === 0 || index === ticks.length - 1) {\n          return tickValue.toExponential();\n        }\n\n        return '';\n      }\n    }\n  };\n  var valueOrDefault$9 = helpers$1.valueOrDefault;\n  var valueAtIndexOrDefault = helpers$1.valueAtIndexOrDefault;\n\n  core_defaults._set('scale', {\n    display: true,\n    position: 'left',\n    offset: false,\n    // grid line settings\n    gridLines: {\n      display: true,\n      color: 'rgba(0, 0, 0, 0.1)',\n      lineWidth: 1,\n      drawBorder: true,\n      drawOnChartArea: true,\n      drawTicks: true,\n      tickMarkLength: 10,\n      zeroLineWidth: 1,\n      zeroLineColor: 'rgba(0,0,0,0.25)',\n      zeroLineBorderDash: [],\n      zeroLineBorderDashOffset: 0.0,\n      offsetGridLines: false,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n    // scale label\n    scaleLabel: {\n      // display property\n      display: false,\n      // actual label\n      labelString: '',\n      // top/bottom padding\n      padding: {\n        top: 4,\n        bottom: 4\n      }\n    },\n    // label settings\n    ticks: {\n      beginAtZero: false,\n      minRotation: 0,\n      maxRotation: 50,\n      mirror: false,\n      padding: 0,\n      reverse: false,\n      display: true,\n      autoSkip: true,\n      autoSkipPadding: 0,\n      labelOffset: 0,\n      // We pass through arrays to be rendered as multiline labels, we convert Others to strings here.\n      callback: core_ticks.formatters.values,\n      minor: {},\n      major: {}\n    }\n  });\n\n  function labelsFromTicks(ticks) {\n    var labels = [];\n    var i, ilen;\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      labels.push(ticks[i].label);\n    }\n\n    return labels;\n  }\n\n  function getPixelForGridLine(scale, index, offsetGridLines) {\n    var lineValue = scale.getPixelForTick(index);\n\n    if (offsetGridLines) {\n      if (scale.getTicks().length === 1) {\n        lineValue -= scale.isHorizontal() ? Math.max(lineValue - scale.left, scale.right - lineValue) : Math.max(lineValue - scale.top, scale.bottom - lineValue);\n      } else if (index === 0) {\n        lineValue -= (scale.getPixelForTick(1) - lineValue) / 2;\n      } else {\n        lineValue -= (lineValue - scale.getPixelForTick(index - 1)) / 2;\n      }\n    }\n\n    return lineValue;\n  }\n\n  function computeTextSize(context, tick, font) {\n    return helpers$1.isArray(tick) ? helpers$1.longestText(context, font, tick) : context.measureText(tick).width;\n  }\n\n  var core_scale = core_element.extend({\n    /**\n     * Get the padding needed for the scale\n     * @method getPadding\n     * @private\n     * @returns {Padding} the necessary padding\n     */\n    getPadding: function getPadding() {\n      var me = this;\n      return {\n        left: me.paddingLeft || 0,\n        top: me.paddingTop || 0,\n        right: me.paddingRight || 0,\n        bottom: me.paddingBottom || 0\n      };\n    },\n\n    /**\n     * Returns the scale tick objects ({label, major})\n     * @since 2.7\n     */\n    getTicks: function getTicks() {\n      return this._ticks;\n    },\n    // These methods are ordered by lifecyle. Utilities then follow.\n    // Any function defined here is inherited by all scale types.\n    // Any function can be extended by the scale type\n    mergeTicksOptions: function mergeTicksOptions() {\n      var ticks = this.options.ticks;\n\n      if (ticks.minor === false) {\n        ticks.minor = {\n          display: false\n        };\n      }\n\n      if (ticks.major === false) {\n        ticks.major = {\n          display: false\n        };\n      }\n\n      for (var key in ticks) {\n        if (key !== 'major' && key !== 'minor') {\n          if (typeof ticks.minor[key] === 'undefined') {\n            ticks.minor[key] = ticks[key];\n          }\n\n          if (typeof ticks.major[key] === 'undefined') {\n            ticks.major[key] = ticks[key];\n          }\n        }\n      }\n    },\n    beforeUpdate: function beforeUpdate() {\n      helpers$1.callback(this.options.beforeUpdate, [this]);\n    },\n    update: function update(maxWidth, maxHeight, margins) {\n      var me = this;\n      var i, ilen, labels, label, ticks, tick; // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n\n      me.beforeUpdate(); // Absorb the master measurements\n\n      me.maxWidth = maxWidth;\n      me.maxHeight = maxHeight;\n      me.margins = helpers$1.extend({\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0\n      }, margins);\n      me._maxLabelLines = 0;\n      me.longestLabelWidth = 0;\n      me.longestTextCache = me.longestTextCache || {}; // Dimensions\n\n      me.beforeSetDimensions();\n      me.setDimensions();\n      me.afterSetDimensions(); // Data min/max\n\n      me.beforeDataLimits();\n      me.determineDataLimits();\n      me.afterDataLimits(); // Ticks - `this.ticks` is now DEPRECATED!\n      // Internal ticks are now stored as objects in the PRIVATE `this._ticks` member\n      // and must not be accessed directly from outside this class. `this.ticks` being\n      // around for long time and not marked as private, we can't change its structure\n      // without unexpected breaking changes. If you need to access the scale ticks,\n      // use scale.getTicks() instead.\n\n      me.beforeBuildTicks(); // New implementations should return an array of objects but for BACKWARD COMPAT,\n      // we still support no return (`this.ticks` internally set by calling this method).\n\n      ticks = me.buildTicks() || []; // Allow modification of ticks in callback.\n\n      ticks = me.afterBuildTicks(ticks) || ticks;\n      me.beforeTickToLabelConversion(); // New implementations should return the formatted tick labels but for BACKWARD\n      // COMPAT, we still support no return (`this.ticks` internally changed by calling\n      // this method and supposed to contain only string values).\n\n      labels = me.convertTicksToLabels(ticks) || me.ticks;\n      me.afterTickToLabelConversion();\n      me.ticks = labels; // BACKWARD COMPATIBILITY\n      // IMPORTANT: from this point, we consider that `this.ticks` will NEVER change!\n      // BACKWARD COMPAT: synchronize `_ticks` with labels (so potentially `this.ticks`)\n\n      for (i = 0, ilen = labels.length; i < ilen; ++i) {\n        label = labels[i];\n        tick = ticks[i];\n\n        if (!tick) {\n          ticks.push(tick = {\n            label: label,\n            major: false\n          });\n        } else {\n          tick.label = label;\n        }\n      }\n\n      me._ticks = ticks; // Tick Rotation\n\n      me.beforeCalculateTickRotation();\n      me.calculateTickRotation();\n      me.afterCalculateTickRotation(); // Fit\n\n      me.beforeFit();\n      me.fit();\n      me.afterFit(); //\n\n      me.afterUpdate();\n      return me.minSize;\n    },\n    afterUpdate: function afterUpdate() {\n      helpers$1.callback(this.options.afterUpdate, [this]);\n    },\n    //\n    beforeSetDimensions: function beforeSetDimensions() {\n      helpers$1.callback(this.options.beforeSetDimensions, [this]);\n    },\n    setDimensions: function setDimensions() {\n      var me = this; // Set the unconstrained dimension before label rotation\n\n      if (me.isHorizontal()) {\n        // Reset position before calculating rotation\n        me.width = me.maxWidth;\n        me.left = 0;\n        me.right = me.width;\n      } else {\n        me.height = me.maxHeight; // Reset position before calculating rotation\n\n        me.top = 0;\n        me.bottom = me.height;\n      } // Reset padding\n\n\n      me.paddingLeft = 0;\n      me.paddingTop = 0;\n      me.paddingRight = 0;\n      me.paddingBottom = 0;\n    },\n    afterSetDimensions: function afterSetDimensions() {\n      helpers$1.callback(this.options.afterSetDimensions, [this]);\n    },\n    // Data limits\n    beforeDataLimits: function beforeDataLimits() {\n      helpers$1.callback(this.options.beforeDataLimits, [this]);\n    },\n    determineDataLimits: helpers$1.noop,\n    afterDataLimits: function afterDataLimits() {\n      helpers$1.callback(this.options.afterDataLimits, [this]);\n    },\n    //\n    beforeBuildTicks: function beforeBuildTicks() {\n      helpers$1.callback(this.options.beforeBuildTicks, [this]);\n    },\n    buildTicks: helpers$1.noop,\n    afterBuildTicks: function afterBuildTicks(ticks) {\n      var me = this; // ticks is empty for old axis implementations here\n\n      if (helpers$1.isArray(ticks) && ticks.length) {\n        return helpers$1.callback(me.options.afterBuildTicks, [me, ticks]);\n      } // Support old implementations (that modified `this.ticks` directly in buildTicks)\n\n\n      me.ticks = helpers$1.callback(me.options.afterBuildTicks, [me, me.ticks]) || me.ticks;\n      return ticks;\n    },\n    beforeTickToLabelConversion: function beforeTickToLabelConversion() {\n      helpers$1.callback(this.options.beforeTickToLabelConversion, [this]);\n    },\n    convertTicksToLabels: function convertTicksToLabels() {\n      var me = this; // Convert ticks to strings\n\n      var tickOpts = me.options.ticks;\n      me.ticks = me.ticks.map(tickOpts.userCallback || tickOpts.callback, this);\n    },\n    afterTickToLabelConversion: function afterTickToLabelConversion() {\n      helpers$1.callback(this.options.afterTickToLabelConversion, [this]);\n    },\n    //\n    beforeCalculateTickRotation: function beforeCalculateTickRotation() {\n      helpers$1.callback(this.options.beforeCalculateTickRotation, [this]);\n    },\n    calculateTickRotation: function calculateTickRotation() {\n      var me = this;\n      var context = me.ctx;\n      var tickOpts = me.options.ticks;\n      var labels = labelsFromTicks(me._ticks); // Get the width of each grid by calculating the difference\n      // between x offsets between 0 and 1.\n\n      var tickFont = helpers$1.options._parseFont(tickOpts);\n\n      context.font = tickFont.string;\n      var labelRotation = tickOpts.minRotation || 0;\n\n      if (labels.length && me.options.display && me.isHorizontal()) {\n        var originalLabelWidth = helpers$1.longestText(context, tickFont.string, labels, me.longestTextCache);\n        var labelWidth = originalLabelWidth;\n        var cosRotation, sinRotation; // Allow 3 pixels x2 padding either side for label readability\n\n        var tickWidth = me.getPixelForTick(1) - me.getPixelForTick(0) - 6; // Max label rotation can be set or default to 90 - also act as a loop counter\n\n        while (labelWidth > tickWidth && labelRotation < tickOpts.maxRotation) {\n          var angleRadians = helpers$1.toRadians(labelRotation);\n          cosRotation = Math.cos(angleRadians);\n          sinRotation = Math.sin(angleRadians);\n\n          if (sinRotation * originalLabelWidth > me.maxHeight) {\n            // go back one step\n            labelRotation--;\n            break;\n          }\n\n          labelRotation++;\n          labelWidth = cosRotation * originalLabelWidth;\n        }\n      }\n\n      me.labelRotation = labelRotation;\n    },\n    afterCalculateTickRotation: function afterCalculateTickRotation() {\n      helpers$1.callback(this.options.afterCalculateTickRotation, [this]);\n    },\n    //\n    beforeFit: function beforeFit() {\n      helpers$1.callback(this.options.beforeFit, [this]);\n    },\n    fit: function fit() {\n      var me = this; // Reset\n\n      var minSize = me.minSize = {\n        width: 0,\n        height: 0\n      };\n      var labels = labelsFromTicks(me._ticks);\n      var opts = me.options;\n      var tickOpts = opts.ticks;\n      var scaleLabelOpts = opts.scaleLabel;\n      var gridLineOpts = opts.gridLines;\n\n      var display = me._isVisible();\n\n      var position = opts.position;\n      var isHorizontal = me.isHorizontal();\n      var parseFont = helpers$1.options._parseFont;\n      var tickFont = parseFont(tickOpts);\n      var tickMarkLength = opts.gridLines.tickMarkLength; // Width\n\n      if (isHorizontal) {\n        // subtract the margins to line up with the chartArea if we are a full width scale\n        minSize.width = me.isFullWidth() ? me.maxWidth - me.margins.left - me.margins.right : me.maxWidth;\n      } else {\n        minSize.width = display && gridLineOpts.drawTicks ? tickMarkLength : 0;\n      } // height\n\n\n      if (isHorizontal) {\n        minSize.height = display && gridLineOpts.drawTicks ? tickMarkLength : 0;\n      } else {\n        minSize.height = me.maxHeight; // fill all the height\n      } // Are we showing a title for the scale?\n\n\n      if (scaleLabelOpts.display && display) {\n        var scaleLabelFont = parseFont(scaleLabelOpts);\n        var scaleLabelPadding = helpers$1.options.toPadding(scaleLabelOpts.padding);\n        var deltaHeight = scaleLabelFont.lineHeight + scaleLabelPadding.height;\n\n        if (isHorizontal) {\n          minSize.height += deltaHeight;\n        } else {\n          minSize.width += deltaHeight;\n        }\n      } // Don't bother fitting the ticks if we are not showing the labels\n\n\n      if (tickOpts.display && display) {\n        var largestTextWidth = helpers$1.longestText(me.ctx, tickFont.string, labels, me.longestTextCache);\n        var tallestLabelHeightInLines = helpers$1.numberOfLabelLines(labels);\n        var lineSpace = tickFont.size * 0.5;\n        var tickPadding = me.options.ticks.padding; // Store max number of lines and widest label for _autoSkip\n\n        me._maxLabelLines = tallestLabelHeightInLines;\n        me.longestLabelWidth = largestTextWidth;\n\n        if (isHorizontal) {\n          var angleRadians = helpers$1.toRadians(me.labelRotation);\n          var cosRotation = Math.cos(angleRadians);\n          var sinRotation = Math.sin(angleRadians); // TODO - improve this calculation\n\n          var labelHeight = sinRotation * largestTextWidth + tickFont.lineHeight * tallestLabelHeightInLines + lineSpace; // padding\n\n          minSize.height = Math.min(me.maxHeight, minSize.height + labelHeight + tickPadding);\n          me.ctx.font = tickFont.string;\n          var firstLabelWidth = computeTextSize(me.ctx, labels[0], tickFont.string);\n          var lastLabelWidth = computeTextSize(me.ctx, labels[labels.length - 1], tickFont.string);\n          var offsetLeft = me.getPixelForTick(0) - me.left;\n          var offsetRight = me.right - me.getPixelForTick(labels.length - 1);\n          var paddingLeft, paddingRight; // Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned\n          // which means that the right padding is dominated by the font height\n\n          if (me.labelRotation !== 0) {\n            paddingLeft = position === 'bottom' ? cosRotation * firstLabelWidth : cosRotation * lineSpace;\n            paddingRight = position === 'bottom' ? cosRotation * lineSpace : cosRotation * lastLabelWidth;\n          } else {\n            paddingLeft = firstLabelWidth / 2;\n            paddingRight = lastLabelWidth / 2;\n          }\n\n          me.paddingLeft = Math.max(paddingLeft - offsetLeft, 0) + 3; // add 3 px to move away from canvas edges\n\n          me.paddingRight = Math.max(paddingRight - offsetRight, 0) + 3;\n        } else {\n          // A vertical axis is more constrained by the width. Labels are the\n          // dominant factor here, so get that length first and account for padding\n          if (tickOpts.mirror) {\n            largestTextWidth = 0;\n          } else {\n            // use lineSpace for consistency with horizontal axis\n            // tickPadding is not implemented for horizontal\n            largestTextWidth += tickPadding + lineSpace;\n          }\n\n          minSize.width = Math.min(me.maxWidth, minSize.width + largestTextWidth);\n          me.paddingTop = tickFont.size / 2;\n          me.paddingBottom = tickFont.size / 2;\n        }\n      }\n\n      me.handleMargins();\n      me.width = minSize.width;\n      me.height = minSize.height;\n    },\n\n    /**\n     * Handle margins and padding interactions\n     * @private\n     */\n    handleMargins: function handleMargins() {\n      var me = this;\n\n      if (me.margins) {\n        me.paddingLeft = Math.max(me.paddingLeft - me.margins.left, 0);\n        me.paddingTop = Math.max(me.paddingTop - me.margins.top, 0);\n        me.paddingRight = Math.max(me.paddingRight - me.margins.right, 0);\n        me.paddingBottom = Math.max(me.paddingBottom - me.margins.bottom, 0);\n      }\n    },\n    afterFit: function afterFit() {\n      helpers$1.callback(this.options.afterFit, [this]);\n    },\n    // Shared Methods\n    isHorizontal: function isHorizontal() {\n      return this.options.position === 'top' || this.options.position === 'bottom';\n    },\n    isFullWidth: function isFullWidth() {\n      return this.options.fullWidth;\n    },\n    // Get the correct value. NaN bad inputs, If the value type is object get the x or y based on whether we are horizontal or not\n    getRightValue: function getRightValue(rawValue) {\n      // Null and undefined values first\n      if (helpers$1.isNullOrUndef(rawValue)) {\n        return NaN;\n      } // isNaN(object) returns true, so make sure NaN is checking for a number; Discard Infinite values\n\n\n      if ((typeof rawValue === 'number' || rawValue instanceof Number) && !isFinite(rawValue)) {\n        return NaN;\n      } // If it is in fact an object, dive in one more level\n\n\n      if (rawValue) {\n        if (this.isHorizontal()) {\n          if (rawValue.x !== undefined) {\n            return this.getRightValue(rawValue.x);\n          }\n        } else if (rawValue.y !== undefined) {\n          return this.getRightValue(rawValue.y);\n        }\n      } // Value is good, return it\n\n\n      return rawValue;\n    },\n\n    /**\n     * Used to get the value to display in the tooltip for the data at the given index\n     * @param index\n     * @param datasetIndex\n     */\n    getLabelForIndex: helpers$1.noop,\n\n    /**\n     * Returns the location of the given data point. Value can either be an index or a numerical value\n     * The coordinate (0, 0) is at the upper-left corner of the canvas\n     * @param value\n     * @param index\n     * @param datasetIndex\n     */\n    getPixelForValue: helpers$1.noop,\n\n    /**\n     * Used to get the data value from a given pixel. This is the inverse of getPixelForValue\n     * The coordinate (0, 0) is at the upper-left corner of the canvas\n     * @param pixel\n     */\n    getValueForPixel: helpers$1.noop,\n\n    /**\n     * Returns the location of the tick at the given index\n     * The coordinate (0, 0) is at the upper-left corner of the canvas\n     */\n    getPixelForTick: function getPixelForTick(index) {\n      var me = this;\n      var offset = me.options.offset;\n\n      if (me.isHorizontal()) {\n        var innerWidth = me.width - (me.paddingLeft + me.paddingRight);\n        var tickWidth = innerWidth / Math.max(me._ticks.length - (offset ? 0 : 1), 1);\n        var pixel = tickWidth * index + me.paddingLeft;\n\n        if (offset) {\n          pixel += tickWidth / 2;\n        }\n\n        var finalVal = me.left + pixel;\n        finalVal += me.isFullWidth() ? me.margins.left : 0;\n        return finalVal;\n      }\n\n      var innerHeight = me.height - (me.paddingTop + me.paddingBottom);\n      return me.top + index * (innerHeight / (me._ticks.length - 1));\n    },\n\n    /**\n     * Utility for getting the pixel location of a percentage of scale\n     * The coordinate (0, 0) is at the upper-left corner of the canvas\n     */\n    getPixelForDecimal: function getPixelForDecimal(decimal) {\n      var me = this;\n\n      if (me.isHorizontal()) {\n        var innerWidth = me.width - (me.paddingLeft + me.paddingRight);\n        var valueOffset = innerWidth * decimal + me.paddingLeft;\n        var finalVal = me.left + valueOffset;\n        finalVal += me.isFullWidth() ? me.margins.left : 0;\n        return finalVal;\n      }\n\n      return me.top + decimal * me.height;\n    },\n\n    /**\n     * Returns the pixel for the minimum chart value\n     * The coordinate (0, 0) is at the upper-left corner of the canvas\n     */\n    getBasePixel: function getBasePixel() {\n      return this.getPixelForValue(this.getBaseValue());\n    },\n    getBaseValue: function getBaseValue() {\n      var me = this;\n      var min = me.min;\n      var max = me.max;\n      return me.beginAtZero ? 0 : min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n    },\n\n    /**\n     * Returns a subset of ticks to be plotted to avoid overlapping labels.\n     * @private\n     */\n    _autoSkip: function _autoSkip(ticks) {\n      var me = this;\n      var isHorizontal = me.isHorizontal();\n      var optionTicks = me.options.ticks.minor;\n      var tickCount = ticks.length;\n      var skipRatio = false;\n      var maxTicks = optionTicks.maxTicksLimit; // Total space needed to display all ticks. First and last ticks are\n      // drawn as their center at end of axis, so tickCount-1\n\n      var ticksLength = me._tickSize() * (tickCount - 1); // Axis length\n\n      var axisLength = isHorizontal ? me.width - (me.paddingLeft + me.paddingRight) : me.height - (me.paddingTop + me.PaddingBottom);\n      var result = [];\n      var i, tick;\n\n      if (ticksLength > axisLength) {\n        skipRatio = 1 + Math.floor(ticksLength / axisLength);\n      } // if they defined a max number of optionTicks,\n      // increase skipRatio until that number is met\n\n\n      if (tickCount > maxTicks) {\n        skipRatio = Math.max(skipRatio, 1 + Math.floor(tickCount / maxTicks));\n      }\n\n      for (i = 0; i < tickCount; i++) {\n        tick = ticks[i];\n\n        if (skipRatio > 1 && i % skipRatio > 0) {\n          // leave tick in place but make sure it's not displayed (#4635)\n          delete tick.label;\n        }\n\n        result.push(tick);\n      }\n\n      return result;\n    },\n\n    /**\n     * @private\n     */\n    _tickSize: function _tickSize() {\n      var me = this;\n      var isHorizontal = me.isHorizontal();\n      var optionTicks = me.options.ticks.minor; // Calculate space needed by label in axis direction.\n\n      var rot = helpers$1.toRadians(me.labelRotation);\n      var cos = Math.abs(Math.cos(rot));\n      var sin = Math.abs(Math.sin(rot));\n      var padding = optionTicks.autoSkipPadding || 0;\n      var w = me.longestLabelWidth + padding || 0;\n\n      var tickFont = helpers$1.options._parseFont(optionTicks);\n\n      var h = me._maxLabelLines * tickFont.lineHeight + padding || 0; // Calculate space needed for 1 tick in axis direction.\n\n      return isHorizontal ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n    },\n\n    /**\n     * @private\n     */\n    _isVisible: function _isVisible() {\n      var me = this;\n      var chart = me.chart;\n      var display = me.options.display;\n      var i, ilen, meta;\n\n      if (display !== 'auto') {\n        return !!display;\n      } // When 'auto', the scale is visible if at least one associated dataset is visible.\n\n\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n\n          if (meta.xAxisID === me.id || meta.yAxisID === me.id) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Actually draw the scale on the canvas\n     * @param {object} chartArea - the area of the chart to draw full grid lines on\n     */\n    draw: function draw(chartArea) {\n      var me = this;\n      var options = me.options;\n\n      if (!me._isVisible()) {\n        return;\n      }\n\n      var chart = me.chart;\n      var context = me.ctx;\n      var globalDefaults = core_defaults.global;\n      var defaultFontColor = globalDefaults.defaultFontColor;\n      var optionTicks = options.ticks.minor;\n      var optionMajorTicks = options.ticks.major || optionTicks;\n      var gridLines = options.gridLines;\n      var scaleLabel = options.scaleLabel;\n      var position = options.position;\n      var isRotated = me.labelRotation !== 0;\n      var isMirrored = optionTicks.mirror;\n      var isHorizontal = me.isHorizontal();\n      var parseFont = helpers$1.options._parseFont;\n      var ticks = optionTicks.display && optionTicks.autoSkip ? me._autoSkip(me.getTicks()) : me.getTicks();\n      var tickFontColor = valueOrDefault$9(optionTicks.fontColor, defaultFontColor);\n      var tickFont = parseFont(optionTicks);\n      var lineHeight = tickFont.lineHeight;\n      var majorTickFontColor = valueOrDefault$9(optionMajorTicks.fontColor, defaultFontColor);\n      var majorTickFont = parseFont(optionMajorTicks);\n      var tickPadding = optionTicks.padding;\n      var labelOffset = optionTicks.labelOffset;\n      var tl = gridLines.drawTicks ? gridLines.tickMarkLength : 0;\n      var scaleLabelFontColor = valueOrDefault$9(scaleLabel.fontColor, defaultFontColor);\n      var scaleLabelFont = parseFont(scaleLabel);\n      var scaleLabelPadding = helpers$1.options.toPadding(scaleLabel.padding);\n      var labelRotationRadians = helpers$1.toRadians(me.labelRotation);\n      var itemsToDraw = [];\n      var axisWidth = gridLines.drawBorder ? valueAtIndexOrDefault(gridLines.lineWidth, 0, 0) : 0;\n      var alignPixel = helpers$1._alignPixel;\n      var borderValue, tickStart, tickEnd;\n\n      if (position === 'top') {\n        borderValue = alignPixel(chart, me.bottom, axisWidth);\n        tickStart = me.bottom - tl;\n        tickEnd = borderValue - axisWidth / 2;\n      } else if (position === 'bottom') {\n        borderValue = alignPixel(chart, me.top, axisWidth);\n        tickStart = borderValue + axisWidth / 2;\n        tickEnd = me.top + tl;\n      } else if (position === 'left') {\n        borderValue = alignPixel(chart, me.right, axisWidth);\n        tickStart = me.right - tl;\n        tickEnd = borderValue - axisWidth / 2;\n      } else {\n        borderValue = alignPixel(chart, me.left, axisWidth);\n        tickStart = borderValue + axisWidth / 2;\n        tickEnd = me.left + tl;\n      }\n\n      var epsilon = 0.0000001; // 0.0000001 is margin in pixels for Accumulated error.\n\n      helpers$1.each(ticks, function (tick, index) {\n        // autoskipper skipped this tick (#4635)\n        if (helpers$1.isNullOrUndef(tick.label)) {\n          return;\n        }\n\n        var label = tick.label;\n        var lineWidth, lineColor, borderDash, borderDashOffset;\n\n        if (index === me.zeroLineIndex && options.offset === gridLines.offsetGridLines) {\n          // Draw the first index specially\n          lineWidth = gridLines.zeroLineWidth;\n          lineColor = gridLines.zeroLineColor;\n          borderDash = gridLines.zeroLineBorderDash || [];\n          borderDashOffset = gridLines.zeroLineBorderDashOffset || 0.0;\n        } else {\n          lineWidth = valueAtIndexOrDefault(gridLines.lineWidth, index);\n          lineColor = valueAtIndexOrDefault(gridLines.color, index);\n          borderDash = gridLines.borderDash || [];\n          borderDashOffset = gridLines.borderDashOffset || 0.0;\n        } // Common properties\n\n\n        var tx1, ty1, tx2, ty2, x1, y1, x2, y2, labelX, labelY, textOffset, textAlign;\n        var labelCount = helpers$1.isArray(label) ? label.length : 1;\n        var lineValue = getPixelForGridLine(me, index, gridLines.offsetGridLines);\n\n        if (isHorizontal) {\n          var labelYOffset = tl + tickPadding;\n\n          if (lineValue < me.left - epsilon) {\n            lineColor = 'rgba(0,0,0,0)';\n          }\n\n          tx1 = tx2 = x1 = x2 = alignPixel(chart, lineValue, lineWidth);\n          ty1 = tickStart;\n          ty2 = tickEnd;\n          labelX = me.getPixelForTick(index) + labelOffset; // x values for optionTicks (need to consider offsetLabel option)\n\n          if (position === 'top') {\n            y1 = alignPixel(chart, chartArea.top, axisWidth) + axisWidth / 2;\n            y2 = chartArea.bottom;\n            textOffset = ((!isRotated ? 0.5 : 1) - labelCount) * lineHeight;\n            textAlign = !isRotated ? 'center' : 'left';\n            labelY = me.bottom - labelYOffset;\n          } else {\n            y1 = chartArea.top;\n            y2 = alignPixel(chart, chartArea.bottom, axisWidth) - axisWidth / 2;\n            textOffset = (!isRotated ? 0.5 : 0) * lineHeight;\n            textAlign = !isRotated ? 'center' : 'right';\n            labelY = me.top + labelYOffset;\n          }\n        } else {\n          var labelXOffset = (isMirrored ? 0 : tl) + tickPadding;\n\n          if (lineValue < me.top - epsilon) {\n            lineColor = 'rgba(0,0,0,0)';\n          }\n\n          tx1 = tickStart;\n          tx2 = tickEnd;\n          ty1 = ty2 = y1 = y2 = alignPixel(chart, lineValue, lineWidth);\n          labelY = me.getPixelForTick(index) + labelOffset;\n          textOffset = (1 - labelCount) * lineHeight / 2;\n\n          if (position === 'left') {\n            x1 = alignPixel(chart, chartArea.left, axisWidth) + axisWidth / 2;\n            x2 = chartArea.right;\n            textAlign = isMirrored ? 'left' : 'right';\n            labelX = me.right - labelXOffset;\n          } else {\n            x1 = chartArea.left;\n            x2 = alignPixel(chart, chartArea.right, axisWidth) - axisWidth / 2;\n            textAlign = isMirrored ? 'right' : 'left';\n            labelX = me.left + labelXOffset;\n          }\n        }\n\n        itemsToDraw.push({\n          tx1: tx1,\n          ty1: ty1,\n          tx2: tx2,\n          ty2: ty2,\n          x1: x1,\n          y1: y1,\n          x2: x2,\n          y2: y2,\n          labelX: labelX,\n          labelY: labelY,\n          glWidth: lineWidth,\n          glColor: lineColor,\n          glBorderDash: borderDash,\n          glBorderDashOffset: borderDashOffset,\n          rotation: -1 * labelRotationRadians,\n          label: label,\n          major: tick.major,\n          textOffset: textOffset,\n          textAlign: textAlign\n        });\n      }); // Draw all of the tick labels, tick marks, and grid lines at the correct places\n\n      helpers$1.each(itemsToDraw, function (itemToDraw) {\n        var glWidth = itemToDraw.glWidth;\n        var glColor = itemToDraw.glColor;\n\n        if (gridLines.display && glWidth && glColor) {\n          context.save();\n          context.lineWidth = glWidth;\n          context.strokeStyle = glColor;\n\n          if (context.setLineDash) {\n            context.setLineDash(itemToDraw.glBorderDash);\n            context.lineDashOffset = itemToDraw.glBorderDashOffset;\n          }\n\n          context.beginPath();\n\n          if (gridLines.drawTicks) {\n            context.moveTo(itemToDraw.tx1, itemToDraw.ty1);\n            context.lineTo(itemToDraw.tx2, itemToDraw.ty2);\n          }\n\n          if (gridLines.drawOnChartArea) {\n            context.moveTo(itemToDraw.x1, itemToDraw.y1);\n            context.lineTo(itemToDraw.x2, itemToDraw.y2);\n          }\n\n          context.stroke();\n          context.restore();\n        }\n\n        if (optionTicks.display) {\n          // Make sure we draw text in the correct color and font\n          context.save();\n          context.translate(itemToDraw.labelX, itemToDraw.labelY);\n          context.rotate(itemToDraw.rotation);\n          context.font = itemToDraw.major ? majorTickFont.string : tickFont.string;\n          context.fillStyle = itemToDraw.major ? majorTickFontColor : tickFontColor;\n          context.textBaseline = 'middle';\n          context.textAlign = itemToDraw.textAlign;\n          var label = itemToDraw.label;\n          var y = itemToDraw.textOffset;\n\n          if (helpers$1.isArray(label)) {\n            for (var i = 0; i < label.length; ++i) {\n              // We just make sure the multiline element is a string here..\n              context.fillText('' + label[i], 0, y);\n              y += lineHeight;\n            }\n          } else {\n            context.fillText(label, 0, y);\n          }\n\n          context.restore();\n        }\n      });\n\n      if (scaleLabel.display) {\n        // Draw the scale label\n        var scaleLabelX;\n        var scaleLabelY;\n        var rotation = 0;\n        var halfLineHeight = scaleLabelFont.lineHeight / 2;\n\n        if (isHorizontal) {\n          scaleLabelX = me.left + (me.right - me.left) / 2; // midpoint of the width\n\n          scaleLabelY = position === 'bottom' ? me.bottom - halfLineHeight - scaleLabelPadding.bottom : me.top + halfLineHeight + scaleLabelPadding.top;\n        } else {\n          var isLeft = position === 'left';\n          scaleLabelX = isLeft ? me.left + halfLineHeight + scaleLabelPadding.top : me.right - halfLineHeight - scaleLabelPadding.top;\n          scaleLabelY = me.top + (me.bottom - me.top) / 2;\n          rotation = isLeft ? -0.5 * Math.PI : 0.5 * Math.PI;\n        }\n\n        context.save();\n        context.translate(scaleLabelX, scaleLabelY);\n        context.rotate(rotation);\n        context.textAlign = 'center';\n        context.textBaseline = 'middle';\n        context.fillStyle = scaleLabelFontColor; // render in correct colour\n\n        context.font = scaleLabelFont.string;\n        context.fillText(scaleLabel.labelString, 0, 0);\n        context.restore();\n      }\n\n      if (axisWidth) {\n        // Draw the line at the edge of the axis\n        var firstLineWidth = axisWidth;\n        var lastLineWidth = valueAtIndexOrDefault(gridLines.lineWidth, ticks.length - 1, 0);\n        var x1, x2, y1, y2;\n\n        if (isHorizontal) {\n          x1 = alignPixel(chart, me.left, firstLineWidth) - firstLineWidth / 2;\n          x2 = alignPixel(chart, me.right, lastLineWidth) + lastLineWidth / 2;\n          y1 = y2 = borderValue;\n        } else {\n          y1 = alignPixel(chart, me.top, firstLineWidth) - firstLineWidth / 2;\n          y2 = alignPixel(chart, me.bottom, lastLineWidth) + lastLineWidth / 2;\n          x1 = x2 = borderValue;\n        }\n\n        context.lineWidth = axisWidth;\n        context.strokeStyle = valueAtIndexOrDefault(gridLines.color, 0);\n        context.beginPath();\n        context.moveTo(x1, y1);\n        context.lineTo(x2, y2);\n        context.stroke();\n      }\n    }\n  });\n  var defaultConfig = {\n    position: 'bottom'\n  };\n  var scale_category = core_scale.extend({\n    /**\n    * Internal function to get the correct labels. If data.xLabels or data.yLabels are defined, use those\n    * else fall back to data.labels\n    * @private\n    */\n    getLabels: function getLabels() {\n      var data = this.chart.data;\n      return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels;\n    },\n    determineDataLimits: function determineDataLimits() {\n      var me = this;\n      var labels = me.getLabels();\n      me.minIndex = 0;\n      me.maxIndex = labels.length - 1;\n      var findIndex;\n\n      if (me.options.ticks.min !== undefined) {\n        // user specified min value\n        findIndex = labels.indexOf(me.options.ticks.min);\n        me.minIndex = findIndex !== -1 ? findIndex : me.minIndex;\n      }\n\n      if (me.options.ticks.max !== undefined) {\n        // user specified max value\n        findIndex = labels.indexOf(me.options.ticks.max);\n        me.maxIndex = findIndex !== -1 ? findIndex : me.maxIndex;\n      }\n\n      me.min = labels[me.minIndex];\n      me.max = labels[me.maxIndex];\n    },\n    buildTicks: function buildTicks() {\n      var me = this;\n      var labels = me.getLabels(); // If we are viewing some subset of labels, slice the original array\n\n      me.ticks = me.minIndex === 0 && me.maxIndex === labels.length - 1 ? labels : labels.slice(me.minIndex, me.maxIndex + 1);\n    },\n    getLabelForIndex: function getLabelForIndex(index, datasetIndex) {\n      var me = this;\n      var chart = me.chart;\n\n      if (chart.getDatasetMeta(datasetIndex).controller._getValueScaleId() === me.id) {\n        return me.getRightValue(chart.data.datasets[datasetIndex].data[index]);\n      }\n\n      return me.ticks[index - me.minIndex];\n    },\n    // Used to get data value locations.  Value can either be an index or a numerical value\n    getPixelForValue: function getPixelForValue(value, index) {\n      var me = this;\n      var offset = me.options.offset; // 1 is added because we need the length but we have the indexes\n\n      var offsetAmt = Math.max(me.maxIndex + 1 - me.minIndex - (offset ? 0 : 1), 1); // If value is a data object, then index is the index in the data array,\n      // not the index of the scale. We need to change that.\n\n      var valueCategory;\n\n      if (value !== undefined && value !== null) {\n        valueCategory = me.isHorizontal() ? value.x : value.y;\n      }\n\n      if (valueCategory !== undefined || value !== undefined && isNaN(index)) {\n        var labels = me.getLabels();\n        value = valueCategory || value;\n        var idx = labels.indexOf(value);\n        index = idx !== -1 ? idx : index;\n      }\n\n      if (me.isHorizontal()) {\n        var valueWidth = me.width / offsetAmt;\n        var widthOffset = valueWidth * (index - me.minIndex);\n\n        if (offset) {\n          widthOffset += valueWidth / 2;\n        }\n\n        return me.left + widthOffset;\n      }\n\n      var valueHeight = me.height / offsetAmt;\n      var heightOffset = valueHeight * (index - me.minIndex);\n\n      if (offset) {\n        heightOffset += valueHeight / 2;\n      }\n\n      return me.top + heightOffset;\n    },\n    getPixelForTick: function getPixelForTick(index) {\n      return this.getPixelForValue(this.ticks[index], index + this.minIndex, null);\n    },\n    getValueForPixel: function getValueForPixel(pixel) {\n      var me = this;\n      var offset = me.options.offset;\n      var value;\n      var offsetAmt = Math.max(me._ticks.length - (offset ? 0 : 1), 1);\n      var horz = me.isHorizontal();\n      var valueDimension = (horz ? me.width : me.height) / offsetAmt;\n      pixel -= horz ? me.left : me.top;\n\n      if (offset) {\n        pixel -= valueDimension / 2;\n      }\n\n      if (pixel <= 0) {\n        value = 0;\n      } else {\n        value = Math.round(pixel / valueDimension);\n      }\n\n      return value + me.minIndex;\n    },\n    getBasePixel: function getBasePixel() {\n      return this.bottom;\n    }\n  }); // INTERNAL: static default options, registered in src/index.js\n\n  var _defaults = defaultConfig;\n  scale_category._defaults = _defaults;\n  var noop = helpers$1.noop;\n  var isNullOrUndef = helpers$1.isNullOrUndef;\n  /**\n   * Generate a set of linear ticks\n   * @param generationOptions the options used to generate the ticks\n   * @param dataRange the range of the data\n   * @returns {number[]} array of tick values\n   */\n\n  function generateTicks(generationOptions, dataRange) {\n    var ticks = []; // To get a \"nice\" value for the tick spacing, we will use the appropriately named\n    // \"nice number\" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks\n    // for details.\n\n    var MIN_SPACING = 1e-14;\n    var stepSize = generationOptions.stepSize;\n    var unit = stepSize || 1;\n    var maxNumSpaces = generationOptions.maxTicks - 1;\n    var min = generationOptions.min;\n    var max = generationOptions.max;\n    var precision = generationOptions.precision;\n    var rmin = dataRange.min;\n    var rmax = dataRange.max;\n    var spacing = helpers$1.niceNum((rmax - rmin) / maxNumSpaces / unit) * unit;\n    var factor, niceMin, niceMax, numSpaces; // Beyond MIN_SPACING floating point numbers being to lose precision\n    // such that we can't do the math necessary to generate ticks\n\n    if (spacing < MIN_SPACING && isNullOrUndef(min) && isNullOrUndef(max)) {\n      return [rmin, rmax];\n    }\n\n    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n\n    if (numSpaces > maxNumSpaces) {\n      // If the calculated num of spaces exceeds maxNumSpaces, recalculate it\n      spacing = helpers$1.niceNum(numSpaces * spacing / maxNumSpaces / unit) * unit;\n    }\n\n    if (stepSize || isNullOrUndef(precision)) {\n      // If a precision is not specified, calculate factor based on spacing\n      factor = Math.pow(10, helpers$1._decimalPlaces(spacing));\n    } else {\n      // If the user specified a precision, round to that number of decimal places\n      factor = Math.pow(10, precision);\n      spacing = Math.ceil(spacing * factor) / factor;\n    }\n\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing; // If min, max and stepSize is set and they make an evenly spaced scale use it.\n\n    if (stepSize) {\n      // If very close to our whole number, use it.\n      if (!isNullOrUndef(min) && helpers$1.almostWhole(min / spacing, spacing / 1000)) {\n        niceMin = min;\n      }\n\n      if (!isNullOrUndef(max) && helpers$1.almostWhole(max / spacing, spacing / 1000)) {\n        niceMax = max;\n      }\n    }\n\n    numSpaces = (niceMax - niceMin) / spacing; // If very close to our rounded value, use it.\n\n    if (helpers$1.almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n\n    niceMin = Math.round(niceMin * factor) / factor;\n    niceMax = Math.round(niceMax * factor) / factor;\n    ticks.push(isNullOrUndef(min) ? niceMin : min);\n\n    for (var j = 1; j < numSpaces; ++j) {\n      ticks.push(Math.round((niceMin + j * spacing) * factor) / factor);\n    }\n\n    ticks.push(isNullOrUndef(max) ? niceMax : max);\n    return ticks;\n  }\n\n  var scale_linearbase = core_scale.extend({\n    getRightValue: function getRightValue(value) {\n      if (typeof value === 'string') {\n        return +value;\n      }\n\n      return core_scale.prototype.getRightValue.call(this, value);\n    },\n    handleTickRangeOptions: function handleTickRangeOptions() {\n      var me = this;\n      var opts = me.options;\n      var tickOpts = opts.ticks; // If we are forcing it to begin at 0, but 0 will already be rendered on the chart,\n      // do nothing since that would make the chart weird. If the user really wants a weird chart\n      // axis, they can manually override it\n\n      if (tickOpts.beginAtZero) {\n        var minSign = helpers$1.sign(me.min);\n        var maxSign = helpers$1.sign(me.max);\n\n        if (minSign < 0 && maxSign < 0) {\n          // move the top up to 0\n          me.max = 0;\n        } else if (minSign > 0 && maxSign > 0) {\n          // move the bottom down to 0\n          me.min = 0;\n        }\n      }\n\n      var setMin = tickOpts.min !== undefined || tickOpts.suggestedMin !== undefined;\n      var setMax = tickOpts.max !== undefined || tickOpts.suggestedMax !== undefined;\n\n      if (tickOpts.min !== undefined) {\n        me.min = tickOpts.min;\n      } else if (tickOpts.suggestedMin !== undefined) {\n        if (me.min === null) {\n          me.min = tickOpts.suggestedMin;\n        } else {\n          me.min = Math.min(me.min, tickOpts.suggestedMin);\n        }\n      }\n\n      if (tickOpts.max !== undefined) {\n        me.max = tickOpts.max;\n      } else if (tickOpts.suggestedMax !== undefined) {\n        if (me.max === null) {\n          me.max = tickOpts.suggestedMax;\n        } else {\n          me.max = Math.max(me.max, tickOpts.suggestedMax);\n        }\n      }\n\n      if (setMin !== setMax) {\n        // We set the min or the max but not both.\n        // So ensure that our range is good\n        // Inverted or 0 length range can happen when\n        // ticks.min is set, and no datasets are visible\n        if (me.min >= me.max) {\n          if (setMin) {\n            me.max = me.min + 1;\n          } else {\n            me.min = me.max - 1;\n          }\n        }\n      }\n\n      if (me.min === me.max) {\n        me.max++;\n\n        if (!tickOpts.beginAtZero) {\n          me.min--;\n        }\n      }\n    },\n    getTickLimit: function getTickLimit() {\n      var me = this;\n      var tickOpts = me.options.ticks;\n      var stepSize = tickOpts.stepSize;\n      var maxTicksLimit = tickOpts.maxTicksLimit;\n      var maxTicks;\n\n      if (stepSize) {\n        maxTicks = Math.ceil(me.max / stepSize) - Math.floor(me.min / stepSize) + 1;\n      } else {\n        maxTicks = me._computeTickLimit();\n        maxTicksLimit = maxTicksLimit || 11;\n      }\n\n      if (maxTicksLimit) {\n        maxTicks = Math.min(maxTicksLimit, maxTicks);\n      }\n\n      return maxTicks;\n    },\n    _computeTickLimit: function _computeTickLimit() {\n      return Number.POSITIVE_INFINITY;\n    },\n    handleDirectionalChanges: noop,\n    buildTicks: function buildTicks() {\n      var me = this;\n      var opts = me.options;\n      var tickOpts = opts.ticks; // Figure out what the max number of ticks we can support it is based on the size of\n      // the axis area. For now, we say that the minimum tick spacing in pixels must be 40\n      // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on\n      // the graph. Make sure we always have at least 2 ticks\n\n      var maxTicks = me.getTickLimit();\n      maxTicks = Math.max(2, maxTicks);\n      var numericGeneratorOptions = {\n        maxTicks: maxTicks,\n        min: tickOpts.min,\n        max: tickOpts.max,\n        precision: tickOpts.precision,\n        stepSize: helpers$1.valueOrDefault(tickOpts.fixedStepSize, tickOpts.stepSize)\n      };\n      var ticks = me.ticks = generateTicks(numericGeneratorOptions, me);\n      me.handleDirectionalChanges(); // At this point, we need to update our max and min given the tick values since we have expanded the\n      // range of the scale\n\n      me.max = helpers$1.max(ticks);\n      me.min = helpers$1.min(ticks);\n\n      if (tickOpts.reverse) {\n        ticks.reverse();\n        me.start = me.max;\n        me.end = me.min;\n      } else {\n        me.start = me.min;\n        me.end = me.max;\n      }\n    },\n    convertTicksToLabels: function convertTicksToLabels() {\n      var me = this;\n      me.ticksAsNumbers = me.ticks.slice();\n      me.zeroLineIndex = me.ticks.indexOf(0);\n      core_scale.prototype.convertTicksToLabels.call(me);\n    }\n  });\n  var defaultConfig$1 = {\n    position: 'left',\n    ticks: {\n      callback: core_ticks.formatters.linear\n    }\n  };\n  var scale_linear = scale_linearbase.extend({\n    determineDataLimits: function determineDataLimits() {\n      var me = this;\n      var opts = me.options;\n      var chart = me.chart;\n      var data = chart.data;\n      var datasets = data.datasets;\n      var isHorizontal = me.isHorizontal();\n      var DEFAULT_MIN = 0;\n      var DEFAULT_MAX = 1;\n\n      function IDMatches(meta) {\n        return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;\n      } // First Calculate the range\n\n\n      me.min = null;\n      me.max = null;\n      var hasStacks = opts.stacked;\n\n      if (hasStacks === undefined) {\n        helpers$1.each(datasets, function (dataset, datasetIndex) {\n          if (hasStacks) {\n            return;\n          }\n\n          var meta = chart.getDatasetMeta(datasetIndex);\n\n          if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) && meta.stack !== undefined) {\n            hasStacks = true;\n          }\n        });\n      }\n\n      if (opts.stacked || hasStacks) {\n        var valuesPerStack = {};\n        helpers$1.each(datasets, function (dataset, datasetIndex) {\n          var meta = chart.getDatasetMeta(datasetIndex);\n          var key = [meta.type, // we have a separate stack for stack=undefined datasets when the opts.stacked is undefined\n          opts.stacked === undefined && meta.stack === undefined ? datasetIndex : '', meta.stack].join('.');\n\n          if (valuesPerStack[key] === undefined) {\n            valuesPerStack[key] = {\n              positiveValues: [],\n              negativeValues: []\n            };\n          } // Store these per type\n\n\n          var positiveValues = valuesPerStack[key].positiveValues;\n          var negativeValues = valuesPerStack[key].negativeValues;\n\n          if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {\n            helpers$1.each(dataset.data, function (rawValue, index) {\n              var value = +me.getRightValue(rawValue);\n\n              if (isNaN(value) || meta.data[index].hidden) {\n                return;\n              }\n\n              positiveValues[index] = positiveValues[index] || 0;\n              negativeValues[index] = negativeValues[index] || 0;\n\n              if (opts.relativePoints) {\n                positiveValues[index] = 100;\n              } else if (value < 0) {\n                negativeValues[index] += value;\n              } else {\n                positiveValues[index] += value;\n              }\n            });\n          }\n        });\n        helpers$1.each(valuesPerStack, function (valuesForType) {\n          var values = valuesForType.positiveValues.concat(valuesForType.negativeValues);\n          var minVal = helpers$1.min(values);\n          var maxVal = helpers$1.max(values);\n          me.min = me.min === null ? minVal : Math.min(me.min, minVal);\n          me.max = me.max === null ? maxVal : Math.max(me.max, maxVal);\n        });\n      } else {\n        helpers$1.each(datasets, function (dataset, datasetIndex) {\n          var meta = chart.getDatasetMeta(datasetIndex);\n\n          if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {\n            helpers$1.each(dataset.data, function (rawValue, index) {\n              var value = +me.getRightValue(rawValue);\n\n              if (isNaN(value) || meta.data[index].hidden) {\n                return;\n              }\n\n              if (me.min === null) {\n                me.min = value;\n              } else if (value < me.min) {\n                me.min = value;\n              }\n\n              if (me.max === null) {\n                me.max = value;\n              } else if (value > me.max) {\n                me.max = value;\n              }\n            });\n          }\n        });\n      }\n\n      me.min = isFinite(me.min) && !isNaN(me.min) ? me.min : DEFAULT_MIN;\n      me.max = isFinite(me.max) && !isNaN(me.max) ? me.max : DEFAULT_MAX; // Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero\n\n      this.handleTickRangeOptions();\n    },\n    // Returns the maximum number of ticks based on the scale dimension\n    _computeTickLimit: function _computeTickLimit() {\n      var me = this;\n      var tickFont;\n\n      if (me.isHorizontal()) {\n        return Math.ceil(me.width / 40);\n      }\n\n      tickFont = helpers$1.options._parseFont(me.options.ticks);\n      return Math.ceil(me.height / tickFont.lineHeight);\n    },\n    // Called after the ticks are built. We need\n    handleDirectionalChanges: function handleDirectionalChanges() {\n      if (!this.isHorizontal()) {\n        // We are in a vertical orientation. The top value is the highest. So reverse the array\n        this.ticks.reverse();\n      }\n    },\n    getLabelForIndex: function getLabelForIndex(index, datasetIndex) {\n      return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);\n    },\n    // Utils\n    getPixelForValue: function getPixelForValue(value) {\n      // This must be called after fit has been run so that\n      // this.left, this.top, this.right, and this.bottom have been defined\n      var me = this;\n      var start = me.start;\n      var rightValue = +me.getRightValue(value);\n      var pixel;\n      var range = me.end - start;\n\n      if (me.isHorizontal()) {\n        pixel = me.left + me.width / range * (rightValue - start);\n      } else {\n        pixel = me.bottom - me.height / range * (rightValue - start);\n      }\n\n      return pixel;\n    },\n    getValueForPixel: function getValueForPixel(pixel) {\n      var me = this;\n      var isHorizontal = me.isHorizontal();\n      var innerDimension = isHorizontal ? me.width : me.height;\n      var offset = (isHorizontal ? pixel - me.left : me.bottom - pixel) / innerDimension;\n      return me.start + (me.end - me.start) * offset;\n    },\n    getPixelForTick: function getPixelForTick(index) {\n      return this.getPixelForValue(this.ticksAsNumbers[index]);\n    }\n  }); // INTERNAL: static default options, registered in src/index.js\n\n  var _defaults$1 = defaultConfig$1;\n  scale_linear._defaults = _defaults$1;\n  var valueOrDefault$a = helpers$1.valueOrDefault;\n  /**\n   * Generate a set of logarithmic ticks\n   * @param generationOptions the options used to generate the ticks\n   * @param dataRange the range of the data\n   * @returns {number[]} array of tick values\n   */\n\n  function generateTicks$1(generationOptions, dataRange) {\n    var ticks = [];\n    var tickVal = valueOrDefault$a(generationOptions.min, Math.pow(10, Math.floor(helpers$1.log10(dataRange.min))));\n    var endExp = Math.floor(helpers$1.log10(dataRange.max));\n    var endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));\n    var exp, significand;\n\n    if (tickVal === 0) {\n      exp = Math.floor(helpers$1.log10(dataRange.minNotZero));\n      significand = Math.floor(dataRange.minNotZero / Math.pow(10, exp));\n      ticks.push(tickVal);\n      tickVal = significand * Math.pow(10, exp);\n    } else {\n      exp = Math.floor(helpers$1.log10(tickVal));\n      significand = Math.floor(tickVal / Math.pow(10, exp));\n    }\n\n    var precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n\n    do {\n      ticks.push(tickVal);\n      ++significand;\n\n      if (significand === 10) {\n        significand = 1;\n        ++exp;\n        precision = exp >= 0 ? 1 : precision;\n      }\n\n      tickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;\n    } while (exp < endExp || exp === endExp && significand < endSignificand);\n\n    var lastTick = valueOrDefault$a(generationOptions.max, tickVal);\n    ticks.push(lastTick);\n    return ticks;\n  }\n\n  var defaultConfig$2 = {\n    position: 'left',\n    // label settings\n    ticks: {\n      callback: core_ticks.formatters.logarithmic\n    }\n  }; // TODO(v3): change this to positiveOrDefault\n\n  function nonNegativeOrDefault(value, defaultValue) {\n    return helpers$1.isFinite(value) && value >= 0 ? value : defaultValue;\n  }\n\n  var scale_logarithmic = core_scale.extend({\n    determineDataLimits: function determineDataLimits() {\n      var me = this;\n      var opts = me.options;\n      var chart = me.chart;\n      var data = chart.data;\n      var datasets = data.datasets;\n      var isHorizontal = me.isHorizontal();\n\n      function IDMatches(meta) {\n        return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;\n      } // Calculate Range\n\n\n      me.min = null;\n      me.max = null;\n      me.minNotZero = null;\n      var hasStacks = opts.stacked;\n\n      if (hasStacks === undefined) {\n        helpers$1.each(datasets, function (dataset, datasetIndex) {\n          if (hasStacks) {\n            return;\n          }\n\n          var meta = chart.getDatasetMeta(datasetIndex);\n\n          if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) && meta.stack !== undefined) {\n            hasStacks = true;\n          }\n        });\n      }\n\n      if (opts.stacked || hasStacks) {\n        var valuesPerStack = {};\n        helpers$1.each(datasets, function (dataset, datasetIndex) {\n          var meta = chart.getDatasetMeta(datasetIndex);\n          var key = [meta.type, // we have a separate stack for stack=undefined datasets when the opts.stacked is undefined\n          opts.stacked === undefined && meta.stack === undefined ? datasetIndex : '', meta.stack].join('.');\n\n          if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {\n            if (valuesPerStack[key] === undefined) {\n              valuesPerStack[key] = [];\n            }\n\n            helpers$1.each(dataset.data, function (rawValue, index) {\n              var values = valuesPerStack[key];\n              var value = +me.getRightValue(rawValue); // invalid, hidden and negative values are ignored\n\n              if (isNaN(value) || meta.data[index].hidden || value < 0) {\n                return;\n              }\n\n              values[index] = values[index] || 0;\n              values[index] += value;\n            });\n          }\n        });\n        helpers$1.each(valuesPerStack, function (valuesForType) {\n          if (valuesForType.length > 0) {\n            var minVal = helpers$1.min(valuesForType);\n            var maxVal = helpers$1.max(valuesForType);\n            me.min = me.min === null ? minVal : Math.min(me.min, minVal);\n            me.max = me.max === null ? maxVal : Math.max(me.max, maxVal);\n          }\n        });\n      } else {\n        helpers$1.each(datasets, function (dataset, datasetIndex) {\n          var meta = chart.getDatasetMeta(datasetIndex);\n\n          if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {\n            helpers$1.each(dataset.data, function (rawValue, index) {\n              var value = +me.getRightValue(rawValue); // invalid, hidden and negative values are ignored\n\n              if (isNaN(value) || meta.data[index].hidden || value < 0) {\n                return;\n              }\n\n              if (me.min === null) {\n                me.min = value;\n              } else if (value < me.min) {\n                me.min = value;\n              }\n\n              if (me.max === null) {\n                me.max = value;\n              } else if (value > me.max) {\n                me.max = value;\n              }\n\n              if (value !== 0 && (me.minNotZero === null || value < me.minNotZero)) {\n                me.minNotZero = value;\n              }\n            });\n          }\n        });\n      } // Common base implementation to handle ticks.min, ticks.max\n\n\n      this.handleTickRangeOptions();\n    },\n    handleTickRangeOptions: function handleTickRangeOptions() {\n      var me = this;\n      var tickOpts = me.options.ticks;\n      var DEFAULT_MIN = 1;\n      var DEFAULT_MAX = 10;\n      me.min = nonNegativeOrDefault(tickOpts.min, me.min);\n      me.max = nonNegativeOrDefault(tickOpts.max, me.max);\n\n      if (me.min === me.max) {\n        if (me.min !== 0 && me.min !== null) {\n          me.min = Math.pow(10, Math.floor(helpers$1.log10(me.min)) - 1);\n          me.max = Math.pow(10, Math.floor(helpers$1.log10(me.max)) + 1);\n        } else {\n          me.min = DEFAULT_MIN;\n          me.max = DEFAULT_MAX;\n        }\n      }\n\n      if (me.min === null) {\n        me.min = Math.pow(10, Math.floor(helpers$1.log10(me.max)) - 1);\n      }\n\n      if (me.max === null) {\n        me.max = me.min !== 0 ? Math.pow(10, Math.floor(helpers$1.log10(me.min)) + 1) : DEFAULT_MAX;\n      }\n\n      if (me.minNotZero === null) {\n        if (me.min > 0) {\n          me.minNotZero = me.min;\n        } else if (me.max < 1) {\n          me.minNotZero = Math.pow(10, Math.floor(helpers$1.log10(me.max)));\n        } else {\n          me.minNotZero = DEFAULT_MIN;\n        }\n      }\n    },\n    buildTicks: function buildTicks() {\n      var me = this;\n      var tickOpts = me.options.ticks;\n      var reverse = !me.isHorizontal();\n      var generationOptions = {\n        min: nonNegativeOrDefault(tickOpts.min),\n        max: nonNegativeOrDefault(tickOpts.max)\n      };\n      var ticks = me.ticks = generateTicks$1(generationOptions, me); // At this point, we need to update our max and min given the tick values since we have expanded the\n      // range of the scale\n\n      me.max = helpers$1.max(ticks);\n      me.min = helpers$1.min(ticks);\n\n      if (tickOpts.reverse) {\n        reverse = !reverse;\n        me.start = me.max;\n        me.end = me.min;\n      } else {\n        me.start = me.min;\n        me.end = me.max;\n      }\n\n      if (reverse) {\n        ticks.reverse();\n      }\n    },\n    convertTicksToLabels: function convertTicksToLabels() {\n      this.tickValues = this.ticks.slice();\n      core_scale.prototype.convertTicksToLabels.call(this);\n    },\n    // Get the correct tooltip label\n    getLabelForIndex: function getLabelForIndex(index, datasetIndex) {\n      return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);\n    },\n    getPixelForTick: function getPixelForTick(index) {\n      return this.getPixelForValue(this.tickValues[index]);\n    },\n\n    /**\n     * Returns the value of the first tick.\n     * @param {number} value - The minimum not zero value.\n     * @return {number} The first tick value.\n     * @private\n     */\n    _getFirstTickValue: function _getFirstTickValue(value) {\n      var exp = Math.floor(helpers$1.log10(value));\n      var significand = Math.floor(value / Math.pow(10, exp));\n      return significand * Math.pow(10, exp);\n    },\n    getPixelForValue: function getPixelForValue(value) {\n      var me = this;\n      var tickOpts = me.options.ticks;\n      var reverse = tickOpts.reverse;\n      var log10 = helpers$1.log10;\n\n      var firstTickValue = me._getFirstTickValue(me.minNotZero);\n\n      var offset = 0;\n      var innerDimension, pixel, start, end, sign;\n      value = +me.getRightValue(value);\n\n      if (reverse) {\n        start = me.end;\n        end = me.start;\n        sign = -1;\n      } else {\n        start = me.start;\n        end = me.end;\n        sign = 1;\n      }\n\n      if (me.isHorizontal()) {\n        innerDimension = me.width;\n        pixel = reverse ? me.right : me.left;\n      } else {\n        innerDimension = me.height;\n        sign *= -1; // invert, since the upper-left corner of the canvas is at pixel (0, 0)\n\n        pixel = reverse ? me.top : me.bottom;\n      }\n\n      if (value !== start) {\n        if (start === 0) {\n          // include zero tick\n          offset = valueOrDefault$a(tickOpts.fontSize, core_defaults.global.defaultFontSize);\n          innerDimension -= offset;\n          start = firstTickValue;\n        }\n\n        if (value !== 0) {\n          offset += innerDimension / (log10(end) - log10(start)) * (log10(value) - log10(start));\n        }\n\n        pixel += sign * offset;\n      }\n\n      return pixel;\n    },\n    getValueForPixel: function getValueForPixel(pixel) {\n      var me = this;\n      var tickOpts = me.options.ticks;\n      var reverse = tickOpts.reverse;\n      var log10 = helpers$1.log10;\n\n      var firstTickValue = me._getFirstTickValue(me.minNotZero);\n\n      var innerDimension, start, end, value;\n\n      if (reverse) {\n        start = me.end;\n        end = me.start;\n      } else {\n        start = me.start;\n        end = me.end;\n      }\n\n      if (me.isHorizontal()) {\n        innerDimension = me.width;\n        value = reverse ? me.right - pixel : pixel - me.left;\n      } else {\n        innerDimension = me.height;\n        value = reverse ? pixel - me.top : me.bottom - pixel;\n      }\n\n      if (value !== start) {\n        if (start === 0) {\n          // include zero tick\n          var offset = valueOrDefault$a(tickOpts.fontSize, core_defaults.global.defaultFontSize);\n          value -= offset;\n          innerDimension -= offset;\n          start = firstTickValue;\n        }\n\n        value *= log10(end) - log10(start);\n        value /= innerDimension;\n        value = Math.pow(10, log10(start) + value);\n      }\n\n      return value;\n    }\n  }); // INTERNAL: static default options, registered in src/index.js\n\n  var _defaults$2 = defaultConfig$2;\n  scale_logarithmic._defaults = _defaults$2;\n  var valueOrDefault$b = helpers$1.valueOrDefault;\n  var valueAtIndexOrDefault$1 = helpers$1.valueAtIndexOrDefault;\n  var resolve$7 = helpers$1.options.resolve;\n  var defaultConfig$3 = {\n    display: true,\n    // Boolean - Whether to animate scaling the chart from the centre\n    animate: true,\n    position: 'chartArea',\n    angleLines: {\n      display: true,\n      color: 'rgba(0, 0, 0, 0.1)',\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n    gridLines: {\n      circular: false\n    },\n    // label settings\n    ticks: {\n      // Boolean - Show a backdrop to the scale label\n      showLabelBackdrop: true,\n      // String - The colour of the label backdrop\n      backdropColor: 'rgba(255,255,255,0.75)',\n      // Number - The backdrop padding above & below the label in pixels\n      backdropPaddingY: 2,\n      // Number - The backdrop padding to the side of the label in pixels\n      backdropPaddingX: 2,\n      callback: core_ticks.formatters.linear\n    },\n    pointLabels: {\n      // Boolean - if true, show point labels\n      display: true,\n      // Number - Point label font size in pixels\n      fontSize: 10,\n      // Function - Used to convert point labels\n      callback: function callback(label) {\n        return label;\n      }\n    }\n  };\n\n  function getValueCount(scale) {\n    var opts = scale.options;\n    return opts.angleLines.display || opts.pointLabels.display ? scale.chart.data.labels.length : 0;\n  }\n\n  function getTickBackdropHeight(opts) {\n    var tickOpts = opts.ticks;\n\n    if (tickOpts.display && opts.display) {\n      return valueOrDefault$b(tickOpts.fontSize, core_defaults.global.defaultFontSize) + tickOpts.backdropPaddingY * 2;\n    }\n\n    return 0;\n  }\n\n  function measureLabelSize(ctx, lineHeight, label) {\n    if (helpers$1.isArray(label)) {\n      return {\n        w: helpers$1.longestText(ctx, ctx.font, label),\n        h: label.length * lineHeight\n      };\n    }\n\n    return {\n      w: ctx.measureText(label).width,\n      h: lineHeight\n    };\n  }\n\n  function determineLimits(angle, pos, size, min, max) {\n    if (angle === min || angle === max) {\n      return {\n        start: pos - size / 2,\n        end: pos + size / 2\n      };\n    } else if (angle < min || angle > max) {\n      return {\n        start: pos - size,\n        end: pos\n      };\n    }\n\n    return {\n      start: pos,\n      end: pos + size\n    };\n  }\n  /**\n   * Helper function to fit a radial linear scale with point labels\n   */\n\n\n  function fitWithPointLabels(scale) {\n    // Right, this is really confusing and there is a lot of maths going on here\n    // The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\n    //\n    // Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\n    //\n    // Solution:\n    //\n    // We assume the radius of the polygon is half the size of the canvas at first\n    // at each index we check if the text overlaps.\n    //\n    // Where it does, we store that angle and that index.\n    //\n    // After finding the largest index and angle we calculate how much we need to remove\n    // from the shape radius to move the point inwards by that x.\n    //\n    // We average the left and right distances to get the maximum shape radius that can fit in the box\n    // along with labels.\n    //\n    // Once we have that, we can find the centre point for the chart, by taking the x text protrusion\n    // on each side, removing that from the size, halving it and adding the left x protrusion width.\n    //\n    // This will mean we have a shape fitted to the canvas, as large as it can be with the labels\n    // and position it in the most space efficient manner\n    //\n    // https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\n    var plFont = helpers$1.options._parseFont(scale.options.pointLabels); // Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\n    // Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\n\n\n    var furthestLimits = {\n      l: 0,\n      r: scale.width,\n      t: 0,\n      b: scale.height - scale.paddingTop\n    };\n    var furthestAngles = {};\n    var i, textSize, pointPosition;\n    scale.ctx.font = plFont.string;\n    scale._pointLabelSizes = [];\n    var valueCount = getValueCount(scale);\n\n    for (i = 0; i < valueCount; i++) {\n      pointPosition = scale.getPointPosition(i, scale.drawingArea + 5);\n      textSize = measureLabelSize(scale.ctx, plFont.lineHeight, scale.pointLabels[i] || '');\n      scale._pointLabelSizes[i] = textSize; // Add quarter circle to make degree 0 mean top of circle\n\n      var angleRadians = scale.getIndexAngle(i);\n      var angle = helpers$1.toDegrees(angleRadians) % 360;\n      var hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n      var vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n\n      if (hLimits.start < furthestLimits.l) {\n        furthestLimits.l = hLimits.start;\n        furthestAngles.l = angleRadians;\n      }\n\n      if (hLimits.end > furthestLimits.r) {\n        furthestLimits.r = hLimits.end;\n        furthestAngles.r = angleRadians;\n      }\n\n      if (vLimits.start < furthestLimits.t) {\n        furthestLimits.t = vLimits.start;\n        furthestAngles.t = angleRadians;\n      }\n\n      if (vLimits.end > furthestLimits.b) {\n        furthestLimits.b = vLimits.end;\n        furthestAngles.b = angleRadians;\n      }\n    }\n\n    scale.setReductions(scale.drawingArea, furthestLimits, furthestAngles);\n  }\n\n  function getTextAlignForAngle(angle) {\n    if (angle === 0 || angle === 180) {\n      return 'center';\n    } else if (angle < 180) {\n      return 'left';\n    }\n\n    return 'right';\n  }\n\n  function fillText(ctx, text, position, lineHeight) {\n    var y = position.y + lineHeight / 2;\n    var i, ilen;\n\n    if (helpers$1.isArray(text)) {\n      for (i = 0, ilen = text.length; i < ilen; ++i) {\n        ctx.fillText(text[i], position.x, y);\n        y += lineHeight;\n      }\n    } else {\n      ctx.fillText(text, position.x, y);\n    }\n  }\n\n  function adjustPointPositionForLabelHeight(angle, textSize, position) {\n    if (angle === 90 || angle === 270) {\n      position.y -= textSize.h / 2;\n    } else if (angle > 270 || angle < 90) {\n      position.y -= textSize.h;\n    }\n  }\n\n  function drawPointLabels(scale) {\n    var ctx = scale.ctx;\n    var opts = scale.options;\n    var angleLineOpts = opts.angleLines;\n    var gridLineOpts = opts.gridLines;\n    var pointLabelOpts = opts.pointLabels;\n    var lineWidth = valueOrDefault$b(angleLineOpts.lineWidth, gridLineOpts.lineWidth);\n    var lineColor = valueOrDefault$b(angleLineOpts.color, gridLineOpts.color);\n    var tickBackdropHeight = getTickBackdropHeight(opts);\n    ctx.save();\n    ctx.lineWidth = lineWidth;\n    ctx.strokeStyle = lineColor;\n\n    if (ctx.setLineDash) {\n      ctx.setLineDash(resolve$7([angleLineOpts.borderDash, gridLineOpts.borderDash, []]));\n      ctx.lineDashOffset = resolve$7([angleLineOpts.borderDashOffset, gridLineOpts.borderDashOffset, 0.0]);\n    }\n\n    var outerDistance = scale.getDistanceFromCenterForValue(opts.ticks.reverse ? scale.min : scale.max); // Point Label Font\n\n    var plFont = helpers$1.options._parseFont(pointLabelOpts);\n\n    ctx.font = plFont.string;\n    ctx.textBaseline = 'middle';\n\n    for (var i = getValueCount(scale) - 1; i >= 0; i--) {\n      if (angleLineOpts.display && lineWidth && lineColor) {\n        var outerPosition = scale.getPointPosition(i, outerDistance);\n        ctx.beginPath();\n        ctx.moveTo(scale.xCenter, scale.yCenter);\n        ctx.lineTo(outerPosition.x, outerPosition.y);\n        ctx.stroke();\n      }\n\n      if (pointLabelOpts.display) {\n        // Extra pixels out for some label spacing\n        var extra = i === 0 ? tickBackdropHeight / 2 : 0;\n        var pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + 5); // Keep this in loop since we may support array properties here\n\n        var pointLabelFontColor = valueAtIndexOrDefault$1(pointLabelOpts.fontColor, i, core_defaults.global.defaultFontColor);\n        ctx.fillStyle = pointLabelFontColor;\n        var angleRadians = scale.getIndexAngle(i);\n        var angle = helpers$1.toDegrees(angleRadians);\n        ctx.textAlign = getTextAlignForAngle(angle);\n        adjustPointPositionForLabelHeight(angle, scale._pointLabelSizes[i], pointLabelPosition);\n        fillText(ctx, scale.pointLabels[i] || '', pointLabelPosition, plFont.lineHeight);\n      }\n    }\n\n    ctx.restore();\n  }\n\n  function drawRadiusLine(scale, gridLineOpts, radius, index) {\n    var ctx = scale.ctx;\n    var circular = gridLineOpts.circular;\n    var valueCount = getValueCount(scale);\n    var lineColor = valueAtIndexOrDefault$1(gridLineOpts.color, index - 1);\n    var lineWidth = valueAtIndexOrDefault$1(gridLineOpts.lineWidth, index - 1);\n    var pointPosition;\n\n    if (!circular && !valueCount || !lineColor || !lineWidth) {\n      return;\n    }\n\n    ctx.save();\n    ctx.strokeStyle = lineColor;\n    ctx.lineWidth = lineWidth;\n\n    if (ctx.setLineDash) {\n      ctx.setLineDash(gridLineOpts.borderDash || []);\n      ctx.lineDashOffset = gridLineOpts.borderDashOffset || 0.0;\n    }\n\n    ctx.beginPath();\n\n    if (circular) {\n      // Draw circular arcs between the points\n      ctx.arc(scale.xCenter, scale.yCenter, radius, 0, Math.PI * 2);\n    } else {\n      // Draw straight lines connecting each index\n      pointPosition = scale.getPointPosition(0, radius);\n      ctx.moveTo(pointPosition.x, pointPosition.y);\n\n      for (var i = 1; i < valueCount; i++) {\n        pointPosition = scale.getPointPosition(i, radius);\n        ctx.lineTo(pointPosition.x, pointPosition.y);\n      }\n    }\n\n    ctx.closePath();\n    ctx.stroke();\n    ctx.restore();\n  }\n\n  function numberOrZero(param) {\n    return helpers$1.isNumber(param) ? param : 0;\n  }\n\n  var scale_radialLinear = scale_linearbase.extend({\n    setDimensions: function setDimensions() {\n      var me = this; // Set the unconstrained dimension before label rotation\n\n      me.width = me.maxWidth;\n      me.height = me.maxHeight;\n      me.paddingTop = getTickBackdropHeight(me.options) / 2;\n      me.xCenter = Math.floor(me.width / 2);\n      me.yCenter = Math.floor((me.height - me.paddingTop) / 2);\n      me.drawingArea = Math.min(me.height - me.paddingTop, me.width) / 2;\n    },\n    determineDataLimits: function determineDataLimits() {\n      var me = this;\n      var chart = me.chart;\n      var min = Number.POSITIVE_INFINITY;\n      var max = Number.NEGATIVE_INFINITY;\n      helpers$1.each(chart.data.datasets, function (dataset, datasetIndex) {\n        if (chart.isDatasetVisible(datasetIndex)) {\n          var meta = chart.getDatasetMeta(datasetIndex);\n          helpers$1.each(dataset.data, function (rawValue, index) {\n            var value = +me.getRightValue(rawValue);\n\n            if (isNaN(value) || meta.data[index].hidden) {\n              return;\n            }\n\n            min = Math.min(value, min);\n            max = Math.max(value, max);\n          });\n        }\n      });\n      me.min = min === Number.POSITIVE_INFINITY ? 0 : min;\n      me.max = max === Number.NEGATIVE_INFINITY ? 0 : max; // Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero\n\n      me.handleTickRangeOptions();\n    },\n    // Returns the maximum number of ticks based on the scale dimension\n    _computeTickLimit: function _computeTickLimit() {\n      return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n    },\n    convertTicksToLabels: function convertTicksToLabels() {\n      var me = this;\n      scale_linearbase.prototype.convertTicksToLabels.call(me); // Point labels\n\n      me.pointLabels = me.chart.data.labels.map(me.options.pointLabels.callback, me);\n    },\n    getLabelForIndex: function getLabelForIndex(index, datasetIndex) {\n      return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);\n    },\n    fit: function fit() {\n      var me = this;\n      var opts = me.options;\n\n      if (opts.display && opts.pointLabels.display) {\n        fitWithPointLabels(me);\n      } else {\n        me.setCenterPoint(0, 0, 0, 0);\n      }\n    },\n\n    /**\n     * Set radius reductions and determine new radius and center point\n     * @private\n     */\n    setReductions: function setReductions(largestPossibleRadius, furthestLimits, furthestAngles) {\n      var me = this;\n      var radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);\n      var radiusReductionRight = Math.max(furthestLimits.r - me.width, 0) / Math.sin(furthestAngles.r);\n      var radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);\n      var radiusReductionBottom = -Math.max(furthestLimits.b - (me.height - me.paddingTop), 0) / Math.cos(furthestAngles.b);\n      radiusReductionLeft = numberOrZero(radiusReductionLeft);\n      radiusReductionRight = numberOrZero(radiusReductionRight);\n      radiusReductionTop = numberOrZero(radiusReductionTop);\n      radiusReductionBottom = numberOrZero(radiusReductionBottom);\n      me.drawingArea = Math.min(Math.floor(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2), Math.floor(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2));\n      me.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);\n    },\n    setCenterPoint: function setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n      var me = this;\n      var maxRight = me.width - rightMovement - me.drawingArea;\n      var maxLeft = leftMovement + me.drawingArea;\n      var maxTop = topMovement + me.drawingArea;\n      var maxBottom = me.height - me.paddingTop - bottomMovement - me.drawingArea;\n      me.xCenter = Math.floor((maxLeft + maxRight) / 2 + me.left);\n      me.yCenter = Math.floor((maxTop + maxBottom) / 2 + me.top + me.paddingTop);\n    },\n    getIndexAngle: function getIndexAngle(index) {\n      var angleMultiplier = Math.PI * 2 / getValueCount(this);\n      var startAngle = this.chart.options && this.chart.options.startAngle ? this.chart.options.startAngle : 0;\n      var startAngleRadians = startAngle * Math.PI * 2 / 360; // Start from the top instead of right, so remove a quarter of the circle\n\n      return index * angleMultiplier + startAngleRadians;\n    },\n    getDistanceFromCenterForValue: function getDistanceFromCenterForValue(value) {\n      var me = this;\n\n      if (value === null) {\n        return 0; // null always in center\n      } // Take into account half font size + the yPadding of the top value\n\n\n      var scalingFactor = me.drawingArea / (me.max - me.min);\n\n      if (me.options.ticks.reverse) {\n        return (me.max - value) * scalingFactor;\n      }\n\n      return (value - me.min) * scalingFactor;\n    },\n    getPointPosition: function getPointPosition(index, distanceFromCenter) {\n      var me = this;\n      var thisAngle = me.getIndexAngle(index) - Math.PI / 2;\n      return {\n        x: Math.cos(thisAngle) * distanceFromCenter + me.xCenter,\n        y: Math.sin(thisAngle) * distanceFromCenter + me.yCenter\n      };\n    },\n    getPointPositionForValue: function getPointPositionForValue(index, value) {\n      return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n    },\n    getBasePosition: function getBasePosition() {\n      var me = this;\n      var min = me.min;\n      var max = me.max;\n      return me.getPointPositionForValue(0, me.beginAtZero ? 0 : min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0);\n    },\n    draw: function draw() {\n      var me = this;\n      var opts = me.options;\n      var gridLineOpts = opts.gridLines;\n      var tickOpts = opts.ticks;\n\n      if (opts.display) {\n        var ctx = me.ctx;\n        var startAngle = this.getIndexAngle(0);\n\n        var tickFont = helpers$1.options._parseFont(tickOpts);\n\n        if (opts.angleLines.display || opts.pointLabels.display) {\n          drawPointLabels(me);\n        }\n\n        helpers$1.each(me.ticks, function (label, index) {\n          // Don't draw a centre value (if it is minimum)\n          if (index > 0 || tickOpts.reverse) {\n            var yCenterOffset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]); // Draw circular lines around the scale\n\n            if (gridLineOpts.display && index !== 0) {\n              drawRadiusLine(me, gridLineOpts, yCenterOffset, index);\n            }\n\n            if (tickOpts.display) {\n              var tickFontColor = valueOrDefault$b(tickOpts.fontColor, core_defaults.global.defaultFontColor);\n              ctx.font = tickFont.string;\n              ctx.save();\n              ctx.translate(me.xCenter, me.yCenter);\n              ctx.rotate(startAngle);\n\n              if (tickOpts.showLabelBackdrop) {\n                var labelWidth = ctx.measureText(label).width;\n                ctx.fillStyle = tickOpts.backdropColor;\n                ctx.fillRect(-labelWidth / 2 - tickOpts.backdropPaddingX, -yCenterOffset - tickFont.size / 2 - tickOpts.backdropPaddingY, labelWidth + tickOpts.backdropPaddingX * 2, tickFont.size + tickOpts.backdropPaddingY * 2);\n              }\n\n              ctx.textAlign = 'center';\n              ctx.textBaseline = 'middle';\n              ctx.fillStyle = tickFontColor;\n              ctx.fillText(label, 0, -yCenterOffset);\n              ctx.restore();\n            }\n          }\n        });\n      }\n    }\n  }); // INTERNAL: static default options, registered in src/index.js\n\n  var _defaults$3 = defaultConfig$3;\n  scale_radialLinear._defaults = _defaults$3;\n  var valueOrDefault$c = helpers$1.valueOrDefault; // Integer constants are from the ES6 spec.\n\n  var MIN_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;\n  var MAX_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;\n  var INTERVALS = {\n    millisecond: {\n      common: true,\n      size: 1,\n      steps: [1, 2, 5, 10, 20, 50, 100, 250, 500]\n    },\n    second: {\n      common: true,\n      size: 1000,\n      steps: [1, 2, 5, 10, 15, 30]\n    },\n    minute: {\n      common: true,\n      size: 60000,\n      steps: [1, 2, 5, 10, 15, 30]\n    },\n    hour: {\n      common: true,\n      size: 3600000,\n      steps: [1, 2, 3, 6, 12]\n    },\n    day: {\n      common: true,\n      size: 86400000,\n      steps: [1, 2, 5]\n    },\n    week: {\n      common: false,\n      size: 604800000,\n      steps: [1, 2, 3, 4]\n    },\n    month: {\n      common: true,\n      size: 2.628e9,\n      steps: [1, 2, 3]\n    },\n    quarter: {\n      common: false,\n      size: 7.884e9,\n      steps: [1, 2, 3, 4]\n    },\n    year: {\n      common: true,\n      size: 3.154e10\n    }\n  };\n  var UNITS = Object.keys(INTERVALS);\n\n  function sorter(a, b) {\n    return a - b;\n  }\n\n  function arrayUnique(items) {\n    var hash = {};\n    var out = [];\n    var i, ilen, item;\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n\n      if (!hash[item]) {\n        hash[item] = true;\n        out.push(item);\n      }\n    }\n\n    return out;\n  }\n  /**\n   * Returns an array of {time, pos} objects used to interpolate a specific `time` or position\n   * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is\n   * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other\n   * extremity (left + width or top + height). Note that it would be more optimized to directly\n   * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need\n   * to create the lookup table. The table ALWAYS contains at least two items: min and max.\n   *\n   * @param {number[]} timestamps - timestamps sorted from lowest to highest.\n   * @param {string} distribution - If 'linear', timestamps will be spread linearly along the min\n   * and max range, so basically, the table will contains only two items: {min, 0} and {max, 1}.\n   * If 'series', timestamps will be positioned at the same distance from each other. In this\n   * case, only timestamps that break the time linearity are registered, meaning that in the\n   * best case, all timestamps are linear, the table contains only min and max.\n   */\n\n\n  function buildLookupTable(timestamps, min, max, distribution) {\n    if (distribution === 'linear' || !timestamps.length) {\n      return [{\n        time: min,\n        pos: 0\n      }, {\n        time: max,\n        pos: 1\n      }];\n    }\n\n    var table = [];\n    var items = [min];\n    var i, ilen, prev, curr, next;\n\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n\n      if (curr > min && curr < max) {\n        items.push(curr);\n      }\n    }\n\n    items.push(max);\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i]; // only add points that breaks the scale linearity\n\n      if (prev === undefined || next === undefined || Math.round((next + prev) / 2) !== curr) {\n        table.push({\n          time: curr,\n          pos: i / (ilen - 1)\n        });\n      }\n    }\n\n    return table;\n  } // @see adapted from https://www.anujgakhar.com/2014/03/01/binary-search-in-javascript/\n\n\n  function lookup(table, key, value) {\n    var lo = 0;\n    var hi = table.length - 1;\n    var mid, i0, i1;\n\n    while (lo >= 0 && lo <= hi) {\n      mid = lo + hi >> 1;\n      i0 = table[mid - 1] || null;\n      i1 = table[mid];\n\n      if (!i0) {\n        // given value is outside table (before first item)\n        return {\n          lo: null,\n          hi: i1\n        };\n      } else if (i1[key] < value) {\n        lo = mid + 1;\n      } else if (i0[key] > value) {\n        hi = mid - 1;\n      } else {\n        return {\n          lo: i0,\n          hi: i1\n        };\n      }\n    } // given value is outside table (after last item)\n\n\n    return {\n      lo: i1,\n      hi: null\n    };\n  }\n  /**\n   * Linearly interpolates the given source `value` using the table items `skey` values and\n   * returns the associated `tkey` value. For example, interpolate(table, 'time', 42, 'pos')\n   * returns the position for a timestamp equal to 42. If value is out of bounds, values at\n   * index [0, 1] or [n - 1, n] are used for the interpolation.\n   */\n\n\n  function interpolate$1(table, skey, sval, tkey) {\n    var range = lookup(table, skey, sval); // Note: the lookup table ALWAYS contains at least 2 items (min and max)\n\n    var prev = !range.lo ? table[0] : !range.hi ? table[table.length - 2] : range.lo;\n    var next = !range.lo ? table[1] : !range.hi ? table[table.length - 1] : range.hi;\n    var span = next[skey] - prev[skey];\n    var ratio = span ? (sval - prev[skey]) / span : 0;\n    var offset = (next[tkey] - prev[tkey]) * ratio;\n    return prev[tkey] + offset;\n  }\n\n  function toTimestamp(scale, input) {\n    var adapter = scale._adapter;\n    var options = scale.options.time;\n    var parser = options.parser;\n    var format = parser || options.format;\n    var value = input;\n\n    if (typeof parser === 'function') {\n      value = parser(value);\n    } // Only parse if its not a timestamp already\n\n\n    if (!helpers$1.isFinite(value)) {\n      value = typeof format === 'string' ? adapter.parse(value, format) : adapter.parse(value);\n    }\n\n    if (value !== null) {\n      return +value;\n    } // Labels are in an incompatible format and no `parser` has been provided.\n    // The user might still use the deprecated `format` option for parsing.\n\n\n    if (!parser && typeof format === 'function') {\n      value = format(input); // `format` could return something else than a timestamp, if so, parse it\n\n      if (!helpers$1.isFinite(value)) {\n        value = adapter.parse(value);\n      }\n    }\n\n    return value;\n  }\n\n  function parse(scale, input) {\n    if (helpers$1.isNullOrUndef(input)) {\n      return null;\n    }\n\n    var options = scale.options.time;\n    var value = toTimestamp(scale, scale.getRightValue(input));\n\n    if (value === null) {\n      return value;\n    }\n\n    if (options.round) {\n      value = +scale._adapter.startOf(value, options.round);\n    }\n\n    return value;\n  }\n  /**\n   * Returns the number of unit to skip to be able to display up to `capacity` number of ticks\n   * in `unit` for the given `min` / `max` range and respecting the interval steps constraints.\n   */\n\n\n  function determineStepSize(min, max, unit, capacity) {\n    var range = max - min;\n    var interval = INTERVALS[unit];\n    var milliseconds = interval.size;\n    var steps = interval.steps;\n    var i, ilen, factor;\n\n    if (!steps) {\n      return Math.ceil(range / (capacity * milliseconds));\n    }\n\n    for (i = 0, ilen = steps.length; i < ilen; ++i) {\n      factor = steps[i];\n\n      if (Math.ceil(range / (milliseconds * factor)) <= capacity) {\n        break;\n      }\n    }\n\n    return factor;\n  }\n  /**\n   * Figures out what unit results in an appropriate number of auto-generated ticks\n   */\n\n\n  function determineUnitForAutoTicks(minUnit, min, max, capacity) {\n    var ilen = UNITS.length;\n    var i, interval, factor;\n\n    for (i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n      interval = INTERVALS[UNITS[i]];\n      factor = interval.steps ? interval.steps[interval.steps.length - 1] : MAX_INTEGER;\n\n      if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n        return UNITS[i];\n      }\n    }\n\n    return UNITS[ilen - 1];\n  }\n  /**\n   * Figures out what unit to format a set of ticks with\n   */\n\n\n  function determineUnitForFormatting(scale, ticks, minUnit, min, max) {\n    var ilen = UNITS.length;\n    var i, unit;\n\n    for (i = ilen - 1; i >= UNITS.indexOf(minUnit); i--) {\n      unit = UNITS[i];\n\n      if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= ticks.length) {\n        return unit;\n      }\n    }\n\n    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n  }\n\n  function determineMajorUnit(unit) {\n    for (var i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n      if (INTERVALS[UNITS[i]].common) {\n        return UNITS[i];\n      }\n    }\n  }\n  /**\n   * Generates a maximum of `capacity` timestamps between min and max, rounded to the\n   * `minor` unit, aligned on the `major` unit and using the given scale time `options`.\n   * Important: this method can return ticks outside the min and max range, it's the\n   * responsibility of the calling code to clamp values if needed.\n   */\n\n\n  function generate(scale, min, max, capacity) {\n    var adapter = scale._adapter;\n    var options = scale.options;\n    var timeOpts = options.time;\n    var minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, capacity);\n    var major = determineMajorUnit(minor);\n    var stepSize = valueOrDefault$c(timeOpts.stepSize, timeOpts.unitStepSize);\n    var weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    var majorTicksEnabled = options.ticks.major.enabled;\n    var interval = INTERVALS[minor];\n    var first = min;\n    var last = max;\n    var ticks = [];\n    var time;\n\n    if (!stepSize) {\n      stepSize = determineStepSize(min, max, minor, capacity);\n    } // For 'week' unit, handle the first day of week option\n\n\n    if (weekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n      last = +adapter.startOf(last, 'isoWeek', weekday);\n    } // Align first/last ticks on unit\n\n\n    first = +adapter.startOf(first, weekday ? 'day' : minor);\n    last = +adapter.startOf(last, weekday ? 'day' : minor); // Make sure that the last tick include max\n\n    if (last < max) {\n      last = +adapter.add(last, 1, minor);\n    }\n\n    time = first;\n\n    if (majorTicksEnabled && major && !weekday && !timeOpts.round) {\n      // Align the first tick on the previous `minor` unit aligned on the `major` unit:\n      // we first aligned time on the previous `major` unit then add the number of full\n      // stepSize there is between first and the previous major time.\n      time = +adapter.startOf(time, major);\n      time = +adapter.add(time, ~~((first - time) / (interval.size * stepSize)) * stepSize, minor);\n    }\n\n    for (; time < last; time = +adapter.add(time, stepSize, minor)) {\n      ticks.push(+time);\n    }\n\n    ticks.push(+time);\n    return ticks;\n  }\n  /**\n   * Returns the start and end offsets from edges in the form of {start, end}\n   * where each value is a relative width to the scale and ranges between 0 and 1.\n   * They add extra margins on the both sides by scaling down the original scale.\n   * Offsets are added when the `offset` option is true.\n   */\n\n\n  function computeOffsets(table, ticks, min, max, options) {\n    var start = 0;\n    var end = 0;\n    var first, last;\n\n    if (options.offset && ticks.length) {\n      if (!options.time.min) {\n        first = interpolate$1(table, 'time', ticks[0], 'pos');\n\n        if (ticks.length === 1) {\n          start = 1 - first;\n        } else {\n          start = (interpolate$1(table, 'time', ticks[1], 'pos') - first) / 2;\n        }\n      }\n\n      if (!options.time.max) {\n        last = interpolate$1(table, 'time', ticks[ticks.length - 1], 'pos');\n\n        if (ticks.length === 1) {\n          end = last;\n        } else {\n          end = (last - interpolate$1(table, 'time', ticks[ticks.length - 2], 'pos')) / 2;\n        }\n      }\n    }\n\n    return {\n      start: start,\n      end: end\n    };\n  }\n\n  function ticksFromTimestamps(scale, values, majorUnit) {\n    var ticks = [];\n    var i, ilen, value, major;\n\n    for (i = 0, ilen = values.length; i < ilen; ++i) {\n      value = values[i];\n      major = majorUnit ? value === +scale._adapter.startOf(value, majorUnit) : false;\n      ticks.push({\n        value: value,\n        major: major\n      });\n    }\n\n    return ticks;\n  }\n\n  var defaultConfig$4 = {\n    position: 'bottom',\n\n    /**\n     * Data distribution along the scale:\n     * - 'linear': data are spread according to their time (distances can vary),\n     * - 'series': data are spread at the same distance from each other.\n     * @see https://github.com/chartjs/Chart.js/pull/4507\n     * @since 2.7.0\n     */\n    distribution: 'linear',\n\n    /**\n     * Scale boundary strategy (bypassed by min/max time options)\n     * - `data`: make sure data are fully visible, ticks outside are removed\n     * - `ticks`: make sure ticks are fully visible, data outside are truncated\n     * @see https://github.com/chartjs/Chart.js/pull/4556\n     * @since 2.7.0\n     */\n    bounds: 'data',\n    adapters: {},\n    time: {\n      parser: false,\n      // false == a pattern string from https://momentjs.com/docs/#/parsing/string-format/ or a custom callback that converts its argument to a moment\n      format: false,\n      // DEPRECATED false == date objects, moment object, callback or a pattern string from https://momentjs.com/docs/#/parsing/string-format/\n      unit: false,\n      // false == automatic or override with week, month, year, etc.\n      round: false,\n      // none, or override with week, month, year, etc.\n      displayFormat: false,\n      // DEPRECATED\n      isoWeekday: false,\n      // override week start day - see https://momentjs.com/docs/#/get-set/iso-weekday/\n      minUnit: 'millisecond',\n      displayFormats: {}\n    },\n    ticks: {\n      autoSkip: false,\n\n      /**\n       * Ticks generation input values:\n       * - 'auto': generates \"optimal\" ticks based on scale size and time options.\n       * - 'data': generates ticks from data (including labels from data {t|x|y} objects).\n       * - 'labels': generates ticks from user given `data.labels` values ONLY.\n       * @see https://github.com/chartjs/Chart.js/pull/4507\n       * @since 2.7.0\n       */\n      source: 'auto',\n      major: {\n        enabled: false\n      }\n    }\n  };\n  var scale_time = core_scale.extend({\n    initialize: function initialize() {\n      this.mergeTicksOptions();\n      core_scale.prototype.initialize.call(this);\n    },\n    update: function update() {\n      var me = this;\n      var options = me.options;\n      var time = options.time || (options.time = {});\n      var adapter = me._adapter = new core_adapters._date(options.adapters.date); // DEPRECATIONS: output a message only one time per update\n\n      if (time.format) {\n        console.warn('options.time.format is deprecated and replaced by options.time.parser.');\n      } // Backward compatibility: before introducing adapter, `displayFormats` was\n      // supposed to contain *all* unit/string pairs but this can't be resolved\n      // when loading the scale (adapters are loaded afterward), so let's populate\n      // missing formats on update\n\n\n      helpers$1.mergeIf(time.displayFormats, adapter.formats());\n      return core_scale.prototype.update.apply(me, arguments);\n    },\n\n    /**\n     * Allows data to be referenced via 't' attribute\n     */\n    getRightValue: function getRightValue(rawValue) {\n      if (rawValue && rawValue.t !== undefined) {\n        rawValue = rawValue.t;\n      }\n\n      return core_scale.prototype.getRightValue.call(this, rawValue);\n    },\n    determineDataLimits: function determineDataLimits() {\n      var me = this;\n      var chart = me.chart;\n      var adapter = me._adapter;\n      var timeOpts = me.options.time;\n      var unit = timeOpts.unit || 'day';\n      var min = MAX_INTEGER;\n      var max = MIN_INTEGER;\n      var timestamps = [];\n      var datasets = [];\n      var labels = [];\n      var i, j, ilen, jlen, data, timestamp;\n      var dataLabels = chart.data.labels || []; // Convert labels to timestamps\n\n      for (i = 0, ilen = dataLabels.length; i < ilen; ++i) {\n        labels.push(parse(me, dataLabels[i]));\n      } // Convert data to timestamps\n\n\n      for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          data = chart.data.datasets[i].data; // Let's consider that all data have the same format.\n\n          if (helpers$1.isObject(data[0])) {\n            datasets[i] = [];\n\n            for (j = 0, jlen = data.length; j < jlen; ++j) {\n              timestamp = parse(me, data[j]);\n              timestamps.push(timestamp);\n              datasets[i][j] = timestamp;\n            }\n          } else {\n            for (j = 0, jlen = labels.length; j < jlen; ++j) {\n              timestamps.push(labels[j]);\n            }\n\n            datasets[i] = labels.slice(0);\n          }\n        } else {\n          datasets[i] = [];\n        }\n      }\n\n      if (labels.length) {\n        // Sort labels **after** data have been converted\n        labels = arrayUnique(labels).sort(sorter);\n        min = Math.min(min, labels[0]);\n        max = Math.max(max, labels[labels.length - 1]);\n      }\n\n      if (timestamps.length) {\n        timestamps = arrayUnique(timestamps).sort(sorter);\n        min = Math.min(min, timestamps[0]);\n        max = Math.max(max, timestamps[timestamps.length - 1]);\n      }\n\n      min = parse(me, timeOpts.min) || min;\n      max = parse(me, timeOpts.max) || max; // In case there is no valid min/max, set limits based on unit time option\n\n      min = min === MAX_INTEGER ? +adapter.startOf(Date.now(), unit) : min;\n      max = max === MIN_INTEGER ? +adapter.endOf(Date.now(), unit) + 1 : max; // Make sure that max is strictly higher than min (required by the lookup table)\n\n      me.min = Math.min(min, max);\n      me.max = Math.max(min + 1, max); // PRIVATE\n\n      me._horizontal = me.isHorizontal();\n      me._table = [];\n      me._timestamps = {\n        data: timestamps,\n        datasets: datasets,\n        labels: labels\n      };\n    },\n    buildTicks: function buildTicks() {\n      var me = this;\n      var min = me.min;\n      var max = me.max;\n      var options = me.options;\n      var timeOpts = options.time;\n      var timestamps = [];\n      var ticks = [];\n      var i, ilen, timestamp;\n\n      switch (options.ticks.source) {\n        case 'data':\n          timestamps = me._timestamps.data;\n          break;\n\n        case 'labels':\n          timestamps = me._timestamps.labels;\n          break;\n\n        case 'auto':\n        default:\n          timestamps = generate(me, min, max, me.getLabelCapacity(min), options);\n      }\n\n      if (options.bounds === 'ticks' && timestamps.length) {\n        min = timestamps[0];\n        max = timestamps[timestamps.length - 1];\n      } // Enforce limits with user min/max options\n\n\n      min = parse(me, timeOpts.min) || min;\n      max = parse(me, timeOpts.max) || max; // Remove ticks outside the min/max range\n\n      for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n        timestamp = timestamps[i];\n\n        if (timestamp >= min && timestamp <= max) {\n          ticks.push(timestamp);\n        }\n      }\n\n      me.min = min;\n      me.max = max; // PRIVATE\n\n      me._unit = timeOpts.unit || determineUnitForFormatting(me, ticks, timeOpts.minUnit, me.min, me.max);\n      me._majorUnit = determineMajorUnit(me._unit);\n      me._table = buildLookupTable(me._timestamps.data, min, max, options.distribution);\n      me._offsets = computeOffsets(me._table, ticks, min, max, options);\n\n      if (options.ticks.reverse) {\n        ticks.reverse();\n      }\n\n      return ticksFromTimestamps(me, ticks, me._majorUnit);\n    },\n    getLabelForIndex: function getLabelForIndex(index, datasetIndex) {\n      var me = this;\n      var adapter = me._adapter;\n      var data = me.chart.data;\n      var timeOpts = me.options.time;\n      var label = data.labels && index < data.labels.length ? data.labels[index] : '';\n      var value = data.datasets[datasetIndex].data[index];\n\n      if (helpers$1.isObject(value)) {\n        label = me.getRightValue(value);\n      }\n\n      if (timeOpts.tooltipFormat) {\n        return adapter.format(toTimestamp(me, label), timeOpts.tooltipFormat);\n      }\n\n      if (typeof label === 'string') {\n        return label;\n      }\n\n      return adapter.format(toTimestamp(me, label), timeOpts.displayFormats.datetime);\n    },\n\n    /**\n     * Function to format an individual tick mark\n     * @private\n     */\n    tickFormatFunction: function tickFormatFunction(time, index, ticks, format) {\n      var me = this;\n      var adapter = me._adapter;\n      var options = me.options;\n      var formats = options.time.displayFormats;\n      var minorFormat = formats[me._unit];\n      var majorUnit = me._majorUnit;\n      var majorFormat = formats[majorUnit];\n      var majorTime = +adapter.startOf(time, majorUnit);\n      var majorTickOpts = options.ticks.major;\n      var major = majorTickOpts.enabled && majorUnit && majorFormat && time === majorTime;\n      var label = adapter.format(time, format ? format : major ? majorFormat : minorFormat);\n      var tickOpts = major ? majorTickOpts : options.ticks.minor;\n      var formatter = valueOrDefault$c(tickOpts.callback, tickOpts.userCallback);\n      return formatter ? formatter(label, index, ticks) : label;\n    },\n    convertTicksToLabels: function convertTicksToLabels(ticks) {\n      var labels = [];\n      var i, ilen;\n\n      for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n        labels.push(this.tickFormatFunction(ticks[i].value, i, ticks));\n      }\n\n      return labels;\n    },\n\n    /**\n     * @private\n     */\n    getPixelForOffset: function getPixelForOffset(time) {\n      var me = this;\n      var isReverse = me.options.ticks.reverse;\n      var size = me._horizontal ? me.width : me.height;\n      var start = me._horizontal ? isReverse ? me.right : me.left : isReverse ? me.bottom : me.top;\n      var pos = interpolate$1(me._table, 'time', time, 'pos');\n      var offset = size * (me._offsets.start + pos) / (me._offsets.start + 1 + me._offsets.end);\n      return isReverse ? start - offset : start + offset;\n    },\n    getPixelForValue: function getPixelForValue(value, index, datasetIndex) {\n      var me = this;\n      var time = null;\n\n      if (index !== undefined && datasetIndex !== undefined) {\n        time = me._timestamps.datasets[datasetIndex][index];\n      }\n\n      if (time === null) {\n        time = parse(me, value);\n      }\n\n      if (time !== null) {\n        return me.getPixelForOffset(time);\n      }\n    },\n    getPixelForTick: function getPixelForTick(index) {\n      var ticks = this.getTicks();\n      return index >= 0 && index < ticks.length ? this.getPixelForOffset(ticks[index].value) : null;\n    },\n    getValueForPixel: function getValueForPixel(pixel) {\n      var me = this;\n      var size = me._horizontal ? me.width : me.height;\n      var start = me._horizontal ? me.left : me.top;\n      var pos = (size ? (pixel - start) / size : 0) * (me._offsets.start + 1 + me._offsets.start) - me._offsets.end;\n      var time = interpolate$1(me._table, 'pos', pos, 'time'); // DEPRECATION, we should return time directly\n\n      return me._adapter._create(time);\n    },\n\n    /**\n     * Crude approximation of what the label width might be\n     * @private\n     */\n    getLabelWidth: function getLabelWidth(label) {\n      var me = this;\n      var ticksOpts = me.options.ticks;\n      var tickLabelWidth = me.ctx.measureText(label).width;\n      var angle = helpers$1.toRadians(ticksOpts.maxRotation);\n      var cosRotation = Math.cos(angle);\n      var sinRotation = Math.sin(angle);\n      var tickFontSize = valueOrDefault$c(ticksOpts.fontSize, core_defaults.global.defaultFontSize);\n      return tickLabelWidth * cosRotation + tickFontSize * sinRotation;\n    },\n\n    /**\n     * @private\n     */\n    getLabelCapacity: function getLabelCapacity(exampleTime) {\n      var me = this; // pick the longest format (milliseconds) for guestimation\n\n      var format = me.options.time.displayFormats.millisecond;\n      var exampleLabel = me.tickFormatFunction(exampleTime, 0, [], format);\n      var tickLabelWidth = me.getLabelWidth(exampleLabel);\n      var innerWidth = me.isHorizontal() ? me.width : me.height;\n      var capacity = Math.floor(innerWidth / tickLabelWidth);\n      return capacity > 0 ? capacity : 1;\n    }\n  }); // INTERNAL: static default options, registered in src/index.js\n\n  var _defaults$4 = defaultConfig$4;\n  scale_time._defaults = _defaults$4;\n  var scales = {\n    category: scale_category,\n    linear: scale_linear,\n    logarithmic: scale_logarithmic,\n    radialLinear: scale_radialLinear,\n    time: scale_time\n  };\n  var FORMATS = {\n    datetime: 'MMM D, YYYY, h:mm:ss a',\n    millisecond: 'h:mm:ss.SSS a',\n    second: 'h:mm:ss a',\n    minute: 'h:mm a',\n    hour: 'hA',\n    day: 'MMM D',\n    week: 'll',\n    month: 'MMM YYYY',\n    quarter: '[Q]Q - YYYY',\n    year: 'YYYY'\n  };\n\n  core_adapters._date.override(typeof moment === 'function' ? {\n    _id: 'moment',\n    // DEBUG ONLY\n    formats: function formats() {\n      return FORMATS;\n    },\n    parse: function parse(value, format) {\n      if (typeof value === 'string' && typeof format === 'string') {\n        value = moment(value, format);\n      } else if (!(value instanceof moment)) {\n        value = moment(value);\n      }\n\n      return value.isValid() ? value.valueOf() : null;\n    },\n    format: function format(time, _format) {\n      return moment(time).format(_format);\n    },\n    add: function add(time, amount, unit) {\n      return moment(time).add(amount, unit).valueOf();\n    },\n    diff: function diff(max, min, unit) {\n      return moment.duration(moment(max).diff(moment(min))).as(unit);\n    },\n    startOf: function startOf(time, unit, weekday) {\n      time = moment(time);\n\n      if (unit === 'isoWeek') {\n        return time.isoWeekday(weekday).valueOf();\n      }\n\n      return time.startOf(unit).valueOf();\n    },\n    endOf: function endOf(time, unit) {\n      return moment(time).endOf(unit).valueOf();\n    },\n    // DEPRECATIONS\n\n    /**\n     * Provided for backward compatibility with scale.getValueForPixel().\n     * @deprecated since version 2.8.0\n     * @todo remove at version 3\n     * @private\n     */\n    _create: function _create(time) {\n      return moment(time);\n    }\n  } : {});\n\n  core_defaults._set('global', {\n    plugins: {\n      filler: {\n        propagate: true\n      }\n    }\n  });\n\n  var mappers = {\n    dataset: function dataset(source) {\n      var index = source.fill;\n      var chart = source.chart;\n      var meta = chart.getDatasetMeta(index);\n      var visible = meta && chart.isDatasetVisible(index);\n      var points = visible && meta.dataset._children || [];\n      var length = points.length || 0;\n      return !length ? null : function (point, i) {\n        return i < length && points[i]._view || null;\n      };\n    },\n    boundary: function boundary(source) {\n      var boundary = source.boundary;\n      var x = boundary ? boundary.x : null;\n      var y = boundary ? boundary.y : null;\n      return function (point) {\n        return {\n          x: x === null ? point.x : x,\n          y: y === null ? point.y : y\n        };\n      };\n    }\n  }; // @todo if (fill[0] === '#')\n\n  function decodeFill(el, index, count) {\n    var model = el._model || {};\n    var fill = model.fill;\n    var target;\n\n    if (fill === undefined) {\n      fill = !!model.backgroundColor;\n    }\n\n    if (fill === false || fill === null) {\n      return false;\n    }\n\n    if (fill === true) {\n      return 'origin';\n    }\n\n    target = parseFloat(fill, 10);\n\n    if (isFinite(target) && Math.floor(target) === target) {\n      if (fill[0] === '-' || fill[0] === '+') {\n        target = index + target;\n      }\n\n      if (target === index || target < 0 || target >= count) {\n        return false;\n      }\n\n      return target;\n    }\n\n    switch (fill) {\n      // compatibility\n      case 'bottom':\n        return 'start';\n\n      case 'top':\n        return 'end';\n\n      case 'zero':\n        return 'origin';\n      // supported boundaries\n\n      case 'origin':\n      case 'start':\n      case 'end':\n        return fill;\n      // invalid fill values\n\n      default:\n        return false;\n    }\n  }\n\n  function computeBoundary(source) {\n    var model = source.el._model || {};\n    var scale = source.el._scale || {};\n    var fill = source.fill;\n    var target = null;\n    var horizontal;\n\n    if (isFinite(fill)) {\n      return null;\n    } // Backward compatibility: until v3, we still need to support boundary values set on\n    // the model (scaleTop, scaleBottom and scaleZero) because some external plugins and\n    // controllers might still use it (e.g. the Smith chart).\n\n\n    if (fill === 'start') {\n      target = model.scaleBottom === undefined ? scale.bottom : model.scaleBottom;\n    } else if (fill === 'end') {\n      target = model.scaleTop === undefined ? scale.top : model.scaleTop;\n    } else if (model.scaleZero !== undefined) {\n      target = model.scaleZero;\n    } else if (scale.getBasePosition) {\n      target = scale.getBasePosition();\n    } else if (scale.getBasePixel) {\n      target = scale.getBasePixel();\n    }\n\n    if (target !== undefined && target !== null) {\n      if (target.x !== undefined && target.y !== undefined) {\n        return target;\n      }\n\n      if (helpers$1.isFinite(target)) {\n        horizontal = scale.isHorizontal();\n        return {\n          x: horizontal ? target : null,\n          y: horizontal ? null : target\n        };\n      }\n    }\n\n    return null;\n  }\n\n  function resolveTarget(sources, index, propagate) {\n    var source = sources[index];\n    var fill = source.fill;\n    var visited = [index];\n    var target;\n\n    if (!propagate) {\n      return fill;\n    }\n\n    while (fill !== false && visited.indexOf(fill) === -1) {\n      if (!isFinite(fill)) {\n        return fill;\n      }\n\n      target = sources[fill];\n\n      if (!target) {\n        return false;\n      }\n\n      if (target.visible) {\n        return fill;\n      }\n\n      visited.push(fill);\n      fill = target.fill;\n    }\n\n    return false;\n  }\n\n  function createMapper(source) {\n    var fill = source.fill;\n    var type = 'dataset';\n\n    if (fill === false) {\n      return null;\n    }\n\n    if (!isFinite(fill)) {\n      type = 'boundary';\n    }\n\n    return mappers[type](source);\n  }\n\n  function isDrawable(point) {\n    return point && !point.skip;\n  }\n\n  function drawArea(ctx, curve0, curve1, len0, len1) {\n    var i;\n\n    if (!len0 || !len1) {\n      return;\n    } // building first area curve (normal)\n\n\n    ctx.moveTo(curve0[0].x, curve0[0].y);\n\n    for (i = 1; i < len0; ++i) {\n      helpers$1.canvas.lineTo(ctx, curve0[i - 1], curve0[i]);\n    } // joining the two area curves\n\n\n    ctx.lineTo(curve1[len1 - 1].x, curve1[len1 - 1].y); // building opposite area curve (reverse)\n\n    for (i = len1 - 1; i > 0; --i) {\n      helpers$1.canvas.lineTo(ctx, curve1[i], curve1[i - 1], true);\n    }\n  }\n\n  function doFill(ctx, points, mapper, view, color, loop) {\n    var count = points.length;\n    var span = view.spanGaps;\n    var curve0 = [];\n    var curve1 = [];\n    var len0 = 0;\n    var len1 = 0;\n    var i, ilen, index, p0, p1, d0, d1;\n    ctx.beginPath();\n\n    for (i = 0, ilen = count + !!loop; i < ilen; ++i) {\n      index = i % count;\n      p0 = points[index]._view;\n      p1 = mapper(p0, index, view);\n      d0 = isDrawable(p0);\n      d1 = isDrawable(p1);\n\n      if (d0 && d1) {\n        len0 = curve0.push(p0);\n        len1 = curve1.push(p1);\n      } else if (len0 && len1) {\n        if (!span) {\n          drawArea(ctx, curve0, curve1, len0, len1);\n          len0 = len1 = 0;\n          curve0 = [];\n          curve1 = [];\n        } else {\n          if (d0) {\n            curve0.push(p0);\n          }\n\n          if (d1) {\n            curve1.push(p1);\n          }\n        }\n      }\n    }\n\n    drawArea(ctx, curve0, curve1, len0, len1);\n    ctx.closePath();\n    ctx.fillStyle = color;\n    ctx.fill();\n  }\n\n  var plugin_filler = {\n    id: 'filler',\n    afterDatasetsUpdate: function afterDatasetsUpdate(chart, options) {\n      var count = (chart.data.datasets || []).length;\n      var propagate = options.propagate;\n      var sources = [];\n      var meta, i, el, source;\n\n      for (i = 0; i < count; ++i) {\n        meta = chart.getDatasetMeta(i);\n        el = meta.dataset;\n        source = null;\n\n        if (el && el._model && el instanceof elements.Line) {\n          source = {\n            visible: chart.isDatasetVisible(i),\n            fill: decodeFill(el, i, count),\n            chart: chart,\n            el: el\n          };\n        }\n\n        meta.$filler = source;\n        sources.push(source);\n      }\n\n      for (i = 0; i < count; ++i) {\n        source = sources[i];\n\n        if (!source) {\n          continue;\n        }\n\n        source.fill = resolveTarget(sources, i, propagate);\n        source.boundary = computeBoundary(source);\n        source.mapper = createMapper(source);\n      }\n    },\n    beforeDatasetDraw: function beforeDatasetDraw(chart, args) {\n      var meta = args.meta.$filler;\n\n      if (!meta) {\n        return;\n      }\n\n      var ctx = chart.ctx;\n      var el = meta.el;\n      var view = el._view;\n      var points = el._children || [];\n      var mapper = meta.mapper;\n      var color = view.backgroundColor || core_defaults.global.defaultColor;\n\n      if (mapper && color && points.length) {\n        helpers$1.canvas.clipArea(ctx, chart.chartArea);\n        doFill(ctx, points, mapper, view, color, el._loop);\n        helpers$1.canvas.unclipArea(ctx);\n      }\n    }\n  };\n  var noop$1 = helpers$1.noop;\n  var valueOrDefault$d = helpers$1.valueOrDefault;\n\n  core_defaults._set('global', {\n    legend: {\n      display: true,\n      position: 'top',\n      fullWidth: true,\n      reverse: false,\n      weight: 1000,\n      // a callback that will handle\n      onClick: function onClick(e, legendItem) {\n        var index = legendItem.datasetIndex;\n        var ci = this.chart;\n        var meta = ci.getDatasetMeta(index); // See controller.isDatasetVisible comment\n\n        meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null; // We hid a dataset ... rerender the chart\n\n        ci.update();\n      },\n      onHover: null,\n      onLeave: null,\n      labels: {\n        boxWidth: 40,\n        padding: 10,\n        // Generates labels shown in the legend\n        // Valid properties to return:\n        // text : text to display\n        // fillStyle : fill of coloured box\n        // strokeStyle: stroke of coloured box\n        // hidden : if this legend item refers to a hidden item\n        // lineCap : cap style for line\n        // lineDash\n        // lineDashOffset :\n        // lineJoin :\n        // lineWidth :\n        generateLabels: function generateLabels(chart) {\n          var data = chart.data;\n          return helpers$1.isArray(data.datasets) ? data.datasets.map(function (dataset, i) {\n            return {\n              text: dataset.label,\n              fillStyle: !helpers$1.isArray(dataset.backgroundColor) ? dataset.backgroundColor : dataset.backgroundColor[0],\n              hidden: !chart.isDatasetVisible(i),\n              lineCap: dataset.borderCapStyle,\n              lineDash: dataset.borderDash,\n              lineDashOffset: dataset.borderDashOffset,\n              lineJoin: dataset.borderJoinStyle,\n              lineWidth: dataset.borderWidth,\n              strokeStyle: dataset.borderColor,\n              pointStyle: dataset.pointStyle,\n              // Below is extra data used for toggling the datasets\n              datasetIndex: i\n            };\n          }, this) : [];\n        }\n      }\n    },\n    legendCallback: function legendCallback(chart) {\n      var text = [];\n      text.push('<ul class=\"' + chart.id + '-legend\">');\n\n      for (var i = 0; i < chart.data.datasets.length; i++) {\n        text.push('<li><span style=\"background-color:' + chart.data.datasets[i].backgroundColor + '\"></span>');\n\n        if (chart.data.datasets[i].label) {\n          text.push(chart.data.datasets[i].label);\n        }\n\n        text.push('</li>');\n      }\n\n      text.push('</ul>');\n      return text.join('');\n    }\n  });\n  /**\n   * Helper function to get the box width based on the usePointStyle option\n   * @param {object} labelopts - the label options on the legend\n   * @param {number} fontSize - the label font size\n   * @return {number} width of the color box area\n   */\n\n\n  function getBoxWidth(labelOpts, fontSize) {\n    return labelOpts.usePointStyle && labelOpts.boxWidth > fontSize ? fontSize : labelOpts.boxWidth;\n  }\n  /**\n   * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!\n   */\n\n\n  var Legend = core_element.extend({\n    initialize: function initialize(config) {\n      helpers$1.extend(this, config); // Contains hit boxes for each dataset (in dataset order)\n\n      this.legendHitBoxes = [];\n      /**\n      \t * @private\n      \t */\n\n      this._hoveredItem = null; // Are we in doughnut mode which has a different data type\n\n      this.doughnutMode = false;\n    },\n    // These methods are ordered by lifecycle. Utilities then follow.\n    // Any function defined here is inherited by all legend types.\n    // Any function can be extended by the legend type\n    beforeUpdate: noop$1,\n    update: function update(maxWidth, maxHeight, margins) {\n      var me = this; // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n\n      me.beforeUpdate(); // Absorb the master measurements\n\n      me.maxWidth = maxWidth;\n      me.maxHeight = maxHeight;\n      me.margins = margins; // Dimensions\n\n      me.beforeSetDimensions();\n      me.setDimensions();\n      me.afterSetDimensions(); // Labels\n\n      me.beforeBuildLabels();\n      me.buildLabels();\n      me.afterBuildLabels(); // Fit\n\n      me.beforeFit();\n      me.fit();\n      me.afterFit(); //\n\n      me.afterUpdate();\n      return me.minSize;\n    },\n    afterUpdate: noop$1,\n    //\n    beforeSetDimensions: noop$1,\n    setDimensions: function setDimensions() {\n      var me = this; // Set the unconstrained dimension before label rotation\n\n      if (me.isHorizontal()) {\n        // Reset position before calculating rotation\n        me.width = me.maxWidth;\n        me.left = 0;\n        me.right = me.width;\n      } else {\n        me.height = me.maxHeight; // Reset position before calculating rotation\n\n        me.top = 0;\n        me.bottom = me.height;\n      } // Reset padding\n\n\n      me.paddingLeft = 0;\n      me.paddingTop = 0;\n      me.paddingRight = 0;\n      me.paddingBottom = 0; // Reset minSize\n\n      me.minSize = {\n        width: 0,\n        height: 0\n      };\n    },\n    afterSetDimensions: noop$1,\n    //\n    beforeBuildLabels: noop$1,\n    buildLabels: function buildLabels() {\n      var me = this;\n      var labelOpts = me.options.labels || {};\n      var legendItems = helpers$1.callback(labelOpts.generateLabels, [me.chart], me) || [];\n\n      if (labelOpts.filter) {\n        legendItems = legendItems.filter(function (item) {\n          return labelOpts.filter(item, me.chart.data);\n        });\n      }\n\n      if (me.options.reverse) {\n        legendItems.reverse();\n      }\n\n      me.legendItems = legendItems;\n    },\n    afterBuildLabels: noop$1,\n    //\n    beforeFit: noop$1,\n    fit: function fit() {\n      var me = this;\n      var opts = me.options;\n      var labelOpts = opts.labels;\n      var display = opts.display;\n      var ctx = me.ctx;\n\n      var labelFont = helpers$1.options._parseFont(labelOpts);\n\n      var fontSize = labelFont.size; // Reset hit boxes\n\n      var hitboxes = me.legendHitBoxes = [];\n      var minSize = me.minSize;\n      var isHorizontal = me.isHorizontal();\n\n      if (isHorizontal) {\n        minSize.width = me.maxWidth; // fill all the width\n\n        minSize.height = display ? 10 : 0;\n      } else {\n        minSize.width = display ? 10 : 0;\n        minSize.height = me.maxHeight; // fill all the height\n      } // Increase sizes here\n\n\n      if (display) {\n        ctx.font = labelFont.string;\n\n        if (isHorizontal) {\n          // Labels\n          // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one\n          var lineWidths = me.lineWidths = [0];\n          var totalHeight = 0;\n          ctx.textAlign = 'left';\n          ctx.textBaseline = 'top';\n          helpers$1.each(me.legendItems, function (legendItem, i) {\n            var boxWidth = getBoxWidth(labelOpts, fontSize);\n            var width = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n\n            if (i === 0 || lineWidths[lineWidths.length - 1] + width + labelOpts.padding > minSize.width) {\n              totalHeight += fontSize + labelOpts.padding;\n              lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = labelOpts.padding;\n            } // Store the hitbox width and height here. Final position will be updated in `draw`\n\n\n            hitboxes[i] = {\n              left: 0,\n              top: 0,\n              width: width,\n              height: fontSize\n            };\n            lineWidths[lineWidths.length - 1] += width + labelOpts.padding;\n          });\n          minSize.height += totalHeight;\n        } else {\n          var vPadding = labelOpts.padding;\n          var columnWidths = me.columnWidths = [];\n          var totalWidth = labelOpts.padding;\n          var currentColWidth = 0;\n          var currentColHeight = 0;\n          var itemHeight = fontSize + vPadding;\n          helpers$1.each(me.legendItems, function (legendItem, i) {\n            var boxWidth = getBoxWidth(labelOpts, fontSize);\n            var itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width; // If too tall, go to new column\n\n            if (i > 0 && currentColHeight + itemHeight > minSize.height - vPadding) {\n              totalWidth += currentColWidth + labelOpts.padding;\n              columnWidths.push(currentColWidth); // previous column width\n\n              currentColWidth = 0;\n              currentColHeight = 0;\n            } // Get max width\n\n\n            currentColWidth = Math.max(currentColWidth, itemWidth);\n            currentColHeight += itemHeight; // Store the hitbox width and height here. Final position will be updated in `draw`\n\n            hitboxes[i] = {\n              left: 0,\n              top: 0,\n              width: itemWidth,\n              height: fontSize\n            };\n          });\n          totalWidth += currentColWidth;\n          columnWidths.push(currentColWidth);\n          minSize.width += totalWidth;\n        }\n      }\n\n      me.width = minSize.width;\n      me.height = minSize.height;\n    },\n    afterFit: noop$1,\n    // Shared Methods\n    isHorizontal: function isHorizontal() {\n      return this.options.position === 'top' || this.options.position === 'bottom';\n    },\n    // Actually draw the legend on the canvas\n    draw: function draw() {\n      var me = this;\n      var opts = me.options;\n      var labelOpts = opts.labels;\n      var globalDefaults = core_defaults.global;\n      var defaultColor = globalDefaults.defaultColor;\n      var lineDefault = globalDefaults.elements.line;\n      var legendWidth = me.width;\n      var lineWidths = me.lineWidths;\n\n      if (opts.display) {\n        var ctx = me.ctx;\n        var fontColor = valueOrDefault$d(labelOpts.fontColor, globalDefaults.defaultFontColor);\n\n        var labelFont = helpers$1.options._parseFont(labelOpts);\n\n        var fontSize = labelFont.size;\n        var cursor; // Canvas setup\n\n        ctx.textAlign = 'left';\n        ctx.textBaseline = 'middle';\n        ctx.lineWidth = 0.5;\n        ctx.strokeStyle = fontColor; // for strikethrough effect\n\n        ctx.fillStyle = fontColor; // render in correct colour\n\n        ctx.font = labelFont.string;\n        var boxWidth = getBoxWidth(labelOpts, fontSize);\n        var hitboxes = me.legendHitBoxes; // current position\n\n        var drawLegendBox = function drawLegendBox(x, y, legendItem) {\n          if (isNaN(boxWidth) || boxWidth <= 0) {\n            return;\n          } // Set the ctx for the box\n\n\n          ctx.save();\n          var lineWidth = valueOrDefault$d(legendItem.lineWidth, lineDefault.borderWidth);\n          ctx.fillStyle = valueOrDefault$d(legendItem.fillStyle, defaultColor);\n          ctx.lineCap = valueOrDefault$d(legendItem.lineCap, lineDefault.borderCapStyle);\n          ctx.lineDashOffset = valueOrDefault$d(legendItem.lineDashOffset, lineDefault.borderDashOffset);\n          ctx.lineJoin = valueOrDefault$d(legendItem.lineJoin, lineDefault.borderJoinStyle);\n          ctx.lineWidth = lineWidth;\n          ctx.strokeStyle = valueOrDefault$d(legendItem.strokeStyle, defaultColor);\n\n          if (ctx.setLineDash) {\n            // IE 9 and 10 do not support line dash\n            ctx.setLineDash(valueOrDefault$d(legendItem.lineDash, lineDefault.borderDash));\n          }\n\n          if (opts.labels && opts.labels.usePointStyle) {\n            // Recalculate x and y for drawPoint() because its expecting\n            // x and y to be center of figure (instead of top left)\n            var radius = boxWidth * Math.SQRT2 / 2;\n            var centerX = x + boxWidth / 2;\n            var centerY = y + fontSize / 2; // Draw pointStyle as legend symbol\n\n            helpers$1.canvas.drawPoint(ctx, legendItem.pointStyle, radius, centerX, centerY);\n          } else {\n            // Draw box as legend symbol\n            if (lineWidth !== 0) {\n              ctx.strokeRect(x, y, boxWidth, fontSize);\n            }\n\n            ctx.fillRect(x, y, boxWidth, fontSize);\n          }\n\n          ctx.restore();\n        };\n\n        var fillText = function fillText(x, y, legendItem, textWidth) {\n          var halfFontSize = fontSize / 2;\n          var xLeft = boxWidth + halfFontSize + x;\n          var yMiddle = y + halfFontSize;\n          ctx.fillText(legendItem.text, xLeft, yMiddle);\n\n          if (legendItem.hidden) {\n            // Strikethrough the text if hidden\n            ctx.beginPath();\n            ctx.lineWidth = 2;\n            ctx.moveTo(xLeft, yMiddle);\n            ctx.lineTo(xLeft + textWidth, yMiddle);\n            ctx.stroke();\n          }\n        }; // Horizontal\n\n\n        var isHorizontal = me.isHorizontal();\n\n        if (isHorizontal) {\n          cursor = {\n            x: me.left + (legendWidth - lineWidths[0]) / 2 + labelOpts.padding,\n            y: me.top + labelOpts.padding,\n            line: 0\n          };\n        } else {\n          cursor = {\n            x: me.left + labelOpts.padding,\n            y: me.top + labelOpts.padding,\n            line: 0\n          };\n        }\n\n        var itemHeight = fontSize + labelOpts.padding;\n        helpers$1.each(me.legendItems, function (legendItem, i) {\n          var textWidth = ctx.measureText(legendItem.text).width;\n          var width = boxWidth + fontSize / 2 + textWidth;\n          var x = cursor.x;\n          var y = cursor.y; // Use (me.left + me.minSize.width) and (me.top + me.minSize.height)\n          // instead of me.right and me.bottom because me.width and me.height\n          // may have been changed since me.minSize was calculated\n\n          if (isHorizontal) {\n            if (i > 0 && x + width + labelOpts.padding > me.left + me.minSize.width) {\n              y = cursor.y += itemHeight;\n              cursor.line++;\n              x = cursor.x = me.left + (legendWidth - lineWidths[cursor.line]) / 2 + labelOpts.padding;\n            }\n          } else if (i > 0 && y + itemHeight > me.top + me.minSize.height) {\n            x = cursor.x = x + me.columnWidths[cursor.line] + labelOpts.padding;\n            y = cursor.y = me.top + labelOpts.padding;\n            cursor.line++;\n          }\n\n          drawLegendBox(x, y, legendItem);\n          hitboxes[i].left = x;\n          hitboxes[i].top = y; // Fill the actual label\n\n          fillText(x, y, legendItem, textWidth);\n\n          if (isHorizontal) {\n            cursor.x += width + labelOpts.padding;\n          } else {\n            cursor.y += itemHeight;\n          }\n        });\n      }\n    },\n\n    /**\n     * @private\n     */\n    _getLegendItemAt: function _getLegendItemAt(x, y) {\n      var me = this;\n      var i, hitBox, lh;\n\n      if (x >= me.left && x <= me.right && y >= me.top && y <= me.bottom) {\n        // See if we are touching one of the dataset boxes\n        lh = me.legendHitBoxes;\n\n        for (i = 0; i < lh.length; ++i) {\n          hitBox = lh[i];\n\n          if (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {\n            // Touching an element\n            return me.legendItems[i];\n          }\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Handle an event\n     * @private\n     * @param {IEvent} event - The event to handle\n     */\n    handleEvent: function handleEvent(e) {\n      var me = this;\n      var opts = me.options;\n      var type = e.type === 'mouseup' ? 'click' : e.type;\n      var hoveredItem;\n\n      if (type === 'mousemove') {\n        if (!opts.onHover && !opts.onLeave) {\n          return;\n        }\n      } else if (type === 'click') {\n        if (!opts.onClick) {\n          return;\n        }\n      } else {\n        return;\n      } // Chart event already has relative position in it\n\n\n      hoveredItem = me._getLegendItemAt(e.x, e.y);\n\n      if (type === 'click') {\n        if (hoveredItem && opts.onClick) {\n          // use e.native for backwards compatibility\n          opts.onClick.call(me, e.native, hoveredItem);\n        }\n      } else {\n        if (opts.onLeave && hoveredItem !== me._hoveredItem) {\n          if (me._hoveredItem) {\n            opts.onLeave.call(me, e.native, me._hoveredItem);\n          }\n\n          me._hoveredItem = hoveredItem;\n        }\n\n        if (opts.onHover && hoveredItem) {\n          // use e.native for backwards compatibility\n          opts.onHover.call(me, e.native, hoveredItem);\n        }\n      }\n    }\n  });\n\n  function createNewLegendAndAttach(chart, legendOpts) {\n    var legend = new Legend({\n      ctx: chart.ctx,\n      options: legendOpts,\n      chart: chart\n    });\n    core_layouts.configure(chart, legend, legendOpts);\n    core_layouts.addBox(chart, legend);\n    chart.legend = legend;\n  }\n\n  var plugin_legend = {\n    id: 'legend',\n\n    /**\n     * Backward compatibility: since 2.1.5, the legend is registered as a plugin, making\n     * Chart.Legend obsolete. To avoid a breaking change, we export the Legend as part of\n     * the plugin, which one will be re-exposed in the chart.js file.\n     * https://github.com/chartjs/Chart.js/pull/2640\n     * @private\n     */\n    _element: Legend,\n    beforeInit: function beforeInit(chart) {\n      var legendOpts = chart.options.legend;\n\n      if (legendOpts) {\n        createNewLegendAndAttach(chart, legendOpts);\n      }\n    },\n    beforeUpdate: function beforeUpdate(chart) {\n      var legendOpts = chart.options.legend;\n      var legend = chart.legend;\n\n      if (legendOpts) {\n        helpers$1.mergeIf(legendOpts, core_defaults.global.legend);\n\n        if (legend) {\n          core_layouts.configure(chart, legend, legendOpts);\n          legend.options = legendOpts;\n        } else {\n          createNewLegendAndAttach(chart, legendOpts);\n        }\n      } else if (legend) {\n        core_layouts.removeBox(chart, legend);\n        delete chart.legend;\n      }\n    },\n    afterEvent: function afterEvent(chart, e) {\n      var legend = chart.legend;\n\n      if (legend) {\n        legend.handleEvent(e);\n      }\n    }\n  };\n  var noop$2 = helpers$1.noop;\n\n  core_defaults._set('global', {\n    title: {\n      display: false,\n      fontStyle: 'bold',\n      fullWidth: true,\n      padding: 10,\n      position: 'top',\n      text: '',\n      weight: 2000 // by default greater than legend (1000) to be above\n\n    }\n  });\n  /**\n   * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!\n   */\n\n\n  var Title = core_element.extend({\n    initialize: function initialize(config) {\n      var me = this;\n      helpers$1.extend(me, config); // Contains hit boxes for each dataset (in dataset order)\n\n      me.legendHitBoxes = [];\n    },\n    // These methods are ordered by lifecycle. Utilities then follow.\n    beforeUpdate: noop$2,\n    update: function update(maxWidth, maxHeight, margins) {\n      var me = this; // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n\n      me.beforeUpdate(); // Absorb the master measurements\n\n      me.maxWidth = maxWidth;\n      me.maxHeight = maxHeight;\n      me.margins = margins; // Dimensions\n\n      me.beforeSetDimensions();\n      me.setDimensions();\n      me.afterSetDimensions(); // Labels\n\n      me.beforeBuildLabels();\n      me.buildLabels();\n      me.afterBuildLabels(); // Fit\n\n      me.beforeFit();\n      me.fit();\n      me.afterFit(); //\n\n      me.afterUpdate();\n      return me.minSize;\n    },\n    afterUpdate: noop$2,\n    //\n    beforeSetDimensions: noop$2,\n    setDimensions: function setDimensions() {\n      var me = this; // Set the unconstrained dimension before label rotation\n\n      if (me.isHorizontal()) {\n        // Reset position before calculating rotation\n        me.width = me.maxWidth;\n        me.left = 0;\n        me.right = me.width;\n      } else {\n        me.height = me.maxHeight; // Reset position before calculating rotation\n\n        me.top = 0;\n        me.bottom = me.height;\n      } // Reset padding\n\n\n      me.paddingLeft = 0;\n      me.paddingTop = 0;\n      me.paddingRight = 0;\n      me.paddingBottom = 0; // Reset minSize\n\n      me.minSize = {\n        width: 0,\n        height: 0\n      };\n    },\n    afterSetDimensions: noop$2,\n    //\n    beforeBuildLabels: noop$2,\n    buildLabels: noop$2,\n    afterBuildLabels: noop$2,\n    //\n    beforeFit: noop$2,\n    fit: function fit() {\n      var me = this;\n      var opts = me.options;\n      var display = opts.display;\n      var minSize = me.minSize;\n      var lineCount = helpers$1.isArray(opts.text) ? opts.text.length : 1;\n\n      var fontOpts = helpers$1.options._parseFont(opts);\n\n      var textSize = display ? lineCount * fontOpts.lineHeight + opts.padding * 2 : 0;\n\n      if (me.isHorizontal()) {\n        minSize.width = me.maxWidth; // fill all the width\n\n        minSize.height = textSize;\n      } else {\n        minSize.width = textSize;\n        minSize.height = me.maxHeight; // fill all the height\n      }\n\n      me.width = minSize.width;\n      me.height = minSize.height;\n    },\n    afterFit: noop$2,\n    // Shared Methods\n    isHorizontal: function isHorizontal() {\n      var pos = this.options.position;\n      return pos === 'top' || pos === 'bottom';\n    },\n    // Actually draw the title block on the canvas\n    draw: function draw() {\n      var me = this;\n      var ctx = me.ctx;\n      var opts = me.options;\n\n      if (opts.display) {\n        var fontOpts = helpers$1.options._parseFont(opts);\n\n        var lineHeight = fontOpts.lineHeight;\n        var offset = lineHeight / 2 + opts.padding;\n        var rotation = 0;\n        var top = me.top;\n        var left = me.left;\n        var bottom = me.bottom;\n        var right = me.right;\n        var maxWidth, titleX, titleY;\n        ctx.fillStyle = helpers$1.valueOrDefault(opts.fontColor, core_defaults.global.defaultFontColor); // render in correct colour\n\n        ctx.font = fontOpts.string; // Horizontal\n\n        if (me.isHorizontal()) {\n          titleX = left + (right - left) / 2; // midpoint of the width\n\n          titleY = top + offset;\n          maxWidth = right - left;\n        } else {\n          titleX = opts.position === 'left' ? left + offset : right - offset;\n          titleY = top + (bottom - top) / 2;\n          maxWidth = bottom - top;\n          rotation = Math.PI * (opts.position === 'left' ? -0.5 : 0.5);\n        }\n\n        ctx.save();\n        ctx.translate(titleX, titleY);\n        ctx.rotate(rotation);\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        var text = opts.text;\n\n        if (helpers$1.isArray(text)) {\n          var y = 0;\n\n          for (var i = 0; i < text.length; ++i) {\n            ctx.fillText(text[i], 0, y, maxWidth);\n            y += lineHeight;\n          }\n        } else {\n          ctx.fillText(text, 0, 0, maxWidth);\n        }\n\n        ctx.restore();\n      }\n    }\n  });\n\n  function createNewTitleBlockAndAttach(chart, titleOpts) {\n    var title = new Title({\n      ctx: chart.ctx,\n      options: titleOpts,\n      chart: chart\n    });\n    core_layouts.configure(chart, title, titleOpts);\n    core_layouts.addBox(chart, title);\n    chart.titleBlock = title;\n  }\n\n  var plugin_title = {\n    id: 'title',\n\n    /**\n     * Backward compatibility: since 2.1.5, the title is registered as a plugin, making\n     * Chart.Title obsolete. To avoid a breaking change, we export the Title as part of\n     * the plugin, which one will be re-exposed in the chart.js file.\n     * https://github.com/chartjs/Chart.js/pull/2640\n     * @private\n     */\n    _element: Title,\n    beforeInit: function beforeInit(chart) {\n      var titleOpts = chart.options.title;\n\n      if (titleOpts) {\n        createNewTitleBlockAndAttach(chart, titleOpts);\n      }\n    },\n    beforeUpdate: function beforeUpdate(chart) {\n      var titleOpts = chart.options.title;\n      var titleBlock = chart.titleBlock;\n\n      if (titleOpts) {\n        helpers$1.mergeIf(titleOpts, core_defaults.global.title);\n\n        if (titleBlock) {\n          core_layouts.configure(chart, titleBlock, titleOpts);\n          titleBlock.options = titleOpts;\n        } else {\n          createNewTitleBlockAndAttach(chart, titleOpts);\n        }\n      } else if (titleBlock) {\n        core_layouts.removeBox(chart, titleBlock);\n        delete chart.titleBlock;\n      }\n    }\n  };\n  var plugins = {};\n  var filler = plugin_filler;\n  var legend = plugin_legend;\n  var title = plugin_title;\n  plugins.filler = filler;\n  plugins.legend = legend;\n  plugins.title = title;\n  /**\n   * @namespace Chart\n   */\n\n  core_controller.helpers = helpers$1; // @todo dispatch these helpers into appropriated helpers/helpers.* file and write unit tests!\n\n  core_helpers(core_controller);\n  core_controller._adapters = core_adapters;\n  core_controller.Animation = core_animation;\n  core_controller.animationService = core_animations;\n  core_controller.controllers = controllers;\n  core_controller.DatasetController = core_datasetController;\n  core_controller.defaults = core_defaults;\n  core_controller.Element = core_element;\n  core_controller.elements = elements;\n  core_controller.Interaction = core_interaction;\n  core_controller.layouts = core_layouts;\n  core_controller.platform = platform;\n  core_controller.plugins = core_plugins;\n  core_controller.Scale = core_scale;\n  core_controller.scaleService = core_scaleService;\n  core_controller.Ticks = core_ticks;\n  core_controller.Tooltip = core_tooltip; // Register built-in scales\n\n  core_controller.helpers.each(scales, function (scale, type) {\n    core_controller.scaleService.registerScaleType(type, scale, scale._defaults);\n  }); // Load to register built-in adapters (as side effects)\n  // Loading built-in plugins\n\n  for (var k in plugins) {\n    if (plugins.hasOwnProperty(k)) {\n      core_controller.plugins.register(plugins[k]);\n    }\n  }\n\n  core_controller.platform.initialize();\n  var src = core_controller;\n\n  if (typeof window !== 'undefined') {\n    window.Chart = core_controller;\n  } // DEPRECATIONS\n\n  /**\n   * Provided for backward compatibility, not available anymore\n   * @namespace Chart.Chart\n   * @deprecated since version 2.8.0\n   * @todo remove at version 3\n   * @private\n   */\n\n\n  core_controller.Chart = core_controller;\n  /**\n   * Provided for backward compatibility, not available anymore\n   * @namespace Chart.Legend\n   * @deprecated since version 2.1.5\n   * @todo remove at version 3\n   * @private\n   */\n\n  core_controller.Legend = plugins.legend._element;\n  /**\n   * Provided for backward compatibility, not available anymore\n   * @namespace Chart.Title\n   * @deprecated since version 2.1.5\n   * @todo remove at version 3\n   * @private\n   */\n\n  core_controller.Title = plugins.title._element;\n  /**\n   * Provided for backward compatibility, use Chart.plugins instead\n   * @namespace Chart.pluginService\n   * @deprecated since version 2.1.5\n   * @todo remove at version 3\n   * @private\n   */\n\n  core_controller.pluginService = core_controller.plugins;\n  /**\n   * Provided for backward compatibility, inheriting from Chart.PlugingBase has no\n   * effect, instead simply create/register plugins via plain JavaScript objects.\n   * @interface Chart.PluginBase\n   * @deprecated since version 2.5.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  core_controller.PluginBase = core_controller.Element.extend({});\n  /**\n   * Provided for backward compatibility, use Chart.helpers.canvas instead.\n   * @namespace Chart.canvasHelpers\n   * @deprecated since version 2.6.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  core_controller.canvasHelpers = core_controller.helpers.canvas;\n  /**\n   * Provided for backward compatibility, use Chart.layouts instead.\n   * @namespace Chart.layoutService\n   * @deprecated since version 2.7.3\n   * @todo remove at version 3\n   * @private\n   */\n\n  core_controller.layoutService = core_controller.layouts;\n  /**\n   * Provided for backward compatibility, not available anymore.\n   * @namespace Chart.LinearScaleBase\n   * @deprecated since version 2.8\n   * @todo remove at version 3\n   * @private\n   */\n\n  core_controller.LinearScaleBase = scale_linearbase;\n  /**\n   * Provided for backward compatibility, instead we should create a new Chart\n   * by setting the type in the config (`new Chart(id, {type: '{chart-type}'}`).\n   * @deprecated since version 2.8.0\n   * @todo remove at version 3\n   */\n\n  core_controller.helpers.each(['Bar', 'Bubble', 'Doughnut', 'Line', 'PolarArea', 'Radar', 'Scatter'], function (klass) {\n    core_controller[klass] = function (ctx, cfg) {\n      return new core_controller(ctx, core_controller.helpers.merge(cfg || {}, {\n        type: klass.charAt(0).toLowerCase() + klass.slice(1)\n      }));\n    };\n  });\n  return src;\n});","var baseAssignValue = require('./_baseAssignValue'),\n    createAggregator = require('./_createAggregator');\n/**\n * Creates an object composed of keys generated from the results of running\n * each element of `collection` thru `iteratee`. The corresponding value of\n * each key is the last element responsible for generating the key. The\n * iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n * @returns {Object} Returns the composed aggregate object.\n * @example\n *\n * var array = [\n *   { 'dir': 'left', 'code': 97 },\n *   { 'dir': 'right', 'code': 100 }\n * ];\n *\n * _.keyBy(array, function(o) {\n *   return String.fromCharCode(o.code);\n * });\n * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n *\n * _.keyBy(array, 'dir');\n * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n */\n\n\nvar keyBy = createAggregator(function (result, value, key) {\n  baseAssignValue(result, key, value);\n});\nmodule.exports = keyBy;","var arrayAggregator = require('./_arrayAggregator'),\n    baseAggregator = require('./_baseAggregator'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray');\n/**\n * Creates a function like `_.groupBy`.\n *\n * @private\n * @param {Function} setter The function to set accumulator values.\n * @param {Function} [initializer] The accumulator object initializer.\n * @returns {Function} Returns the new aggregator function.\n */\n\n\nfunction createAggregator(setter, initializer) {\n  return function (collection, iteratee) {\n    var func = isArray(collection) ? arrayAggregator : baseAggregator,\n        accumulator = initializer ? initializer() : {};\n    return func(collection, setter, baseIteratee(iteratee, 2), accumulator);\n  };\n}\n\nmodule.exports = createAggregator;","/**\n * A specialized version of `baseAggregator` for arrays.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction arrayAggregator(array, setter, iteratee, accumulator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    var value = array[index];\n    setter(accumulator, value, iteratee(value), array);\n  }\n\n  return accumulator;\n}\n\nmodule.exports = arrayAggregator;","var baseEach = require('./_baseEach');\n/**\n * Aggregates elements of `collection` on `accumulator` with keys transformed\n * by `iteratee` and values set by `setter`.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\n\n\nfunction baseAggregator(collection, setter, iteratee, accumulator) {\n  baseEach(collection, function (value, key, collection) {\n    setter(accumulator, value, iteratee(value), collection);\n  });\n  return accumulator;\n}\n\nmodule.exports = baseAggregator;"],"sourceRoot":""}